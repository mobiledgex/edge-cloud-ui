{"ast":null,"code":"import * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n/*\n{ key:\n   { developer_key: { name: 'bicinkiOrg' },\n     name: 'bicTestApp',\n     version: '1.0.0' },\n  image_path: 'registry.mobiledgex.net:5000/mobiledgex/simapp',\n  image_type: 1,\n  access_ports: 'udp:12001,tcp:80,http:7777',\n  default_flavor: { name: 'x1.medium' },\n  cluster: { name: 'biccluster' },\n  command: 'simapp -port 7777',\n  deployment: 'kubernetes',\n  deployment_manifest:\n   'apiVersion: v1\\nkind: Service\\nmetadata:\\n  name: bictestapp-tcp\\n  labels:\\n    run: bictestapp\\nspec:\\n  type: LoadBalancer\\n  ports:\\n  - name: tcp80\\n    protocol: TCP\\n    port: 80\\n    targetPort: 80\\n  - name: http7777\\n    protocol: TCP\\n    port: 7777\\n    targetPort: 7777\\n  selector:\\n    run: bictestapp\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: bictestapp-udp\\n  labels:\\n    run: bictestapp\\nspec:\\n  type: LoadBalancer\\n  ports:\\n  - name: udp12001\\n    protocol: UDP\\n    port: 12001\\n    targetPort: 12001\\n  selector:\\n    run: bictestapp\\n---\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: bictestapp-deployment\\nspec:\\n  selector:\\n    matchLabels:\\n      run: bictestapp\\n  replicas: 1\\n  template:\\n    metadata:\\n      labels:\\n        run: bictestapp\\n    spec:\\n      volumes:\\n      imagePullSecrets:\\n      - name: mexregistrysecret\\n      containers:\\n      - name: bictestapp\\n        image: registry.mobiledgex.net:5000/mobiledgex/simapp\\n        imagePullPolicy: Always\\n        ports:\\n        - containerPort: 12001\\n          protocol: UDP\\n        - containerPort: 80\\n          protocol: TCP\\n        - containerPort: 7777\\n          protocol: TCP\\n        command:\\n        - \"simapp\"\\n        - \"-port\"\\n        - \"7777\"\\n',\n  deployment_generator: 'kubernetes-basic' }\n\n */\n\n\nvar newRegistKey = ['Region', 'DeveloperName', 'AppName', 'Version', 'DeploymentType', 'ImageType', 'ImagePath', 'AuthPublicKey', 'DefaultFlavor', 'Ports', 'DefaultFQDN', 'PackageName', 'ScaleWithCluster', 'Command', 'DeploymentMF', 'Editable'];\n\nvar generateData = function generateData(datas, body) {\n  var values = [];\n  var toArray = null;\n  var toJson = [];\n\n  if (typeof datas.data === 'object') {\n    toJson.push(datas.data ? datas.data : {});\n  } else {\n    toArray = datas.data.split('\\n');\n    toArray.pop();\n    toJson = toArray.map(function (str) {\n      return JSON.parse(str);\n    });\n  }\n\n  if (toJson && toJson.length) {\n    toJson.map(function (dataResult, i) {\n      if (dataResult.error || dataResult.message || !dataResult.data) {\n        values.push({\n          Region: '',\n          OrganizationName: '',\n          AppName: '',\n          Version: '',\n          DeploymentType: '',\n          ImageType: '',\n          ImagePath: '',\n          AuthPublicKey: '',\n          DefaultFlavor: '',\n          Ports: '',\n          DefaultFQDN: '',\n          PackageName: '',\n          // IpAccess:IpAccess,\n          //Cluster:Cluster,\n          ScaleWithCluster: '',\n          Command: '',\n          DeploymentMF: '',\n          Revision: '',\n          Edit: null\n        });\n      } else {\n        var Index = i;\n        var Region = body.region || body.params.region || '-';\n        var DeveloperName = dataResult.data.key.developer_key.name || '-';\n        var AppName = dataResult.data.key.name || '-';\n        var Version = dataResult.data.key.version || '-';\n        var DeploymentType = dataResult.data.deployment || '-';\n        var Command = dataResult.data.command || '-';\n        var DeploymentMF = dataResult.data.deployment_manifest || '-';\n        var ImageType = dataResult.data.image_type || '-';\n        var ImagePath = dataResult.data.image_path || '-';\n        var DefaultFlavor = dataResult.data.default_flavor.name || '-';\n        var Ports = dataResult.data.access_ports || '-';\n        var AuthPublicKey = dataResult.data.auth_public_key || '-';\n        var ScaleWithCluster = dataResult.data.scale_with_cluster || false;\n        var DefaultFQDN = dataResult.data.official_fqdn || '-';\n        var PackageName = dataResult.data.android_package_name || '-';\n        var Revision = dataResult.data.revision || '-'; //let DeploymentGenerator = dataResult.deployment_generator || '-';\n\n        values.push({\n          Region: Region,\n          OrganizationName: DeveloperName,\n          AppName: AppName,\n          Version: Version,\n          DeploymentType: DeploymentType,\n          ImageType: ImageType,\n          ImagePath: ImagePath,\n          AuthPublicKey: AuthPublicKey,\n          DefaultFlavor: DefaultFlavor,\n          Ports: Ports,\n          DefaultFQDN: DefaultFQDN,\n          PackageName: PackageName,\n          // IpAccess:IpAccess,\n          //Cluster:Cluster,\n          ScaleWithCluster: ScaleWithCluster,\n          Command: Command,\n          DeploymentMF: DeploymentMF,\n          Revision: Revision,\n          Edit: newRegistKey\n        });\n      }\n    });\n  } else {\n    console.log('there is no result');\n  } //ascending or descending\n  //values.sort(numberDes);\n  //values.reverse();\n\n\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar formatComputeApp = function formatComputeApp(props, body) {\n  return generateData(props, body);\n};\n\nexport default formatComputeApp;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/services/formatter/formatComputeApp.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","newRegistKey","generateData","body","values","toArray","toJson","data","push","split","pop","map","str","JSON","parse","length","dataResult","i","error","message","Region","OrganizationName","AppName","Version","DeploymentType","ImageType","ImagePath","AuthPublicKey","DefaultFlavor","Ports","DefaultFQDN","PackageName","ScaleWithCluster","Command","DeploymentMF","Revision","Edit","Index","region","params","DeveloperName","key","developer_key","name","version","deployment","command","deployment_manifest","image_type","image_path","default_flavor","access_ports","auth_public_key","scale_with_cluster","official_fqdn","android_package_name","revision","console","log","retunDate","year","substring","month","day","hour","minute","date","Date","formatComputeApp","props"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n\n/*\n{ key:\n   { developer_key: { name: 'bicinkiOrg' },\n     name: 'bicTestApp',\n     version: '1.0.0' },\n  image_path: 'registry.mobiledgex.net:5000/mobiledgex/simapp',\n  image_type: 1,\n  access_ports: 'udp:12001,tcp:80,http:7777',\n  default_flavor: { name: 'x1.medium' },\n  cluster: { name: 'biccluster' },\n  command: 'simapp -port 7777',\n  deployment: 'kubernetes',\n  deployment_manifest:\n   'apiVersion: v1\\nkind: Service\\nmetadata:\\n  name: bictestapp-tcp\\n  labels:\\n    run: bictestapp\\nspec:\\n  type: LoadBalancer\\n  ports:\\n  - name: tcp80\\n    protocol: TCP\\n    port: 80\\n    targetPort: 80\\n  - name: http7777\\n    protocol: TCP\\n    port: 7777\\n    targetPort: 7777\\n  selector:\\n    run: bictestapp\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: bictestapp-udp\\n  labels:\\n    run: bictestapp\\nspec:\\n  type: LoadBalancer\\n  ports:\\n  - name: udp12001\\n    protocol: UDP\\n    port: 12001\\n    targetPort: 12001\\n  selector:\\n    run: bictestapp\\n---\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: bictestapp-deployment\\nspec:\\n  selector:\\n    matchLabels:\\n      run: bictestapp\\n  replicas: 1\\n  template:\\n    metadata:\\n      labels:\\n        run: bictestapp\\n    spec:\\n      volumes:\\n      imagePullSecrets:\\n      - name: mexregistrysecret\\n      containers:\\n      - name: bictestapp\\n        image: registry.mobiledgex.net:5000/mobiledgex/simapp\\n        imagePullPolicy: Always\\n        ports:\\n        - containerPort: 12001\\n          protocol: UDP\\n        - containerPort: 80\\n          protocol: TCP\\n        - containerPort: 7777\\n          protocol: TCP\\n        command:\\n        - \"simapp\"\\n        - \"-port\"\\n        - \"7777\"\\n',\n  deployment_generator: 'kubernetes-basic' }\n\n */\nlet newRegistKey = [\n    'Region',\n    'DeveloperName',\n    'AppName',\n    'Version',\n    'DeploymentType',\n    'ImageType',\n    'ImagePath',\n    'AuthPublicKey',\n    'DefaultFlavor',\n    'Ports',\n    'DefaultFQDN',\n    'PackageName',\n    'ScaleWithCluster',\n    'Command',\n    'DeploymentMF',\n    'Editable'\n];\nlet generateData = (datas,body) => {\n    let values = [];\n    let toArray = null;\n    let toJson = [];\n \n    if(typeof datas.data === 'object') {\n        toJson.push((datas.data)?datas.data:{});\n    } else {\n        toArray = datas.data.split('\\n')\n        toArray.pop();\n        toJson = toArray.map((str)=>(JSON.parse(str)))\n    }\n    if(toJson && toJson.length){\n        toJson.map((dataResult, i) => {\n            if(dataResult.error || dataResult.message || !dataResult.data) {\n                values.push({\n                    Region:'',\n                    OrganizationName:'',\n                    AppName:'',\n                    Version:'',\n                    DeploymentType:'',\n                    ImageType:'',\n                    ImagePath:'',\n                    AuthPublicKey:'',\n                    DefaultFlavor:'',\n                    Ports:'',\n                    DefaultFQDN:'',\n                    PackageName:'',\n                    // IpAccess:IpAccess,\n                    //Cluster:Cluster,\n                    ScaleWithCluster:'',\n                    Command:'',\n                    DeploymentMF:'',\n                    Revision:'',\n                    Edit:null\n\n                })\n            } else {\n                let Index = i;\n                let Region = body.region || body.params.region || '-';\n                let DeveloperName = dataResult.data.key.developer_key.name || '-';\n                let AppName = dataResult.data.key.name || '-';\n                let Version = dataResult.data.key.version || '-';\n                let DeploymentType = dataResult.data.deployment || '-';\n                let Command = dataResult.data.command || '-';\n                let DeploymentMF = dataResult.data.deployment_manifest || '-';\n                let ImageType = dataResult.data.image_type || '-';\n                let ImagePath = dataResult.data.image_path || '-';\n                let DefaultFlavor = dataResult.data.default_flavor.name || '-';\n                let Ports = dataResult.data.access_ports || '-';\n                let AuthPublicKey = dataResult.data.auth_public_key || '-';\n                let ScaleWithCluster = dataResult.data.scale_with_cluster || false;\n                let DefaultFQDN = dataResult.data.official_fqdn || '-';\n                let PackageName = dataResult.data.android_package_name || '-'; \n                let Revision = dataResult.data.revision || '-'; \n                //let DeploymentGenerator = dataResult.deployment_generator || '-';\n\n\n\n                values.push({\n                    Region:Region,\n                    OrganizationName:DeveloperName,\n                    AppName:AppName,\n                    Version:Version,\n                    DeploymentType:DeploymentType,\n                    ImageType:ImageType,\n                    ImagePath:ImagePath,\n                    AuthPublicKey:AuthPublicKey,\n                    DefaultFlavor:DefaultFlavor,\n                    Ports:Ports,\n                    DefaultFQDN:DefaultFQDN,\n                    PackageName:PackageName,\n                    // IpAccess:IpAccess,\n                    //Cluster:Cluster,\n                    ScaleWithCluster:ScaleWithCluster,\n                    Command:Command,\n                    DeploymentMF:DeploymentMF,\n                    Revision:Revision,\n                    Edit:newRegistKey\n                })\n            }\n        })\n    } else {\n        console.log('there is no result')\n    }\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    //values.reverse();\n\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst formatComputeApp = (props,body) => (\n    generateData(props,body)\n)\n\nexport default formatComputeApp;\n"]},"metadata":{},"sourceType":"module"}