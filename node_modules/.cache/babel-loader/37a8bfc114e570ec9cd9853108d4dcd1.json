{"ast":null,"code":"// Depends on jsbn.js and rng.js\nvar BigInteger = require('./jsbn');\n\nvar SecureRandom = require('./rng'); // Version 1.1: support utf-8 encoding in pkcs1pad2\n// convert a (hex) string to a bignum object\n\n\nfunction parseBigInt(str, r) {\n  return new BigInteger(str, r);\n}\n\nfunction linebrk(s, n) {\n  var ret = \"\";\n  var i = 0;\n\n  while (i + n < s.length) {\n    ret += s.substring(i, i + n) + \"\\n\";\n    i += n;\n  }\n\n  return ret + s.substring(i, s.length);\n}\n\nfunction byte2Hex(b) {\n  if (b < 0x10) return \"0\" + b.toString(16);else return b.toString(16);\n} // PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\n\n\nfunction pkcs1pad2(s, n) {\n  if (n < s.length + 11) {\n    // TODO: fix for utf-8\n    console.log(\"Message too long for RSA\");\n    return null;\n  }\n\n  var ba = new Array();\n  var i = s.length - 1;\n\n  while (i >= 0 && n > 0) {\n    var c = s.charCodeAt(i--);\n\n    if (c < 128) {\n      // encode using utf-8\n      ba[--n] = c;\n    } else if (c > 127 && c < 2048) {\n      ba[--n] = c & 63 | 128;\n      ba[--n] = c >> 6 | 192;\n    } else {\n      ba[--n] = c & 63 | 128;\n      ba[--n] = c >> 6 & 63 | 128;\n      ba[--n] = c >> 12 | 224;\n    }\n  }\n\n  ba[--n] = 0;\n  var rng = new SecureRandom();\n  var x = new Array();\n\n  while (n > 2) {\n    // random non-zero pad\n    x[0] = 0;\n\n    while (x[0] == 0) {\n      rng.nextBytes(x);\n    }\n\n    ba[--n] = x[0];\n  }\n\n  ba[--n] = 2;\n  ba[--n] = 0;\n  return new BigInteger(ba);\n} // \"empty\" RSA key constructor\n\n\nfunction RSAKey() {\n  this.n = null; // modulus\n\n  this.e = 0; // public exponent\n\n  this.d = null; // private exponent\n\n  this.p = null; // prime 1\n\n  this.q = null; // prime 2\n\n  this.dmp1 = null; // exponent1\n\n  this.dmq1 = null; // exponent2\n\n  this.coeff = null; // coefficient\n} // return modulus and public exponent as string\n\n\nfunction RSAGetPublicString() {\n  var exportObj = {\n    n: this.n.toString(16),\n    e: this.e.toString(16)\n  };\n\n  if (exportObj.n.length % 2 == 1) {\n    exportObj.n = '0' + exportObj.n; // pad them with 0\n  }\n\n  return JSON.stringify(exportObj);\n}\n\nfunction RSAGetPrivateString() {\n  var privateKeys = ['n', 'e', 'd', 'p', 'q', 'dmp1', 'dmq1', 'coeff'];\n  var ret = {};\n  var that = this;\n  privateKeys.forEach(function (key) {\n    ret[key] = that[key] && that[key].toString(16);\n\n    if (key != 'e' && ret[key].length % 2 == 1) {\n      ret[key] = '0' + ret[key];\n    }\n  });\n  return JSON.stringify(ret);\n}\n\nfunction RSASetPrivateString(privateStr) {\n  var privateObj = JSON.parse(privateStr);\n  return this.setPrivateEx(privateObj);\n} // Set the public key fields N and e from hex strings\n\n\nfunction RSASetPublic(N, E) {\n  if (N != null && E != null && N.length > 0 && E.length > 0) {\n    this.n = parseBigInt(N, 16);\n    this.e = parseInt(E, 16);\n  } else console.log(\"Invalid RSA public key\");\n}\n\nfunction RSASetPublicString(publicStr) {\n  var publicObj = JSON.parse(publicStr);\n  return this.setPublic(publicObj.n, publicObj.e);\n} // Perform raw public operation on \"x\": return x^e (mod n)\n\n\nfunction RSADoPublic(x) {\n  return x.modPowInt(this.e, this.n);\n} // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\n\n\nfunction RSAEncrypt(text) {\n  var m = pkcs1pad2(text, this.n.bitLength() + 7 >> 3);\n  if (m == null) return null;\n  var c = this.doPublic(m);\n  if (c == null) return null;\n  var h = c.toString(16);\n  if ((h.length & 1) == 0) return h;else return \"0\" + h;\n} // Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\n//function RSAEncryptB64(text) {\n//  var h = this.encrypt(text);\n//  if(h) return hex2b64(h); else return null;\n//}\n// protected\n\n\nRSAKey.prototype.doPublic = RSADoPublic; // public\n\nRSAKey.prototype.setPublic = RSASetPublic;\nRSAKey.prototype.encrypt = RSAEncrypt; //RSAKey.prototype.encrypt_b64 = RSAEncryptB64;\n// Start rsa2.js\n// Depends on rsa.js and jsbn2.js\n// Version 1.1: support utf-8 decoding in pkcs1unpad2\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\n\nfunction pkcs1unpad2(d, n) {\n  var b = d.toByteArray();\n  var i = 0;\n\n  while (i < b.length && b[i] == 0) {\n    ++i;\n  }\n\n  if (b.length - i != n - 1 || b[i] != 2) return null;\n  ++i;\n\n  while (b[i] != 0) {\n    if (++i >= b.length) return null;\n  }\n\n  var ret = \"\";\n\n  while (++i < b.length) {\n    var c = b[i] & 255;\n\n    if (c < 128) {\n      // utf-8 decode\n      ret += String.fromCharCode(c);\n    } else if (c > 191 && c < 224) {\n      ret += String.fromCharCode((c & 31) << 6 | b[i + 1] & 63);\n      ++i;\n    } else {\n      ret += String.fromCharCode((c & 15) << 12 | (b[i + 1] & 63) << 6 | b[i + 2] & 63);\n      i += 2;\n    }\n  }\n\n  return ret;\n} // Set the private key fields N, e, and d from hex strings\n\n\nfunction RSASetPrivate(N, E, D) {\n  if (N != null && E != null && N.length > 0 && E.length > 0) {\n    this.n = parseBigInt(N, 16);\n    this.e = parseInt(E, 16);\n    this.d = parseBigInt(D, 16);\n  } else console.log(\"Invalid RSA private key\");\n} // Set the private key fields N, e, d and CRT params from hex strings\n\n\nfunction RSASetPrivateEx(N, E, D, P, Q, DP, DQ, C) {\n  var params = {};\n\n  if (typeof N == 'object') {\n    params = N;\n  } else {\n    params.n = N;\n    params.e = E;\n    params.d = D;\n    params.p = P;\n    params.q = Q;\n    params.dmp1 = DP;\n    params.dmq1 = DQ;\n    params.coeff = C;\n  }\n\n  if (params.n != null && params.e != null && params.n.length > 0 && params.e.length > 0) {\n    this.n = parseBigInt(params.n, 16);\n    this.e = parseInt(params.e, 16);\n    this.d = parseBigInt(params.d, 16);\n    this.p = parseBigInt(params.p, 16);\n    this.q = parseBigInt(params.q, 16);\n    this.dmp1 = parseBigInt(params.dmp1, 16);\n    this.dmq1 = parseBigInt(params.dmq1, 16);\n    this.coeff = parseBigInt(params.coeff, 16);\n  } else console.log(\"Invalid RSA private key\");\n} // Generate a new random private key B bits long, using public expt E\n\n\nfunction RSAGenerate(B, E) {\n  var rng = new SecureRandom();\n  var qs = B >> 1;\n  this.e = parseInt(E, 16);\n  var ee = new BigInteger(E, 16);\n\n  for (;;) {\n    for (;;) {\n      this.p = new BigInteger(B - qs, 1, rng);\n      if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) break;\n    }\n\n    for (;;) {\n      this.q = new BigInteger(qs, 1, rng);\n      if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) break;\n    }\n\n    if (this.p.compareTo(this.q) <= 0) {\n      var t = this.p;\n      this.p = this.q;\n      this.q = t;\n    }\n\n    var p1 = this.p.subtract(BigInteger.ONE);\n    var q1 = this.q.subtract(BigInteger.ONE);\n    var phi = p1.multiply(q1);\n\n    if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n      this.n = this.p.multiply(this.q);\n      this.d = ee.modInverse(phi);\n      this.dmp1 = this.d.mod(p1);\n      this.dmq1 = this.d.mod(q1);\n      this.coeff = this.q.modInverse(this.p);\n      break;\n    }\n  }\n} // Perform raw private operation on \"x\": return x^d (mod n)\n\n\nfunction RSADoPrivate(x) {\n  if (this.p == null || this.q == null) return x.modPow(this.d, this.n); // TODO: re-calculate any missing CRT params\n\n  var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n  var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n\n  while (xp.compareTo(xq) < 0) {\n    xp = xp.add(this.p);\n  }\n\n  return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n} // Return the PKCS#1 RSA decryption of \"ctext\".\n// \"ctext\" is an even-length hex string and the output is a plain string.\n\n\nfunction RSADecrypt(ctext) {\n  var c = parseBigInt(ctext, 16);\n  var m = this.doPrivate(c);\n  if (m == null) return null;\n  return pkcs1unpad2(m, this.n.bitLength() + 7 >> 3);\n} // Return the PKCS#1 RSA decryption of \"ctext\".\n// \"ctext\" is a Base64-encoded string and the output is a plain string.\n//function RSAB64Decrypt(ctext) {\n//  var h = b64tohex(ctext);\n//  if(h) return this.decrypt(h); else return null;\n//}\n// protected\n\n\nRSAKey.prototype.doPrivate = RSADoPrivate; // public\n//RSAKey.prototype.setPrivate = RSASetPrivate;\n\nRSAKey.prototype.setPrivateEx = RSASetPrivateEx;\nRSAKey.prototype.generate = RSAGenerate;\nRSAKey.prototype.decrypt = RSADecrypt;\nRSAKey.prototype.getPublicString = RSAGetPublicString;\nRSAKey.prototype.setPublicString = RSASetPublicString;\nRSAKey.prototype.getPrivateString = RSAGetPrivateString;\nRSAKey.prototype.setPrivateString = RSASetPrivateString;\nRSAKey.prototype.linebrk = linebrk; // line break\n//RSAKey.prototype.b64_decrypt = RSAB64Decrypt;\n\nmodule.exports = RSAKey;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/react-native-rsa/lib/rsa.js"],"names":["BigInteger","require","SecureRandom","parseBigInt","str","r","linebrk","s","n","ret","i","length","substring","byte2Hex","b","toString","pkcs1pad2","console","log","ba","Array","c","charCodeAt","rng","x","nextBytes","RSAKey","e","d","p","q","dmp1","dmq1","coeff","RSAGetPublicString","exportObj","JSON","stringify","RSAGetPrivateString","privateKeys","that","forEach","key","RSASetPrivateString","privateStr","privateObj","parse","setPrivateEx","RSASetPublic","N","E","parseInt","RSASetPublicString","publicStr","publicObj","setPublic","RSADoPublic","modPowInt","RSAEncrypt","text","m","bitLength","doPublic","h","prototype","encrypt","pkcs1unpad2","toByteArray","String","fromCharCode","RSASetPrivate","D","RSASetPrivateEx","P","Q","DP","DQ","C","params","RSAGenerate","B","qs","ee","subtract","ONE","gcd","compareTo","isProbablePrime","t","p1","q1","phi","multiply","modInverse","mod","RSADoPrivate","modPow","xp","xq","add","RSADecrypt","ctext","doPrivate","generate","decrypt","getPublicString","setPublicString","getPrivateString","setPrivateString","module","exports"],"mappings":"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","sourcesContent":["// Depends on jsbn.js and rng.js\nvar BigInteger = require('./jsbn');\nvar SecureRandom = require('./rng');\n// Version 1.1: support utf-8 encoding in pkcs1pad2\n\n// convert a (hex) string to a bignum object\nfunction parseBigInt(str,r) {\n  return new BigInteger(str,r);\n}\n\nfunction linebrk(s,n) {\n  var ret = \"\";\n  var i = 0;\n  while(i + n < s.length) {\n    ret += s.substring(i,i+n) + \"\\n\";\n    i += n;\n  }\n  return ret + s.substring(i,s.length);\n}\n\nfunction byte2Hex(b) {\n  if(b < 0x10)\n    return \"0\" + b.toString(16);\n  else\n    return b.toString(16);\n}\n\n// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\nfunction pkcs1pad2(s,n) {\n  if(n < s.length + 11) { // TODO: fix for utf-8\n    console.log(\"Message too long for RSA\");\n    return null;\n  }\n  var ba = new Array();\n  var i = s.length - 1;\n  while(i >= 0 && n > 0) {\n    var c = s.charCodeAt(i--);\n    if(c < 128) { // encode using utf-8\n      ba[--n] = c;\n    }\n    else if((c > 127) && (c < 2048)) {\n      ba[--n] = (c & 63) | 128;\n      ba[--n] = (c >> 6) | 192;\n    }\n    else {\n      ba[--n] = (c & 63) | 128;\n      ba[--n] = ((c >> 6) & 63) | 128;\n      ba[--n] = (c >> 12) | 224;\n    }\n  }\n  ba[--n] = 0;\n  var rng = new SecureRandom();\n  var x = new Array();\n  while(n > 2) { // random non-zero pad\n    x[0] = 0;\n    while(x[0] == 0) rng.nextBytes(x);\n    ba[--n] = x[0];\n  }\n  ba[--n] = 2;\n  ba[--n] = 0;\n  return new BigInteger(ba);\n}\n\n// \"empty\" RSA key constructor\nfunction RSAKey() {\n  this.n = null; // modulus\n  this.e = 0; // public exponent\n  this.d = null; // private exponent\n  this.p = null; // prime 1\n  this.q = null; // prime 2\n  this.dmp1 = null; // exponent1\n  this.dmq1 = null; // exponent2\n  this.coeff = null; // coefficient\n}\n\n// return modulus and public exponent as string\nfunction RSAGetPublicString() {\n  var exportObj = {n: this.n.toString(16), e: this.e.toString(16)};\n  if (exportObj.n.length % 2 == 1) {\n    exportObj.n = '0' + exportObj.n; // pad them with 0\n  }\n  return JSON.stringify(exportObj);\n}\n\nfunction RSAGetPrivateString() {\n  var privateKeys = ['n', 'e', 'd', 'p', 'q', 'dmp1', 'dmq1', 'coeff'];\n  var ret = {};\n  var that = this;\n  privateKeys.forEach(function(key) {\n    ret[key] = that[key] && that[key].toString(16);\n    if (key != 'e' && ret[key].length % 2 == 1) {\n      ret[key] = '0' + ret[key];\n    }\n  });\n\n  return JSON.stringify(ret);\n}\n\n\nfunction RSASetPrivateString(privateStr) {\n\tvar privateObj = JSON.parse(privateStr);\n\treturn this.setPrivateEx(privateObj);\n}\n\n// Set the public key fields N and e from hex strings\nfunction RSASetPublic(N,E) {\n  if(N != null && E != null && N.length > 0 && E.length > 0) {\n    this.n = parseBigInt(N,16);\n    this.e = parseInt(E,16);\n  }\n  else\n    console.log(\"Invalid RSA public key\");\n}\n\nfunction RSASetPublicString(publicStr) {\n\tvar publicObj = JSON.parse(publicStr);\n\treturn this.setPublic(publicObj.n, publicObj.e);\n}\n\n// Perform raw public operation on \"x\": return x^e (mod n)\nfunction RSADoPublic(x) {\n  return x.modPowInt(this.e, this.n);\n}\n\n// Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\nfunction RSAEncrypt(text) {\n  var m = pkcs1pad2(text,(this.n.bitLength()+7)>>3);\n  if(m == null) return null;\n  var c = this.doPublic(m);\n  if(c == null) return null;\n  var h = c.toString(16);\n  if((h.length & 1) == 0) return h; else return \"0\" + h;\n}\n\n// Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\n//function RSAEncryptB64(text) {\n//  var h = this.encrypt(text);\n//  if(h) return hex2b64(h); else return null;\n//}\n\n// protected\nRSAKey.prototype.doPublic = RSADoPublic;\n\n// public\nRSAKey.prototype.setPublic = RSASetPublic;\nRSAKey.prototype.encrypt = RSAEncrypt;\n//RSAKey.prototype.encrypt_b64 = RSAEncryptB64;\n\n// Start rsa2.js\n// Depends on rsa.js and jsbn2.js\n\n// Version 1.1: support utf-8 decoding in pkcs1unpad2\n\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\nfunction pkcs1unpad2(d,n) {\n  var b = d.toByteArray();\n  var i = 0;\n  while(i < b.length && b[i] == 0) ++i;\n  if(b.length-i != n-1 || b[i] != 2)\n    return null;\n  ++i;\n  while(b[i] != 0)\n    if(++i >= b.length) return null;\n  var ret = \"\";\n  while(++i < b.length) {\n    var c = b[i] & 255;\n    if(c < 128) { // utf-8 decode\n      ret += String.fromCharCode(c);\n    }\n    else if((c > 191) && (c < 224)) {\n      ret += String.fromCharCode(((c & 31) << 6) | (b[i+1] & 63));\n      ++i;\n    }\n    else {\n      ret += String.fromCharCode(((c & 15) << 12) | ((b[i+1] & 63) << 6) | (b[i+2] & 63));\n      i += 2;\n    }\n  }\n  return ret;\n}\n\n// Set the private key fields N, e, and d from hex strings\nfunction RSASetPrivate(N,E,D) {\n  if(N != null && E != null && N.length > 0 && E.length > 0) {\n    this.n = parseBigInt(N,16);\n    this.e = parseInt(E,16);\n    this.d = parseBigInt(D,16);\n  }\n  else\n    console.log(\"Invalid RSA private key\");\n}\n\n// Set the private key fields N, e, d and CRT params from hex strings\nfunction RSASetPrivateEx(N,E,D,P,Q,DP,DQ,C) {\n  var params = {};\n  if (typeof N == 'object') {\n    params = N;\n  } else {\n    params.n = N;\n    params.e = E;\n    params.d = D;\n    params.p = P;\n    params.q = Q;\n    params.dmp1 = DP;\n    params.dmq1 = DQ;\n    params.coeff = C;\n  }\n  if(params.n != null && params.e != null && params.n.length > 0 && params.e.length > 0) {\n    this.n = parseBigInt(params.n,16);\n    this.e = parseInt(params.e,16);\n    this.d = parseBigInt(params.d,16);\n    this.p = parseBigInt(params.p,16);\n    this.q = parseBigInt(params.q,16);\n    this.dmp1 = parseBigInt(params.dmp1,16);\n    this.dmq1 = parseBigInt(params.dmq1,16);\n    this.coeff = parseBigInt(params.coeff,16);\n  }\n  else\n    console.log(\"Invalid RSA private key\");\n}\n\n// Generate a new random private key B bits long, using public expt E\nfunction RSAGenerate(B,E) {\n  var rng = new SecureRandom();\n  var qs = B>>1;\n  this.e = parseInt(E,16);\n  var ee = new BigInteger(E,16);\n  for(;;) {\n    for(;;) {\n      this.p = new BigInteger(B-qs,1,rng);\n      if(this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) break;\n    }\n    for(;;) {\n      this.q = new BigInteger(qs,1,rng);\n      if(this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) break;\n    }\n    if(this.p.compareTo(this.q) <= 0) {\n      var t = this.p;\n      this.p = this.q;\n      this.q = t;\n    }\n    var p1 = this.p.subtract(BigInteger.ONE);\n    var q1 = this.q.subtract(BigInteger.ONE);\n    var phi = p1.multiply(q1);\n    if(phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n      this.n = this.p.multiply(this.q);\n      this.d = ee.modInverse(phi);\n      this.dmp1 = this.d.mod(p1);\n      this.dmq1 = this.d.mod(q1);\n      this.coeff = this.q.modInverse(this.p);\n      break;\n    }\n  }\n}\n\n// Perform raw private operation on \"x\": return x^d (mod n)\nfunction RSADoPrivate(x) {\n  if(this.p == null || this.q == null)\n    return x.modPow(this.d, this.n);\n\n  // TODO: re-calculate any missing CRT params\n  var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n  var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n\n  while(xp.compareTo(xq) < 0)\n    xp = xp.add(this.p);\n  return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n}\n\n// Return the PKCS#1 RSA decryption of \"ctext\".\n// \"ctext\" is an even-length hex string and the output is a plain string.\nfunction RSADecrypt(ctext) {\n  var c = parseBigInt(ctext, 16);\n  var m = this.doPrivate(c);\n  if(m == null) return null;\n  return pkcs1unpad2(m, (this.n.bitLength()+7)>>3);\n}\n\n// Return the PKCS#1 RSA decryption of \"ctext\".\n// \"ctext\" is a Base64-encoded string and the output is a plain string.\n//function RSAB64Decrypt(ctext) {\n//  var h = b64tohex(ctext);\n//  if(h) return this.decrypt(h); else return null;\n//}\n\n// protected\nRSAKey.prototype.doPrivate = RSADoPrivate;\n\n// public\n//RSAKey.prototype.setPrivate = RSASetPrivate;\nRSAKey.prototype.setPrivateEx = RSASetPrivateEx;\nRSAKey.prototype.generate = RSAGenerate;\nRSAKey.prototype.decrypt = RSADecrypt;\nRSAKey.prototype.getPublicString = RSAGetPublicString;\nRSAKey.prototype.setPublicString = RSASetPublicString;\nRSAKey.prototype.getPrivateString = RSAGetPrivateString;\nRSAKey.prototype.setPrivateString = RSASetPrivateString;\nRSAKey.prototype.linebrk = linebrk; // line break\n//RSAKey.prototype.b64_decrypt = RSAB64Decrypt;\n\nmodule.exports = RSAKey;\n"]},"metadata":{},"sourceType":"script"}