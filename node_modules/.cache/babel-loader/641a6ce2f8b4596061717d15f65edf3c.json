{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { asin, atan2, cos, sin, sqrt, tan } from \"./math\";\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [2.66723 * c0 * c1 * sin(lambda), 1.24104 * s * c1];\n}\n\nwagner7Raw.invert = function (x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [3 * atan2(x * tan(c), 2.66723 * p), p && asin(y * sin(c) / (1.24104 * 0.90631 * p))];\n};\n\nexport default function () {\n  return projection(wagner7Raw).scale(172.632);\n}","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/react-simple-maps/node_modules/d3-geo-projection/src/wagner7.js"],"names":["geoProjection","projection","asin","atan2","cos","sin","sqrt","tan","wagner7Raw","lambda","phi","s","c0","c1","invert","x","y","t1","t2","p","c","scale"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,IAAR,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,GAArC,QAA+C,QAA/C;AAEA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,GAA5B,EAAiC;AACtC,MAAIC,CAAC,GAAG,UAAUN,GAAG,CAACK,GAAD,CAArB;AAAA,MACIE,EAAE,GAAGN,IAAI,CAAC,IAAIK,CAAC,GAAGA,CAAT,CADb;AAAA,MAEIE,EAAE,GAAGP,IAAI,CAAC,KAAK,IAAIM,EAAE,GAAGR,GAAG,CAACK,MAAM,IAAI,CAAX,CAAjB,CAAD,CAFb;AAGA,SAAO,CACL,UAAUG,EAAV,GAAeC,EAAf,GAAoBR,GAAG,CAACI,MAAD,CADlB,EAEL,UAAUE,CAAV,GAAcE,EAFT,CAAP;AAID;;AAEDL,UAAU,CAACM,MAAX,GAAoB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACjC,MAAIC,EAAE,GAAGF,CAAC,GAAG,OAAb;AAAA,MACIG,EAAE,GAAGF,CAAC,GAAG,OADb;AAAA,MAEIG,CAAC,GAAGb,IAAI,CAACW,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAhB,CAFZ;AAAA,MAGIE,CAAC,GAAG,IAAIlB,IAAI,CAACiB,CAAC,GAAG,CAAL,CAHhB;AAIA,SAAO,CACL,IAAIhB,KAAK,CAACY,CAAC,GAAGR,GAAG,CAACa,CAAD,CAAR,EAAa,UAAUD,CAAvB,CADJ,EAELA,CAAC,IAAIjB,IAAI,CAACc,CAAC,GAAGX,GAAG,CAACe,CAAD,CAAP,IAAc,UAAU,OAAV,GAAoBD,CAAlC,CAAD,CAFJ,CAAP;AAID,CATD;;AAWA,eAAe,YAAW;AACxB,SAAOlB,UAAU,CAACO,UAAD,CAAV,CACFa,KADE,CACI,OADJ,CAAP;AAED","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\n\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [\n    2.66723 * c0 * c1 * sin(lambda),\n    1.24104 * s * c1\n  ];\n}\n\nwagner7Raw.invert = function(x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [\n    3 * atan2(x * tan(c), 2.66723 * p),\n    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))\n  ];\n};\n\nexport default function() {\n  return projection(wagner7Raw)\n      .scale(172.632);\n}\n"]},"metadata":{},"sourceType":"module"}