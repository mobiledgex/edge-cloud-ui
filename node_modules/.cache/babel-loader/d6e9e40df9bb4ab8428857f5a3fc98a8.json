{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/deleteItem.js\";\nimport React from 'react';\nimport { Button, Divider, Modal, Grid, Input, TextArea, Dropdown } from \"semantic-ui-react\";\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { withRouter } from 'react-router-dom';\nimport * as service from \"../services/service_compute_service\";\nimport * as aggregate from \"../utils\";\nimport Alert from \"react-s-alert\";\nvar _self = null;\n\nvar DeleteItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DeleteItem, _React$Component);\n\n  function DeleteItem() {\n    var _this;\n\n    _classCallCheck(this, DeleteItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeleteItem).call(this));\n\n    _this.receiveSubmitResult = function (result, body) {\n      if (result.data.error) {\n        _this.props.handleAlertInfo('error', result.data.error);\n      } else {\n        console.log('20191119 receive submit result is success..', result, \":\", result.data);\n\n        _this.props.handleAlertInfo('success', result.data.message);\n      }\n\n      if (_this.props.siteId !== 'appinst' || body.params.appinst.key.cluster_inst_key.cluster_key.name.indexOf('autocluster') > -1) {\n        setTimeout(function () {\n          _self.props.refresh(_this.props.changeRegion);\n        }, 3000);\n      }\n    };\n\n    _this.receiveResult = function (result, body) {\n      console.log('20191119 .. ceceiveSubmit...', result, \":\", body);\n\n      if (result.data && result.data.message && result.data.message.indexOf('failures') <= -1 && !result.clId) {\n        //this.receiveSubmitResult(result)\n\n        /** have to show progress for deleting, so that block this.**/\n        if (_this.props.siteId == 'ClusterInst') {\n          _this.props.handleAlertInfo('success', 'Your cluster ' + body.params.clusterinst.key.cluster_key.name + ' deleted successfully');\n        } else if (_this.props.siteId == 'appinst') {\n          _this.props.handleAlertInfo('success', 'Application Instance ' + body.params.appinst.key.app_key.name + ' successfully deleted');\n        } else if (_this.props.siteId == 'Cloudlet') {\n          _this.props.handleAlertInfo('success', 'Cloudlet ' + body.params.cloudlet.key.name + ' successfully deleted');\n        }\n\n        console.log(\"20191119 appinstdelete\", _this.props.siteId, \":::\", body); //if(this.props.siteId !== 'appinst' || body.params.appinst.key.cluster_inst_key.cluster_key.name.indexOf('autocluster') > -1){\n\n        setTimeout(function () {\n          _self.props.refresh(_this.props.changeRegion);\n        }, 3000); //}\n\n        return;\n      } else {\n        console.log(\"20191119 appinstdelete\", result.clId, \":::\", body);\n\n        _this.props.handleAlertInfo('success', result.data.message);\n\n        setTimeout(function () {\n          _self.props.refresh(_this.props.changeRegion);\n        }, 3000); //}\n\n        return;\n      }\n\n      if (result.data.message.indexOf('failures') > -1) {\n        _this.props.handleAlertInfo('error', result.data.message);\n      }\n\n      if (result.data.error) {\n        _this.props.handleAlertInfo('error', result.data.error);\n      }\n    };\n\n    _this.receiveListSubmit = function (result, body) {\n      var msg = '';\n      if (_this.props.siteId == 'Cloudlet') msg = 'Cloudlet ' + body.params.cloudlet.key.name;else if (_this.props.siteId == 'Flavors') msg = 'Flavor ' + body.params.flavor.key.name;else if (_this.props.siteId == 'App') msg = 'Your application ' + body.params.app.key.name;\n\n      _this.props.handleLoadingSpinner(false);\n\n      _this.props.refresh(_this.props.changeRegion);\n\n      if (result.data.error) {\n        if (result.data.error.indexOf('Flavor in use by Cluster') > -1) {\n          _this.props.handleAlertInfo('error', 'Error deleting ' + body.params.flavor.key.name + '. Flavor is in use by a Cluster Instance.');\n        } else {\n          _this.props.handleAlertInfo('error', result.data.error);\n        }\n      } else if (result.data.message) {\n        _this.props.handleAlertInfo('success', msg + ' deleted successfully.');\n      }\n    };\n\n    _this.receiveUserSubmit = function (result, body) {\n      var msg = '';\n\n      if (_this.props.siteId === 'Organization') {\n        msg = 'Your organization ' + body.params.name + ' deleted successfully';\n      } else if (_this.props.siteId === 'User') {\n        msg = 'User ' + body.params.username + ' removed from organization ' + body.params.org;\n      } else if (_this.props.siteId === 'Account') {\n        msg = 'User ' + _self.state.deleteName + ' removed from console ';\n      }\n\n      _this.props.handleLoadingSpinner(false);\n\n      if (result.data.message) {\n        _this.props.handleAlertInfo('success', msg);\n      } else if (result.data.error) {\n        _this.props.handleAlertInfo('error', result.data.error);\n      }\n\n      if (_this.props.siteId === 'Organization' && body.params.name == localStorage.selectOrg) {\n        localStorage.setItem('selectRole', '');\n        localStorage.setItem('selectOrg', '');\n\n        _this.props.handleSelectOrg('-');\n\n        _this.props.handleUserRole('');\n      }\n\n      _self.props.refresh('All');\n    };\n\n    _this.state = {\n      dummyData: [],\n      selected: {},\n      open: false,\n      dimmer: '',\n      devOptionsOne: [],\n      devOptionsTwo: [],\n      dropdownValueOne: '',\n      dropdownValueTwo: '',\n      showWarning: false,\n      closeOnEscape: true,\n      closeOnDimmerClick: true,\n      deleteName: '',\n      deleteOrg: ''\n    };\n    _self = _assertThisInitialized(_this);\n    return _this;\n  }\n  /***************************\n   * delete selected item\n   * @param result\n   ***************************/\n\n\n  _createClass(DeleteItem, [{\n    key: \"closeDeleteModal\",\n    value: function closeDeleteModal(confirm) {\n      _self.setState({\n        showWarning: false\n      });\n\n      _self.props.close();\n\n      if (confirm === 'yes') {\n        _self.onHandleDelete();\n      }\n    }\n  }, {\n    key: \"onHandleDelete\",\n    value: function onHandleDelete() {\n      var _this2 = this;\n\n      var select = this.props.selected;\n      var region = this.props.region;\n      var serviceBody = {};\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n      this.props.handleLoadingSpinner(true);\n      var serviceNm = '';\n\n      if (this.props.siteId === 'ClusterInst') {\n        var _this$props$selected = this.props.selected,\n            Cloudlet = _this$props$selected.Cloudlet,\n            Flavor = _this$props$selected.Flavor,\n            ClusterName = _this$props$selected.ClusterName,\n            OrganizationName = _this$props$selected.OrganizationName,\n            Operator = _this$props$selected.Operator,\n            Region = _this$props$selected.Region;\n        serviceNm = 'DeleteClusterInst';\n        serviceBody = {\n          \"token\": store ? store.userToken : 'null',\n          \"params\": {\n            \"region\": Region,\n            \"clusterinst\": {\n              \"key\": {\n                \"cluster_key\": {\n                  \"name\": ClusterName\n                },\n                \"cloudlet_key\": {\n                  \"operator_key\": {\n                    \"name\": Operator\n                  },\n                  \"name\": Cloudlet\n                },\n                \"developer\": OrganizationName\n              },\n              \"flavor\": {\n                \"name\": Flavor\n              }\n            }\n          },\n          \"instanceId\": ClusterName + '-' + OrganizationName + '-' + Operator\n        };\n        service.deleteCompute(serviceNm, serviceBody, this.receiveResult);\n        setTimeout(function () {\n          _this2.props.handleDeleteReset(true);\n\n          _this2.props.refresh(_this2.props.changeRegion);\n\n          _this2.props.handleLoadingSpinner(false);\n        }, 2000);\n      } else if (this.props.siteId === 'appinst') {\n        var _this$props$selected2 = this.props.selected,\n            _OrganizationName = _this$props$selected2.OrganizationName,\n            AppName = _this$props$selected2.AppName,\n            Version = _this$props$selected2.Version,\n            _Operator = _this$props$selected2.Operator,\n            _Cloudlet = _this$props$selected2.Cloudlet,\n            ClusterInst = _this$props$selected2.ClusterInst,\n            _Region = _this$props$selected2.Region;\n        serviceNm = 'DeleteAppInst';\n        var clId = '';\n\n        if (ClusterInst.indexOf('autocluster') > -1) {\n          clId = 'autocluster';\n        }\n\n        clId = clId + AppName + '-' + _OrganizationName + '-' + _Operator;\n        serviceBody = {\n          \"token\": store ? store.userToken : 'null',\n          \"params\": {\n            \"region\": _Region,\n            \"appinst\": {\n              \"key\": {\n                \"app_key\": {\n                  \"developer_key\": {\n                    \"name\": _OrganizationName\n                  },\n                  \"name\": AppName,\n                  \"version\": Version\n                },\n                \"cluster_inst_key\": {\n                  \"cloudlet_key\": {\n                    \"name\": _Cloudlet,\n                    \"operator_key\": {\n                      \"name\": _Operator\n                    }\n                  },\n                  \"cluster_key\": {\n                    \"name\": ClusterInst\n                  },\n                  \"developer\": _OrganizationName\n                }\n              }\n            }\n          },\n          \"instanceId\": clId.toLowerCase()\n        }; //autoclusterbicapp   bictest1129-2\n\n        service.deleteCompute(serviceNm, serviceBody, this.receiveResult);\n        setTimeout(function () {\n          _this2.props.handleDeleteReset(true);\n\n          _this2.props.refresh(_this2.props.changeRegion);\n\n          _this2.props.handleLoadingSpinner(false);\n        }, 1000);\n      } else if (this.props.siteId === 'User') {\n        var userArr = [];\n        Object.values(this.props.selected).map(function (item, i) {\n          userArr.push(item);\n        });\n        serviceNm = 'removeuser';\n        serviceBody = {\n          \"token\": store ? store.userToken : 'null',\n          \"params\": {\n            \"org\": userArr[1],\n            \"username\": userArr[0],\n            \"role\": userArr[2]\n          }\n        };\n        service.deleteUser(serviceNm, serviceBody, this.receiveUserSubmit);\n      } else if (this.props.siteId === 'Account') {\n        var _userArr = [];\n        Object.values(this.props.selected).map(function (item, i) {\n          _userArr.push(item);\n        });\n        serviceNm = 'delete';\n        serviceBody = {\n          \"token\": store ? store.userToken : 'null',\n          \"params\": {\n            \"name\": _userArr[0]\n          }\n        };\n        service.deleteAccount(serviceNm, serviceBody, this.receiveUserSubmit);\n      } else if (this.props.siteId === 'Organization') {\n        var _this$props$selected3 = this.props.selected,\n            Organization = _this$props$selected3.Organization,\n            Type = _this$props$selected3.Type,\n            Address = _this$props$selected3.Address,\n            Phone = _this$props$selected3.Phone;\n        serviceNm = 'delete';\n        serviceBody = {\n          \"token\": store.userToken,\n          \"params\": {\n            \"name\": Organization,\n            \"type\": Type,\n            \"address\": Address,\n            \"phone\": Phone\n          }\n        };\n        service.deleteOrg(serviceNm, serviceBody, this.receiveUserSubmit);\n      } else if (this.props.siteId === 'Flavors') {\n        var _this$props$selected4 = this.props.selected,\n            FlavorName = _this$props$selected4.FlavorName,\n            _Region2 = _this$props$selected4.Region;\n        serviceNm = 'DeleteFlavor';\n        serviceBody = {\n          \"token\": store.userToken,\n          \"params\": {\n            \"region\": _Region2,\n            \"flavor\": {\n              \"key\": {\n                \"name\": FlavorName\n              }\n            }\n          }\n        };\n        service.deleteCompute(serviceNm, serviceBody, this.receiveListSubmit);\n      } else if (this.props.siteId === 'Cloudlet') {\n        var _this$props$selected5 = this.props.selected,\n            CloudletName = _this$props$selected5.CloudletName,\n            _Operator2 = _this$props$selected5.Operator,\n            _Region3 = _this$props$selected5.Region;\n        serviceNm = 'DeleteCloudlet';\n        serviceBody = {\n          \"token\": store.userToken,\n          \"params\": {\n            \"region\": _Region3,\n            \"cloudlet\": {\n              \"key\": {\n                \"operator_key\": {\n                  \"name\": _Operator2\n                },\n                \"name\": CloudletName\n              }\n            }\n          },\n          \"instanceId\": _Operator2 + CloudletName\n        };\n        service.deleteCompute(serviceNm, serviceBody, this.receiveResult);\n        setTimeout(function () {\n          _this2.props.handleDeleteReset(true);\n\n          _this2.props.refresh(_this2.props.changeRegion);\n\n          _this2.props.handleLoadingSpinner(false);\n        }, 2000);\n      } else if (this.props.siteId === 'App') {\n        var _this$props$selected6 = this.props.selected,\n            _OrganizationName2 = _this$props$selected6.OrganizationName,\n            _AppName = _this$props$selected6.AppName,\n            _Version = _this$props$selected6.Version,\n            _Region4 = _this$props$selected6.Region,\n            ImagePath = _this$props$selected6.ImagePath,\n            ImageType = _this$props$selected6.ImageType,\n            Ports = _this$props$selected6.Ports,\n            DefaultFlavor = _this$props$selected6.DefaultFlavor,\n            DeploymentType = _this$props$selected6.DeploymentType;\n        serviceNm = 'DeleteApp';\n        serviceBody = {\n          \"token\": store.userToken,\n          \"params\": {\n            \"region\": _Region4,\n            \"app\": {\n              \"key\": {\n                \"developer_key\": {\n                  \"name\": _OrganizationName2\n                },\n                \"name\": _AppName,\n                \"version\": _Version\n              } // \"image_path\":ImagePath,\n              // \"image_type\":Number(ImageType),\n              // \"access_ports\":Ports,\n              // \"default_flavor\":{\"name\":DefaultFlavor},\n              // \"deploymentType\":DeploymentType\n\n            }\n          }\n        };\n        service.deleteCompute(serviceNm, serviceBody, this.receiveListSubmit);\n      }\n    }\n    /** ************************ **/\n\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      if (nextProps.open) {\n        var name = '';\n        this.setState({\n          showWarning: nextProps.open\n        });\n        if (nextProps.siteId == 'Organization') name = nextProps.selected.Organization;else if (nextProps.siteId == 'User') name = nextProps.selected.Username;else if (nextProps.siteId == 'Account') name = nextProps.selected.Username;else if (nextProps.siteId == 'Cloudlet') name = nextProps.selected.CloudletName;else if (nextProps.siteId == 'Flavors') name = nextProps.selected.FlavorName;else if (nextProps.siteId == 'ClusterInst') name = nextProps.selected.ClusterName;else if (nextProps.siteId == 'App') name = nextProps.selected.AppName;else if (nextProps.siteId == 'appinst') name = nextProps.selected.AppName;\n        this.setState({\n          deleteName: name\n        });\n        var orgName = '';\n        if (nextProps.siteId == 'User') orgName = nextProps.selected.Organization;\n        this.setState({\n          deleteOrg: orgName\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          showWarning = _this$state.showWarning,\n          closeOnEscape = _this$state.closeOnEscape,\n          closeOnDimmerClick = _this$state.closeOnDimmerClick;\n      return React.createElement(Modal, {\n        open: showWarning,\n        closeOnEscape: closeOnEscape,\n        closeOnDimmerClick: closeOnDimmerClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, this.props.siteId == 'User' ? \"Delete \".concat(this.props.siteId, \" from Organization\") : \"Delete \".concat(this.props.siteId)), React.createElement(Modal.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, this.props.siteId == 'User' ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, 'Are you sure you want to delete ', React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, this.state.deleteName), ' from ', React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, this.state.deleteOrg), '?') : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, 'Are you sure you want to delete ', React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, this.state.deleteName), '?')), React.createElement(Modal.Actions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick() {\n          return _this3.closeDeleteModal('no');\n        },\n        negative: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, \"No\"), React.createElement(Button, {\n        onClick: function onClick() {\n          return _this3.closeDeleteModal('yes');\n        },\n        positive: true,\n        labelPosition: \"right\",\n        icon: \"checkmark\",\n        content: \"Yes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DeleteItem;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    selectOrg: state.selectOrg.org ? state.selectOrg.org : null,\n    changeRegion: state.changeRegion.region ? state.changeRegion.region : null\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleLoadingSpinner: function handleLoadingSpinner(data) {\n      dispatch(actions.loadingSpinner(data));\n    },\n    handleSelectOrg: function handleSelectOrg(data) {\n      dispatch(actions.selectOrganiz(data));\n    },\n    handleUserRole: function handleUserRole(data) {\n      dispatch(actions.showUserRole(data));\n    },\n    handleAlertInfo: function handleAlertInfo(mode, msg) {\n      dispatch(actions.alertInfo(mode, msg));\n    },\n    handleDeleteReset: function handleDeleteReset(data) {\n      dispatch(actions.deleteReset(data));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(DeleteItem));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/deleteItem.js"],"names":["React","Button","Divider","Modal","Grid","Input","TextArea","Dropdown","connect","actions","withRouter","service","aggregate","Alert","_self","DeleteItem","receiveSubmitResult","result","body","data","error","props","handleAlertInfo","console","log","message","siteId","params","appinst","key","cluster_inst_key","cluster_key","name","indexOf","setTimeout","refresh","changeRegion","receiveResult","clId","clusterinst","app_key","cloudlet","receiveListSubmit","msg","flavor","app","handleLoadingSpinner","receiveUserSubmit","username","org","state","deleteName","localStorage","selectOrg","setItem","handleSelectOrg","handleUserRole","dummyData","selected","open","dimmer","devOptionsOne","devOptionsTwo","dropdownValueOne","dropdownValueTwo","showWarning","closeOnEscape","closeOnDimmerClick","deleteOrg","confirm","setState","close","onHandleDelete","select","region","serviceBody","store","PROJECT_INIT","JSON","parse","serviceNm","Cloudlet","Flavor","ClusterName","OrganizationName","Operator","Region","userToken","deleteCompute","handleDeleteReset","AppName","Version","ClusterInst","toLowerCase","userArr","Object","values","map","item","i","push","deleteUser","deleteAccount","Organization","Type","Address","Phone","FlavorName","CloudletName","ImagePath","ImageType","Ports","DefaultFlavor","DeploymentType","nextProps","nextContext","Username","orgName","closeDeleteModal","Component","mapStateToProps","mapDispatchProps","dispatch","loadingSpinner","selectOrganiz","showUserRole","mode","alertInfo","deleteReset"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, Divider, Modal, Grid, Input, TextArea, Dropdown} from \"semantic-ui-react\";\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { withRouter } from 'react-router-dom';\nimport * as service from \"../services/service_compute_service\";\nimport * as aggregate from \"../utils\";\nimport Alert from \"react-s-alert\";\n\nlet _self = null;\nclass DeleteItem extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            dummyData:[],\n            selected:{},\n            open:false,\n            dimmer:'',\n            devOptionsOne:[],\n            devOptionsTwo:[],\n            dropdownValueOne:'',\n            dropdownValueTwo:'',\n            showWarning:false,\n            closeOnEscape:true,\n            closeOnDimmerClick:true,\n            deleteName:'',\n            deleteOrg:''\n\n        }\n        _self = this;\n    }\n\n    /***************************\n     * delete selected item\n     * @param result\n     ***************************/\n    receiveSubmitResult = (result, body) => {\n        if (result.data.error) {\n            this.props.handleAlertInfo('error', result.data.error)\n        } else {\n            console.log('20191119 receive submit result is success..', result,\":\", result.data)\n            this.props.handleAlertInfo('success',result.data.message)\n        }\n        if(this.props.siteId !== 'appinst' || body.params.appinst.key.cluster_inst_key.cluster_key.name.indexOf('autocluster') > -1){\n            setTimeout(() => {\n                _self.props.refresh(this.props.changeRegion);\n            }, 3000);\n        }\n    }\n    // 서버로 부터 결과를 1번 밖에 못받는 문제가 발생함.\n    receiveResult = (result, body) => {\n        console.log('20191119 .. ceceiveSubmit...', result, \":\", body)\n        if(result.data && result.data.message && result.data.message.indexOf('failures') <= -1 && !result.clId) {\n            //this.receiveSubmitResult(result)\n\n            /** have to show progress for deleting, so that block this.**/\n            if(this.props.siteId == 'ClusterInst') {\n                this.props.handleAlertInfo('success','Your cluster '+body.params.clusterinst.key.cluster_key.name+' deleted successfully')\n            } else if(this.props.siteId == 'appinst') {\n                this.props.handleAlertInfo('success','Application Instance '+body.params.appinst.key.app_key.name+' successfully deleted')\n            } else if(this.props.siteId == 'Cloudlet') {\n                this.props.handleAlertInfo('success','Cloudlet '+body.params.cloudlet.key.name+' successfully deleted')\n            }\n            console.log(\"20191119 appinstdelete\",this.props.siteId,\":::\",body)\n            //if(this.props.siteId !== 'appinst' || body.params.appinst.key.cluster_inst_key.cluster_key.name.indexOf('autocluster') > -1){\n            setTimeout(() => {\n                _self.props.refresh(this.props.changeRegion);\n            }, 3000);\n            //}\n            return;\n        } else {\n\n            console.log(\"20191119 appinstdelete\",result.clId,\":::\",body)\n            this.props.handleAlertInfo('success',result.data.message)\n            setTimeout(() => {\n                _self.props.refresh(this.props.changeRegion);\n            }, 3000);\n            //}\n            return;\n        }\n\n\n        if(result.data.message.indexOf('failures') > -1) {\n            this.props.handleAlertInfo('error',result.data.message)\n        }\n        if(result.data.error) {\n            this.props.handleAlertInfo('error',result.data.error)\n        }\n\n\n        \n    }\n\n    receiveListSubmit = (result, body) => {\n        let msg = '';\n        if(this.props.siteId == 'Cloudlet') msg = 'Cloudlet '+body.params.cloudlet.key.name\n        else if(this.props.siteId == 'Flavors') msg = 'Flavor '+body.params.flavor.key.name\n        else if(this.props.siteId == 'App') msg = 'Your application '+body.params.app.key.name\n        \n        this.props.handleLoadingSpinner(false);\n        this.props.refresh(this.props.changeRegion)\n        \n        if(result.data.error) {\n            if(result.data.error.indexOf('Flavor in use by Cluster') > -1) {\n                this.props.handleAlertInfo('error','Error deleting '+body.params.flavor.key.name+'. Flavor is in use by a Cluster Instance.')\n            } else {\n                this.props.handleAlertInfo('error',result.data.error)\n            }\n            \n        } else if(result.data.message) {\n            this.props.handleAlertInfo('success',msg+' deleted successfully.')\n        }\n    }\n\n    receiveUserSubmit = (result,body) => {\n\n        let msg = '';\n        if(this.props.siteId === 'Organization') {\n            msg = 'Your organization '+body.params.name+' deleted successfully'\n        } else if(this.props.siteId === 'User') {\n            msg = 'User '+body.params.username+' removed from organization '+body.params.org\n        } else if(this.props.siteId === 'Account') {\n            msg = 'User '+_self.state.deleteName+' removed from console '\n        }\n\n        this.props.handleLoadingSpinner(false);\n        if(result.data.message) {\n            this.props.handleAlertInfo('success',msg)\n        } else if(result.data.error) {\n            this.props.handleAlertInfo('error',result.data.error)\n        }\n        if(this.props.siteId === 'Organization' && body.params.name == localStorage.selectOrg) {\n            localStorage.setItem('selectRole', '')\n            localStorage.setItem('selectOrg', '')\n            this.props.handleSelectOrg('-')\n            this.props.handleUserRole('')\n        }\n        _self.props.refresh('All');\n    }\n\n    closeDeleteModal(confirm) {\n        _self.setState({ showWarning: false })\n        _self.props.close()\n        if(confirm === 'yes') {\n            _self.onHandleDelete()\n        }\n    }\n    onHandleDelete() {\n        let select = this.props.selected;\n        let region = this.props.region;\n        let serviceBody = {}\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        this.props.handleLoadingSpinner(true);\n        let serviceNm = '';\n        if(this.props.siteId === 'ClusterInst'){\n            const {Cloudlet, Flavor, ClusterName, OrganizationName, Operator, Region} = this.props.selected\n            serviceNm = 'DeleteClusterInst';\n            serviceBody = {\n                \"token\":store ? store.userToken : 'null',\n                \"params\": {\n                    \"region\":Region,\n                    \"clusterinst\":{\n                        \"key\":{\n                            \"cluster_key\":{\"name\":ClusterName},\n                            \"cloudlet_key\":{\"operator_key\":{\"name\":Operator},\"name\":Cloudlet},\n                            \"developer\":OrganizationName\n                        },\n                        \"flavor\":{\"name\":Flavor}\n                    }\n                },\n                \"instanceId\":ClusterName+'-'+OrganizationName+'-'+Operator\n            }\n            service.deleteCompute(serviceNm, serviceBody, this.receiveResult)\n            setTimeout(() => {\n                this.props.handleDeleteReset(true);\n                this.props.refresh(this.props.changeRegion);\n                this.props.handleLoadingSpinner(false);\n            }, 2000)\n            \n        } else if(this.props.siteId === 'appinst') {\n            const {OrganizationName, AppName, Version, Operator, Cloudlet, ClusterInst, Region} = this.props.selected\n            serviceNm = 'DeleteAppInst';\n            let clId = '';\n            if(ClusterInst.indexOf('autocluster') > -1) {\n                clId = 'autocluster';\n            }\n            clId = clId+AppName+'-'+OrganizationName+'-'+Operator\n            serviceBody = {\n                \"token\":store ? store.userToken : 'null',\n                \"params\": {\n                    \"region\":Region,\n                    \"appinst\":{\n                        \"key\":{\n                            \"app_key\":{\"developer_key\":{\"name\":OrganizationName},\"name\":AppName,\"version\":Version},\n                            \"cluster_inst_key\":{\n                                \"cloudlet_key\":{\"name\":Cloudlet,\"operator_key\":{\"name\":Operator}},\n                                \"cluster_key\":{\"name\":ClusterInst},\n                                \"developer\":OrganizationName\n                            }\n                        },\n                        \n                    }\n                },\n                \"instanceId\":clId.toLowerCase()\n            }\n            //autoclusterbicapp   bictest1129-2\n            service.deleteCompute(serviceNm, serviceBody, this.receiveResult)\n            setTimeout(() => {\n                this.props.handleDeleteReset(true);\n                this.props.refresh(this.props.changeRegion);\n                this.props.handleLoadingSpinner(false);\n            }, 1000)\n        } else if(this.props.siteId === 'User') {\n            let userArr = [];\n            Object.values(this.props.selected).map((item,i) => {\n                userArr.push(item);\n            })\n            serviceNm = 'removeuser'\n            serviceBody = {\n                \"token\":store ? store.userToken : 'null',\n                \"params\": {\n                    \"org\":userArr[1],\n                    \"username\":userArr[0],\n                    \"role\":userArr[2]\n                }\n            }\n            service.deleteUser(serviceNm, serviceBody, this.receiveUserSubmit)\n        } else if(this.props.siteId === 'Account') {\n            let userArr = [];\n            Object.values(this.props.selected).map((item,i) => {\n                userArr.push(item);\n            })\n            serviceNm = 'delete'\n            serviceBody = {\n                \"token\":store ? store.userToken : 'null',\n                \"params\": {\n                    \"name\":userArr[0]\n                }\n            }\n            service.deleteAccount(serviceNm, serviceBody, this.receiveUserSubmit)\n        } else if(this.props.siteId === 'Organization') {\n            const {Organization, Type, Address, Phone} = this.props.selected\n            serviceNm = 'delete'\n            serviceBody = {\n                \"token\":store.userToken,\n                \"params\": {\n                    \"name\":Organization,\n                    \"type\":Type,\n                    \"address\":Address,\n                    \"phone\":Phone\n                }\n            }\n            service.deleteOrg(serviceNm, serviceBody, this.receiveUserSubmit)\n        } else if(this.props.siteId === 'Flavors') {\n            const {FlavorName, Region} = this.props.selected\n            serviceNm = 'DeleteFlavor'\n            serviceBody = {\n                \"token\":store.userToken,\n                \"params\": {\n                    \"region\":Region,\n                    \"flavor\":{\n                        \"key\":{\"name\":FlavorName}\n                    }\n                }\n            }\n            service.deleteCompute(serviceNm, serviceBody, this.receiveListSubmit)\n        } else if(this.props.siteId === 'Cloudlet') {\n            const {CloudletName, Operator, Region} = this.props.selected\n            serviceNm = 'DeleteCloudlet'\n            serviceBody = {\n                \"token\":store.userToken,\n                \"params\": {\n                    \"region\":Region,\n                    \"cloudlet\":{\n                        \"key\":{\n                            \"operator_key\":{\"name\":Operator},\n                            \"name\":CloudletName\n                        }\n                    }\n                },\n                \"instanceId\":Operator+CloudletName\n            }\n            service.deleteCompute(serviceNm, serviceBody, this.receiveResult)\n            setTimeout(() => {\n                this.props.handleDeleteReset(true);\n                this.props.refresh(this.props.changeRegion);\n                this.props.handleLoadingSpinner(false);\n            }, 2000)\n        } else if(this.props.siteId === 'App') {\n            const {OrganizationName, AppName, Version, Region, ImagePath, ImageType, Ports, DefaultFlavor, DeploymentType} = this.props.selected\n            serviceNm = 'DeleteApp'\n            serviceBody = {\n                \"token\":store.userToken,\n                \"params\": {\n                    \"region\":Region,\n                    \"app\":{\n                        \"key\":{\n                            \"developer_key\":{\"name\":OrganizationName},\n                            \"name\":AppName,\n                            \"version\":Version\n                        }\n                        // \"image_path\":ImagePath,\n                        // \"image_type\":Number(ImageType),\n                        // \"access_ports\":Ports,\n                        // \"default_flavor\":{\"name\":DefaultFlavor},\n                        // \"deploymentType\":DeploymentType\n                    }\n                }\n            }\n            service.deleteCompute(serviceNm, serviceBody, this.receiveListSubmit)\n        }\n        \n    }\n\n    /** ************************ **/\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.open){\n            let name = '';\n            this.setState({showWarning:nextProps.open})\n            if(nextProps.siteId == 'Organization') name = nextProps.selected.Organization\n            else if(nextProps.siteId == 'User') name = nextProps.selected.Username\n            else if(nextProps.siteId == 'Account') name = nextProps.selected.Username\n            else if(nextProps.siteId == 'Cloudlet') name = nextProps.selected.CloudletName\n            else if(nextProps.siteId == 'Flavors') name = nextProps.selected.FlavorName\n            else if(nextProps.siteId == 'ClusterInst') name = nextProps.selected.ClusterName\n            else if(nextProps.siteId == 'App') name = nextProps.selected.AppName\n            else if(nextProps.siteId == 'appinst') name = nextProps.selected.AppName\n            this.setState({deleteName:name})\n            let orgName = '';\n            if(nextProps.siteId == 'User') orgName = nextProps.selected.Organization\n            this.setState({deleteOrg:orgName})\n\n\n        }\n    }\n\n    render() {\n        const { showWarning, closeOnEscape, closeOnDimmerClick } = this.state\n        return (\n            <Modal\n                open={showWarning}\n                closeOnEscape={closeOnEscape}\n                closeOnDimmerClick={closeOnDimmerClick}\n            >\n                <Modal.Header>{(this.props.siteId == 'User')?`Delete ${this.props.siteId} from Organization`:`Delete ${this.props.siteId}`}</Modal.Header>\n                <Modal.Content>\n                    {(this.props.siteId == 'User')?\n                    <p>{'Are you sure you want to delete '}<b>{this.state.deleteName}</b>{' from '}<b>{this.state.deleteOrg}</b>{'?'}</p>\n                    :<p>{'Are you sure you want to delete '}<b>{this.state.deleteName}</b>{'?'}</p>}\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.closeDeleteModal('no')} negative>\n                        No\n                    </Button>\n                    <Button\n                        onClick={() => this.closeDeleteModal('yes')}\n                        positive\n                        labelPosition='right'\n                        icon='checkmark'\n                        content='Yes'\n                    />\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        selectOrg : state.selectOrg.org?state.selectOrg.org:null,\n        changeRegion : state.changeRegion.region?state.changeRegion.region:null\n    }\n};\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleLoadingSpinner: (data) => { dispatch(actions.loadingSpinner(data))},\n        handleSelectOrg: (data) => { dispatch(actions.selectOrganiz(data))},\n        handleUserRole: (data) => { dispatch(actions.showUserRole(data))},\n        handleAlertInfo: (mode,msg) => { dispatch(actions.alertInfo(mode,msg))},\n        handleDeleteReset: (data) => { dispatch(actions.deleteReset(data))}\n    };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(DeleteItem));\n"]},"metadata":{},"sourceType":"module"}