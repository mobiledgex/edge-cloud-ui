{"ast":null,"code":"'use strict';\n\nvar defaults = require('./../defaults');\n\nvar utils = require('./../utils');\n\nvar InterceptorManager = require('./InterceptorManager');\n\nvar dispatchRequest = require('./dispatchRequest');\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\n\n\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\n\n\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, this.defaults, {\n    method: 'get'\n  }, config);\n  config.method = config.method.toLowerCase(); // Hook up interceptors middleware\n\n  var chain = [undefined]; //   var chain = [dispatchRequest, undefined];\n\n  var promise = Promise.resolve(config);\n  chain.unshift(dispatchRequest);\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n}; // Provide aliases for supported request methods\n\n\nutils.forEach(['delete', 'get', 'head', 'options', 'jsonp'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n}); // add jsonp\n// Axios.prototype.jsonp = jsonp;\n\nmodule.exports = Axios;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/axios-jsonp-pro/lib/core/Axios.js"],"names":["defaults","require","utils","InterceptorManager","dispatchRequest","Axios","instanceConfig","interceptors","request","response","prototype","config","merge","url","arguments","method","toLowerCase","chain","undefined","promise","Promise","resolve","unshift","forEach","unshiftRequestInterceptors","interceptor","fulfilled","rejected","pushResponseInterceptors","push","length","then","shift","forEachMethodNoData","forEachMethodWithData","data","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar defaults = require('./../defaults');\nvar utils = require('./../utils');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n\tthis.defaults = instanceConfig;\n\tthis.interceptors = {\n\t\trequest: new InterceptorManager(),\n\t\tresponse: new InterceptorManager()\n\t};\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n\t/*eslint no-param-reassign:0*/\n\t// Allow for axios('example/url'[, config]) a la fetch API\n\tif (typeof config === 'string') {\n\t\tconfig = utils.merge({\n\t\t\t\turl: arguments[0]\n\t\t\t},\n\t\t\targuments[1]\n\t\t);\n\t}\n\n\tconfig = utils.merge(\n\t\tdefaults,\n\t\tthis.defaults, {\n\t\t\tmethod: 'get'\n\t\t},\n\t\tconfig\n\t);\n\tconfig.method = config.method.toLowerCase();\n\n\t// Hook up interceptors middleware\n\tvar chain = [undefined];\n\n\t//   var chain = [dispatchRequest, undefined];\n\tvar promise = Promise.resolve(config);\n\n\tchain.unshift(dispatchRequest);\n\n\n\tthis.interceptors.request.forEach(function unshiftRequestInterceptors(\n\t\tinterceptor\n\t) {\n\t\tchain.unshift(interceptor.fulfilled, interceptor.rejected);\n\t});\n\n\tthis.interceptors.response.forEach(function pushResponseInterceptors(\n\t\tinterceptor\n\t) {\n\t\tchain.push(interceptor.fulfilled, interceptor.rejected);\n\t});\n\n\twhile (chain.length) {\n\t\tpromise = promise.then(chain.shift(), chain.shift());\n\t}\n\n\treturn promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(\n\t['delete', 'get', 'head', 'options', 'jsonp'],\n\tfunction forEachMethodNoData(method) {\n\t\t/*eslint func-names:0*/\n\t\tAxios.prototype[method] = function (url, config) {\n\t\t\treturn this.request(\n\t\t\t\tutils.merge(config || {}, {\n\t\t\t\t\tmethod: method,\n\t\t\t\t\turl: url\n\t\t\t\t})\n\t\t\t);\n\t\t};\n\t}\n);\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n\t/*eslint func-names:0*/\n\tAxios.prototype[method] = function (url, data, config) {\n\t\treturn this.request(\n\t\t\tutils.merge(config || {}, {\n\t\t\t\tmethod: method,\n\t\t\t\turl: url,\n\t\t\t\tdata: data\n\t\t\t})\n\t\t);\n\t};\n});\n// add jsonp\n// Axios.prototype.jsonp = jsonp;\n\nmodule.exports = Axios;"]},"metadata":{},"sourceType":"script"}