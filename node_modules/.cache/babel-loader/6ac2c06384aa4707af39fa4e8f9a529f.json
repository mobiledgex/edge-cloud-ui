{"ast":null,"code":"import * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n\nvar generateData = function generateData(datas, body) {\n  var values = [];\n  var toArray = null;\n  var toJson = [];\n\n  if (datas.data) {\n    if (typeof datas.data === 'object') {\n      toJson.push(datas.data ? datas.data : {});\n    } else {\n      toArray = datas.data.split('\\n');\n      toArray.pop();\n      toJson = toArray.map(function (str) {\n        return JSON.parse(str);\n      });\n    }\n  } else {\n    toJson = null;\n  }\n\n  if (toJson) {\n    toJson.map(function (dataResult, i) {\n      if (dataResult.message) {\n        values.push({\n          Region: '',\n          ClusterFlavor: '',\n          MasterFlavor: '',\n          NumberOfMasterNode: '',\n          NodeFlavor: '',\n          NumberOfNode: '',\n          MaximumNodes: '',\n          Edit: null\n        });\n      } else {\n        var Index = i;\n        var Region = body.region || '-';\n        var ClusterFlavor = dataResult.data.key.name || '-';\n        var MasterFlavor = dataResult.data.master_flavor.name || '-';\n        var NumberOfMasterNode = dataResult.data.num_masters || '-';\n        var NodeFlavor = dataResult.data.node_flavor.name || '-';\n        var NumberOfNode = dataResult.data.num_nodes || '-';\n        var MaximumNodes = dataResult.data.max_nodes || '-';\n        var newRegistKey = ['Region', 'ClusterFlavor', 'MasterFlavor', 'NumberOfMasterNode', 'NodeFlavor', 'NumberOfNode', 'MaximumNodes'];\n        values.push({\n          Region: Region,\n          ClusterFlavor: ClusterFlavor,\n          MasterFlavor: MasterFlavor,\n          NumberOfMasterNode: NumberOfMasterNode,\n          NodeFlavor: NodeFlavor,\n          NumberOfNode: NumberOfNode,\n          MaximumNodes: MaximumNodes,\n          Edit: newRegistKey\n        });\n      }\n    });\n  } else {\n    var newRegistKey = ['Region', 'ClusterFlavor', 'MasterFlavor', 'NumberOfMasterNode', 'NodeFlavor', 'NumberOfNode', 'MaximumNodes'];\n    values.push({\n      Region: '',\n      ClusterFlavor: '',\n      MasterFlavor: '',\n      NumberOfMasterNode: '',\n      NodeFlavor: '',\n      NumberOfNode: '',\n      MaximumNodes: '',\n      Edit: newRegistKey\n    });\n  } //ascending or descending\n  //values.sort(numberDes);\n  //values.reverse();\n\n\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatComputeCluster = function FormatComputeCluster(props, body) {\n  return generateData(props, body);\n};\n\nexport default FormatComputeCluster;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/services/formatter/formatComputeCluster.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","generateData","body","values","toArray","toJson","data","push","split","pop","map","str","JSON","parse","dataResult","i","message","Region","ClusterFlavor","MasterFlavor","NumberOfMasterNode","NodeFlavor","NumberOfNode","MaximumNodes","Edit","Index","region","key","name","master_flavor","num_masters","node_flavor","num_nodes","max_nodes","newRegistKey","retunDate","year","substring","month","day","hour","minute","date","Date","FormatComputeCluster","props"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n\nlet generateData = (datas,body) => {\n    let values = [];\n    let toArray = null;\n    let toJson = [];\n    if(datas.data) {\n        if(typeof datas.data === 'object') {\n            toJson.push((datas.data)?datas.data:{});\n        } else {\n            toArray = datas.data.split('\\n')\n            toArray.pop();\n            toJson = toArray.map((str)=>(JSON.parse(str)))\n        }\n    }else {\n        toJson = null;\n    }\n    if(toJson){\n        toJson.map((dataResult, i) => {\n            if(dataResult.message) {\n                values.push({Region:'', ClusterFlavor:'', MasterFlavor:'', NumberOfMasterNode:'', NodeFlavor:'', NumberOfNode:'', MaximumNodes:'', Edit:null})\n            } else {\n            let Index = i;\n            let Region = body.region || '-';\n            let ClusterFlavor = dataResult.data.key.name  || '-';\n            let MasterFlavor = dataResult.data.master_flavor.name  || '-';\n            let NumberOfMasterNode = dataResult.data.num_masters  || '-';\n            let NodeFlavor = dataResult.data.node_flavor.name  || '-';\n            let NumberOfNode = dataResult.data.num_nodes || '-';\n            let MaximumNodes = dataResult.data.max_nodes || '-';\n\n            let newRegistKey = ['Region', 'ClusterFlavor', 'MasterFlavor', 'NumberOfMasterNode', 'NodeFlavor', 'NumberOfNode', 'MaximumNodes'];\n            values.push({Region:Region, ClusterFlavor:ClusterFlavor, MasterFlavor:MasterFlavor, NumberOfMasterNode:NumberOfMasterNode, NodeFlavor:NodeFlavor, NumberOfNode:NumberOfNode, MaximumNodes:MaximumNodes, Edit:newRegistKey})\n            }\n        })\n    } else {\n        let newRegistKey = ['Region', 'ClusterFlavor', 'MasterFlavor', 'NumberOfMasterNode', 'NodeFlavor', 'NumberOfNode', 'MaximumNodes'];\n        values.push({Region:'', ClusterFlavor:'', MasterFlavor:'', NumberOfMasterNode:'', NodeFlavor:'', NumberOfNode:'', MaximumNodes:'', Edit:newRegistKey})\n    }\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    //values.reverse();\n\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatComputeCluster = (props,body) => (\n    generateData(props,body)\n)\n\nexport default FormatComputeCluster;\n"]},"metadata":{},"sourceType":"module"}