{"ast":null,"code":"import _defineProperty from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/charts/sparkline.js\";\nimport React from 'react';\nimport TimeSeriesFlow from '../charts/plotly/timeseriesFlow';\nvar _self = null;\n\nfunction boxMullerRandom() {\n  var phase = false,\n      x1,\n      x2,\n      w,\n      z;\n  return function () {\n    if (phase = !phase) {\n      do {\n        x1 = 2.0 * Math.random() - 1.0;\n        x2 = 2.0 * Math.random() - 1.0;\n        w = x1 * x1 + x2 * x2;\n      } while (w >= 1.0);\n\n      w = Math.sqrt(-2.0 * Math.log(w) / w);\n      return x1 * w;\n    } else {\n      return x2 * w;\n    }\n  }();\n}\n\nfunction randomData() {\n  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  return Array.apply(0, Array(n)).map(boxMullerRandom);\n}\n\nvar sampleData = randomData(30);\nvar sampleData100 = randomData(100);\nvar customMargin = {\n  l: 1,\n  r: 1,\n  b: 1,\n  t: 1,\n  pad: 1\n};\n\nvar SparkLine =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SparkLine, _React$Component);\n\n  function SparkLine() {\n    var _this;\n\n    _classCallCheck(this, SparkLine);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SparkLine).call(this));\n    _self = _assertThisInitialized(_this);\n    _this.state = {\n      width: 200,\n      height: 50,\n      data: [],\n      data2: [],\n      network: [],\n      networkSeries: [],\n      redraw: false,\n      resetData: false,\n      lineLimit: false\n    }; // setInterval(() =>\n    //     this.setState({\n    //         data: this.state.data.concat([boxMullerRandom()]),\n    //         data2: this.state.data2.concat([boxMullerRandom()])\n    //     }), 1000);\n\n    _this.dataArray = [];\n    _this.dataSeries = [];\n    _this.oldSeries = [];\n    _this.limitDataLength = 20;\n    return _this;\n  }\n\n  _createClass(SparkLine, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var w = _self.props.w;\n      var h = _self.props.h;\n      console.log('size props == ', _self.props.w, _self.props.h);\n      var margin = {\n        top: 0.1 * h,\n        right: 0.1 * w,\n        bottom: 0.1 * h,\n        left: 0.1 * w\n      };\n      var width = w - margin.left - margin.right;\n      var height = h - margin.top - margin.bottom;\n      this.setState({\n        width: width,\n        height: height,\n        newtwork: [],\n        networkSeries: []\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      // this.setState({\n      //     data: this.state.data.concat([nextProps.value[0]]),\n      //     data2: this.state.data2.concat([nextProps.value[1]]),\n      //     network: [{In:nextProps.value[0], Out:nextProps.value[1]}],\n      //     networkSeries: [nextProps.series]\n      // })\n      if (nextProps.value) {\n        //TODO: 네트웍데이터 가공하기\n        var keyLength = Object.keys(nextProps.value).length;\n        var newData = true;\n        var sCnt = 0;\n        var self = this;\n        Object.keys(nextProps.value).map(function (key, i) {\n          if (self.dataArray.length < Object.keys(nextProps.value).length) {\n            self.dataArray.push([]);\n            self.dataSeries[0] = [];\n          } else {\n            if (nextProps.value[key] && self.oldSeries === nextProps.series) {\n              newData = false;\n            } else {\n              newData = true;\n            } //should limit display data in chart\n\n            /****************\n             * 차트에 표현할 데이터의 개수 정의\n             ****************/\n\n\n            if (self.dataArray[i] && self.dataArray[i].length > self.limitDataLength) {\n              //pop first data\n              self.dataArray[i].splice(0, 1);\n              if (sCnt === keyLength - 1) self.dataSeries[0].splice(0, 1);\n            }\n\n            if (newData && nextProps.value[key]) {\n              self.dataArray[i].push(Number(nextProps.value[key]));\n\n              if (sCnt === keyLength - 1) {\n                self.dataSeries[0].push(nextProps.series);\n                self.oldSeries = nextProps.value[key].time; //console.log('time series == ', self.dataSeries[0] , 'data length='+self.dataArray[i].length, 'limitDataLength='+self.limitDataLength)\n\n                if (self.dataSeries[0].length === self.limitDataLength + 1) {\n                  self.setState({\n                    lineLimit: true\n                  });\n                }\n\n                self.setState({\n                  redraw: true\n                });\n              } else {}\n\n              self.setState(_defineProperty({}, key, nextProps.value[key]));\n            }\n          }\n\n          sCnt++;\n        });\n\n        if (newData) {\n          self.setState({\n            network: self.dataArray,\n            networkSeries: self.dataSeries,\n            label: nextProps.label\n          });\n        }\n      }\n    }\n  }, {\n    key: \"formatData\",\n    value: function formatData(values) {//console.log('==========  value ===========', values)\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var sId = this.props.sId;\n      var value = this.formatData(this.props.value);\n      var _this$state = this.state,\n          network = _this$state.network,\n          networkSeries = _this$state.networkSeries,\n          lineLimit = _this$state.lineLimit,\n          redraw = _this$state.redraw,\n          label = _this$state.label;\n      return React.createElement(\"div\", {\n        className: \"spark_chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(TimeSeriesFlow, {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        chartData: network,\n        series: networkSeries,\n        lineLimit: lineLimit,\n        label: label,\n        redraw: redraw,\n        margin: customMargin,\n        marginRight: 40,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SparkLine;\n}(React.Component);\n\nexport { SparkLine as default };\nSparkLine.defaultProps = {\n  sId: String(Math.random() * 1000000),\n  w: 200,\n  h: 80,\n  backgroundColor: 'transparent'\n};","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/charts/sparkline.js"],"names":["React","TimeSeriesFlow","_self","boxMullerRandom","phase","x1","x2","w","z","Math","random","sqrt","log","randomData","n","Array","apply","map","sampleData","sampleData100","customMargin","l","r","b","t","pad","SparkLine","state","width","height","data","data2","network","networkSeries","redraw","resetData","lineLimit","dataArray","dataSeries","oldSeries","limitDataLength","props","h","console","margin","top","right","bottom","left","setState","newtwork","nextProps","nextContext","value","keyLength","Object","keys","length","newData","sCnt","self","key","i","push","series","splice","Number","time","label","values","sId","formatData","Component","defaultProps","String","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TimeSeriesFlow from '../charts/plotly/timeseriesFlow';\n\nlet _self = null;\nfunction boxMullerRandom () {\n    let phase = false,\n        x1, x2, w, z;\n\n    return (function() {\n\n        if (phase = !phase) {\n            do {\n                x1 = 2.0 * Math.random() - 1.0;\n                x2 = 2.0 * Math.random() - 1.0;\n                w = x1 * x1 + x2 * x2;\n            } while (w >= 1.0);\n\n            w = Math.sqrt((-2.0 * Math.log(w)) / w);\n            return x1 * w;\n        } else {\n            return x2 * w;\n        }\n    })();\n}\n\nfunction randomData(n = 30) {\n    return Array.apply(0, Array(n)).map(boxMullerRandom);\n}\n\nconst sampleData = randomData(30);\nconst sampleData100 = randomData(100);\n\nlet customMargin = {\n    l: 1,\n    r: 1,\n    b: 1,\n    t: 1,\n    pad: 1\n}\nexport default class SparkLine extends React.Component {\n    constructor() {\n        super();\n        _self = this;\n        this.state = {\n            width:200,\n            height:50,\n            data:[],\n            data2:[],\n            network:[],\n            networkSeries:[],\n            redraw:false, resetData:false, lineLimit:false,\n        }\n        // setInterval(() =>\n        //     this.setState({\n        //         data: this.state.data.concat([boxMullerRandom()]),\n        //         data2: this.state.data2.concat([boxMullerRandom()])\n        //     }), 1000);\n        this.dataArray = [];\n        this.dataSeries = [];\n        this.oldSeries = [];\n        this.limitDataLength = 20;\n    }\n    componentDidMount() {\n        var w = _self.props.w;\n        var h = _self.props.h;\n        console.log('size props == ', _self.props.w, _self.props.h)\n        var margin = {\n            top: 0.1 * h,\n            right: 0.1 * w,\n            bottom: 0.1 * h,\n            left: 0.1 * w\n        };\n\n        var width = w - margin.left - margin.right;\n        var height = h - margin.top - margin.bottom;\n\n        this.setState({width:width, height:height, newtwork:[], networkSeries:[]})\n\n\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n\n\n        // this.setState({\n        //     data: this.state.data.concat([nextProps.value[0]]),\n        //     data2: this.state.data2.concat([nextProps.value[1]]),\n        //     network: [{In:nextProps.value[0], Out:nextProps.value[1]}],\n        //     networkSeries: [nextProps.series]\n        // })\n\n\n\n\n        if(nextProps.value) {\n            //TODO: 네트웍데이터 가공하기\n            let keyLength = Object.keys(nextProps.value).length;\n            let newData = true;\n            let sCnt = 0;\n            let self = this;\n            Object.keys(nextProps.value).map((key, i) => {\n                if(self.dataArray.length < Object.keys(nextProps.value).length) {\n                    self.dataArray.push([])\n                    self.dataSeries[0]=[]\n                } else {\n\n                    if(nextProps.value[key] && self.oldSeries === nextProps.series){\n                        newData = false;\n                    } else {\n                        newData = true;\n                    }\n\n                    //should limit display data in chart\n                    /****************\n                     * 차트에 표현할 데이터의 개수 정의\n                     ****************/\n                    if(self.dataArray[i] && self.dataArray[i].length > self.limitDataLength) {\n                        //pop first data\n                        self.dataArray[i].splice(0,1)\n                        if(sCnt === (keyLength - 1)) self.dataSeries[0].splice(0,1)\n                    }\n\n                    if(newData && nextProps.value[key]) {\n                        self.dataArray[i].push(Number(nextProps.value[key]))\n                        if(sCnt === (keyLength - 1)) {\n                            self.dataSeries[0].push(nextProps.series)\n                            self.oldSeries = nextProps.value[key].time;\n                            //console.log('time series == ', self.dataSeries[0] , 'data length='+self.dataArray[i].length, 'limitDataLength='+self.limitDataLength)\n                            if(self.dataSeries[0].length === (self.limitDataLength+1)){\n                                self.setState({lineLimit: true})\n                            }\n                            self.setState({redraw:true})\n                        } else {\n\n                        }\n                        self.setState({[key]:nextProps.value[key]})\n                    }\n\n                }\n                sCnt ++;\n            })\n\n            if(newData){\n                self.setState({network:self.dataArray, networkSeries:self.dataSeries, label:nextProps.label})\n            }\n\n        }\n    }\n\n    formatData(values) {\n\n            //console.log('==========  value ===========', values)\n\n    }\n    render() {\n        let sId = this.props.sId;\n        let value = this.formatData(this.props.value);\n        let {network, networkSeries, lineLimit, redraw, label} = this.state;\n        return (\n            <div className='spark_chart'>\n                <TimeSeriesFlow style={{width:'100%', height:'100%'}} chartData={network} series={networkSeries} lineLimit={lineLimit} label={label} redraw={redraw} margin={customMargin} marginRight={40}></TimeSeriesFlow>\n            </div>\n        )\n    }\n}\nSparkLine.defaultProps = {\n    sId: String(Math.random()*1000000),\n    w:200,\n    h:80,\n    backgroundColor:'transparent'\n}\n"]},"metadata":{},"sourceType":"module"}