{"ast":null,"code":"import * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n/*\n{\"key\":{\"cluster_key\":{\"name\":\"macrometa\"},\"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"bonn-mexdemo\"},\"developer\":\"bicinkiOrg\"},\"flavor\":{\"name\":\"x1.medium\"},\"liveness\":1,\"state\":5,\"ip_access\":3,\"node_flavor\":\"m4.small\",\"master_flavor\":\"m4.small\"}\n{\n    \"key\":\n    {\n        \"cluster_key\":{\"name\":\"biccluster\"},\n        \"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"bonn-mexdemo\"},\n        \"developer\":\"bicinkiOrg\"\n    },\n    \"flavor\":{\"name\":\"x1.medium\"},\n    \"liveness\":1,\n    \"state\":5,\n    \"ip_access\":3,\n    \"node_flavor\":\"m4.small\",\n    \"master_flavor\":\"m4.small\"\n}\n */\n\n\nvar generateData = function generateData(datas, body) {\n  var values = [];\n  var toArray = null;\n  var toJson = [];\n  var ipaccessArr = ['IpAccessUnknown', 'IpAccessDedicated', 'IpAccessDedicatedOrShared', 'IpAccessShared'];\n\n  if (datas.data) {\n    if (typeof datas.data === 'object') {\n      toJson.push(datas.data ? datas.data : {});\n    } else {\n      toArray = datas.data.split('\\n');\n      toArray.pop();\n      toJson = toArray.map(function (str) {\n        return JSON.parse(str);\n      });\n    }\n  } else {\n    toJson = null;\n  } //20190409 transition string to json\n\n\n  var newRegistKey = ['Region', 'ClusterName', 'OrganizationName', 'Operator', 'Cloudlet', 'Flavor', 'IpAccess', 'Number_of_Master', 'Number_of_Node', 'CloudletLocation'];\n\n  if (toJson && toJson.length) {\n    toJson.map(function (dataResult, i) {\n      if (dataResult.error || dataResult.message || !dataResult.data) {\n        values.push({\n          Region: '',\n          ClusterName: '',\n          OrganizationName: '',\n          Operator: '',\n          Cloudlet: '',\n          Flavor: '',\n          IpAccess: '',\n          CloudletLocation: '',\n          State: '',\n          Progress: '',\n          Status: '',\n          Edit: null\n        });\n      } else {\n        var Index = i;\n        var Region = body.region || body.params.region || '-';\n        var ClusterName = dataResult.data.key.cluster_key.name || '-';\n        var DeveloperName = dataResult.data.key.developer || '-';\n        var Operator = dataResult.data.key.cloudlet_key.operator_key.name || '-';\n        var Cloudlet = dataResult.data.key.cloudlet_key.name || '-';\n        var Flavor = dataResult.data.flavor.name || '-';\n        var IpAccess = dataResult.data.ip_access || '-';\n        var NodeFlavor = dataResult.data.node_flavor || '';\n        var NumMasters = dataResult.data.num_masters || '';\n        var NumNodes = dataResult.data.num_nodes || '';\n        var State = dataResult.data.state || '';\n        var CloudletLocation = '-';\n        var Status = dataResult.data.status;\n        var Deployment = dataResult.data.deployment;\n        values.push({\n          Region: Region,\n          ClusterName: ClusterName,\n          OrganizationName: DeveloperName,\n          Operator: Operator,\n          Cloudlet: Cloudlet,\n          Flavor: Flavor,\n          IpAccess: IpAccess,\n          CloudletLocation: CloudletLocation,\n          State: State,\n          Progress: '',\n          Status: Status,\n          Deployment: Deployment,\n          Edit: newRegistKey\n        });\n      }\n    });\n  } else {\n    values.push({\n      Region: ''\n    }); //values.push({Region:'', ClusterName:'', OrganizationName:'', Operator:'', Cloudlet:'', Flavor:'', IpAccess:'', CloudletLocation:'', State:'', Progress:'', Status:'', Edit:newRegistKey})\n  } //ascending or descending\n  //values.sort(numberDes);\n  //values.reverse();\n\n\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatComputeClstInst = function FormatComputeClstInst(props, body) {\n  return generateData(props, body);\n};\n\nexport default FormatComputeClstInst;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/services/formatter/formatComputeClstInstance.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","generateData","body","values","toArray","toJson","ipaccessArr","data","push","split","pop","map","str","JSON","parse","newRegistKey","length","dataResult","i","error","message","Region","ClusterName","OrganizationName","Operator","Cloudlet","Flavor","IpAccess","CloudletLocation","State","Progress","Status","Edit","Index","region","params","key","cluster_key","name","DeveloperName","developer","cloudlet_key","operator_key","flavor","ip_access","NodeFlavor","node_flavor","NumMasters","num_masters","NumNodes","num_nodes","state","status","Deployment","deployment","retunDate","year","substring","month","day","hour","minute","date","Date","FormatComputeClstInst","props"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n/*\n{\"key\":{\"cluster_key\":{\"name\":\"macrometa\"},\"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"bonn-mexdemo\"},\"developer\":\"bicinkiOrg\"},\"flavor\":{\"name\":\"x1.medium\"},\"liveness\":1,\"state\":5,\"ip_access\":3,\"node_flavor\":\"m4.small\",\"master_flavor\":\"m4.small\"}\n{\n    \"key\":\n    {\n        \"cluster_key\":{\"name\":\"biccluster\"},\n        \"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"bonn-mexdemo\"},\n        \"developer\":\"bicinkiOrg\"\n    },\n    \"flavor\":{\"name\":\"x1.medium\"},\n    \"liveness\":1,\n    \"state\":5,\n    \"ip_access\":3,\n    \"node_flavor\":\"m4.small\",\n    \"master_flavor\":\"m4.small\"\n}\n */\nlet generateData = (datas,body) => {\n    let values = [];\n    let toArray = null;\n    let toJson = [];\n    let ipaccessArr = ['IpAccessUnknown','IpAccessDedicated','IpAccessDedicatedOrShared','IpAccessShared'];\n    if(datas.data) {\n        if(typeof datas.data === 'object') {\n            toJson.push((datas.data)?datas.data:{});\n        } else {\n            toArray = datas.data.split('\\n')\n            toArray.pop();\n            toJson = toArray.map((str)=>(JSON.parse(str)))\n        }\n    }else {\n        toJson = null;\n    }\n    //20190409 transition string to json\n    \n    let newRegistKey = ['Region', 'ClusterName', 'OrganizationName', 'Operator', 'Cloudlet', 'Flavor', 'IpAccess', 'Number_of_Master', 'Number_of_Node', 'CloudletLocation'];\n    if(toJson && toJson.length){\n        toJson.map((dataResult, i) => {\n            if(dataResult.error || dataResult.message || !dataResult.data) {\n                values.push({\n                    Region:'',\n                    ClusterName:'',\n                    OrganizationName:'',\n                    Operator:'',\n                    Cloudlet:'',\n                    Flavor:'',\n                    IpAccess:'',\n                    CloudletLocation:'',\n                    State:'',\n                    Progress:'',\n                    Status:'',\n                    Edit:null})\n            } else {\n                let Index = i;\n                let Region = body.region || body.params.region || '-';\n                let ClusterName = dataResult.data.key.cluster_key.name  || '-';\n                let DeveloperName = dataResult.data.key.developer || '-';\n                let Operator = dataResult.data.key.cloudlet_key.operator_key.name  || '-';\n                let Cloudlet = dataResult.data.key.cloudlet_key.name  || '-';\n                let Flavor = dataResult.data.flavor.name || '-';\n                let IpAccess = dataResult.data.ip_access || '-';\n                let NodeFlavor = dataResult.data.node_flavor || '';\n                let NumMasters = dataResult.data.num_masters || '';\n                let NumNodes = dataResult.data.num_nodes || '';\n                let State = dataResult.data.state || '';\n                let CloudletLocation = '-';\n                let Status = dataResult.data.status;\n                let Deployment = dataResult.data.deployment;\n\n\n                values.push({Region:Region, ClusterName:ClusterName, OrganizationName:DeveloperName, Operator:Operator, Cloudlet:Cloudlet, Flavor:Flavor, IpAccess:IpAccess, CloudletLocation:CloudletLocation, State:State, Progress:'', Status:Status, Deployment:Deployment, Edit:newRegistKey})\n\n            }\n        })\n    } else {\n        values.push({Region:''})\n        //values.push({Region:'', ClusterName:'', OrganizationName:'', Operator:'', Cloudlet:'', Flavor:'', IpAccess:'', CloudletLocation:'', State:'', Progress:'', Status:'', Edit:newRegistKey})\n    }\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    //values.reverse();\n\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatComputeClstInst = (props,body) => (\n    generateData(props,body)\n)\n\nexport default FormatComputeClstInst;\n"]},"metadata":{},"sourceType":"module"}