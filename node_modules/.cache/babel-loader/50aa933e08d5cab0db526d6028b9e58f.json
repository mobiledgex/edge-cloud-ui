{"ast":null,"code":"import * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n\nvar generateData = function generateData(datas, body) {\n  var values = [];\n  var toArray = null;\n  var toJson = [];\n\n  if (datas.data) {\n    if (typeof datas.data === 'object') {\n      if (datas.data == null) {\n        toJson = null;\n      } else {\n        toJson.push(datas.data ? datas.data : {});\n      }\n    } else {\n      toArray = datas.data.split('\\n');\n      toArray.pop();\n      toJson = toArray.map(function (str) {\n        return JSON.parse(str);\n      });\n    }\n  } else {\n    toJson = null;\n  }\n\n  console.log(\"datasdatasdatasss\", toJson);\n  var newRegistKey = ['Region', 'CloudletName', 'OperatorName', 'CloudletLocation', 'Ip_support', 'Num_dynamic_ips'];\n\n  if (toJson && toJson.length) {\n    toJson.map(function (dataResult, i) {\n      if (dataResult.error || dataResult.message || !dataResult.data) {\n        values.push({\n          Region: '',\n          CloudletName: '',\n          Operator: '',\n          CloudletLocation: '',\n          Ip_support: '',\n          Num_dynamic_ips: '',\n          Physical_name: '',\n          Platform_type: '',\n          State: '',\n          Progress: '',\n          Status: '',\n          Edit: null\n        });\n      } else {\n        var Index = i;\n        var Region = body.region || '-';\n        var CloudletName = dataResult.data.key.name || '-';\n        var Operator = dataResult.data.key.operator_key.name || '-';\n        var CloudletLocation = dataResult.data.location || '-';\n        var Ip_support = dataResult.data.ip_support || '-';\n        var Num_dynamic_ips = dataResult.data.num_dynamic_ips || '-';\n        var Physical_name = dataResult.data.physical_name || '-';\n        var Platform_type = dataResult.data.platform_type || '-';\n        var State = dataResult.data.state || '-';\n        var Status = dataResult.data.status;\n        values.push({\n          Region: Region,\n          CloudletName: CloudletName,\n          Operator: Operator,\n          CloudletLocation: CloudletLocation,\n          Ip_support: Ip_support,\n          Num_dynamic_ips: Num_dynamic_ips,\n          Physical_name: Physical_name,\n          Platform_type: Platform_type,\n          State: State,\n          Progress: '',\n          Status: Status,\n          Edit: newRegistKey\n        });\n      }\n    });\n  } else {\n    values.push({\n      Region: '',\n      CloudletLocation: ''\n    });\n  } //----------------\n  //ascending or descending\n  //values.sort(numberDes);\n  //values.reverse();\n\n\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatComputeClouldlet = function FormatComputeClouldlet(props, body) {\n  return generateData(props, body);\n};\n\nexport default FormatComputeClouldlet;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/services/formatter/formatComputeCloudlet.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","generateData","body","values","toArray","toJson","data","push","split","pop","map","str","JSON","parse","console","log","newRegistKey","length","dataResult","i","error","message","Region","CloudletName","Operator","CloudletLocation","Ip_support","Num_dynamic_ips","Physical_name","Platform_type","State","Progress","Status","Edit","Index","region","key","name","operator_key","location","ip_support","num_dynamic_ips","physical_name","platform_type","state","status","retunDate","year","substring","month","day","hour","minute","date","Date","FormatComputeClouldlet","props"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n\nlet generateData = (datas,body) => {\n    let values = [];\n    let toArray = null;\n    let toJson = [];\n    if(datas.data) {\n        if(typeof datas.data === 'object') {\n            if(datas.data == null) {\n                toJson = null;\n            } else {\n                toJson.push((datas.data)?datas.data:{});\n            }\n        } else {\n            toArray = datas.data.split('\\n')\n            toArray.pop();\n            toJson = toArray.map((str)=>(JSON.parse(str)))\n        }\n    }else {\n        toJson = null;\n    }\n    console.log(\"datasdatasdatasss\",toJson)\n    let newRegistKey = ['Region', 'CloudletName', 'OperatorName', 'CloudletLocation', 'Ip_support', 'Num_dynamic_ips'];\n    if(toJson && toJson.length){\n        toJson.map((dataResult, i) => {\n            if(dataResult.error || dataResult.message || !dataResult.data) {\n                values.push({\n                    Region:'',\n                    CloudletName:'',\n                    Operator:'',\n                    CloudletLocation:'',\n                    Ip_support:'',\n                    Num_dynamic_ips:'',\n                    Physical_name:'',\n                    Platform_type:'',\n                    State:'',\n                    Progress:'',\n                    Status:'',\n                    Edit:null\n                })\n            } else {\n                let Index = i;\n                let Region = body.region || '-';\n                let CloudletName = dataResult.data.key.name || '-';\n                let Operator = dataResult.data.key.operator_key.name || '-';\n                let CloudletLocation = dataResult.data.location || '-';\n                let Ip_support = dataResult.data.ip_support || '-';\n                let Num_dynamic_ips = dataResult.data.num_dynamic_ips || '-';\n                let Physical_name = dataResult.data.physical_name || '-';\n                let Platform_type = dataResult.data.platform_type || '-';\n                let State = dataResult.data.state || '-';\n                let Status = dataResult.data.status;\n\n                values.push({Region:Region,  CloudletName:CloudletName, Operator:Operator, CloudletLocation:CloudletLocation, Ip_support:Ip_support, Num_dynamic_ips:Num_dynamic_ips, Physical_name:Physical_name, Platform_type:Platform_type, State:State, Progress:'', Status:Status, Edit:newRegistKey})\n            }\n\n        })\n    } else {\n        values.push({Region:'',CloudletLocation:''})\n    }\n\n\n    //----------------\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    //values.reverse();\n\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatComputeClouldlet = (props,body) => (\n    generateData(props,body)\n)\n\nexport default FormatComputeClouldlet;\n"]},"metadata":{},"sourceType":"module"}