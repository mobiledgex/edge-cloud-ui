{"ast":null,"code":"import React from 'react';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar VIEWBOX_WIDTH = 100;\nvar VIEWBOX_HEIGHT = 100;\nvar VIEWBOX_HEIGHT_HALF = 50;\nvar VIEWBOX_CENTER_X = 50;\nvar VIEWBOX_CENTER_Y = 50;\nvar MIN_PERCENTAGE = 0;\nvar MAX_PERCENTAGE = 100;\n\nfunction Path(_a) {\n  var className = _a.className,\n      counterClockwise = _a.counterClockwise,\n      pathRadius = _a.pathRadius,\n      percentage = _a.percentage,\n      strokeWidth = _a.strokeWidth,\n      style = _a.style;\n  return React.createElement(\"path\", {\n    className: className,\n    style: Object.assign({}, style, getDashStyle({\n      pathRadius: pathRadius,\n      percentage: percentage,\n      counterClockwise: counterClockwise\n    })),\n    d: getPathDescription({\n      pathRadius: pathRadius,\n      counterClockwise: counterClockwise\n    }),\n    strokeWidth: strokeWidth,\n    fillOpacity: 0\n  });\n}\n\nfunction getPathDescription(_a) {\n  var pathRadius = _a.pathRadius,\n      counterClockwise = _a.counterClockwise;\n  var radius = pathRadius;\n  var rotation = counterClockwise ? 1 : 0;\n  return \"\\n      M \" + VIEWBOX_CENTER_X + \",\" + VIEWBOX_CENTER_Y + \"\\n      m 0,-\" + radius + \"\\n      a \" + radius + \",\" + radius + \" \" + rotation + \" 1 1 0,\" + 2 * radius + \"\\n      a \" + radius + \",\" + radius + \" \" + rotation + \" 1 1 0,-\" + 2 * radius + \"\\n    \";\n}\n\nfunction getDashStyle(_a) {\n  var pathRadius = _a.pathRadius,\n      percentage = _a.percentage,\n      counterClockwise = _a.counterClockwise;\n  var diameter = Math.PI * 2 * pathRadius;\n  var truncatedPercentage = Math.min(Math.max(percentage, MIN_PERCENTAGE), MAX_PERCENTAGE);\n  var gapLength = (1 - truncatedPercentage / 100) * diameter;\n  return {\n    strokeDasharray: diameter + \"px \" + diameter + \"px\",\n    strokeDashoffset: (counterClockwise ? -gapLength : gapLength) + \"px\"\n  };\n}\n\nvar CircularProgressbar = function (_super) {\n  __extends(CircularProgressbar, _super);\n\n  function CircularProgressbar(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.initialTimeout = undefined;\n    _this.requestAnimationFrame = undefined;\n    _this.state = {\n      percentage: props.initialAnimation ? 0 : props.percentage\n    };\n    return _this;\n  }\n\n  CircularProgressbar.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (this.props.initialAnimation) {\n      this.initialTimeout = window.setTimeout(function () {\n        _this.requestAnimationFrame = window.requestAnimationFrame(function () {\n          _this.setState({\n            percentage: _this.props.percentage\n          });\n        });\n      }, 0);\n    }\n  };\n\n  CircularProgressbar.prototype.componentWillReceiveProps = function (nextProps) {\n    this.setState({\n      percentage: nextProps.percentage\n    });\n  };\n\n  CircularProgressbar.prototype.componentWillUnmount = function () {\n    clearTimeout(this.initialTimeout);\n\n    if (this.requestAnimationFrame) {\n      window.cancelAnimationFrame(this.requestAnimationFrame);\n    }\n  };\n\n  CircularProgressbar.prototype.getBackgroundPadding = function () {\n    if (this.props.background) {\n      if (this.props.backgroundPadding == null) {\n        return this.props.strokeWidth;\n      }\n\n      return this.props.backgroundPadding;\n    }\n\n    return 0;\n  };\n\n  CircularProgressbar.prototype.getPathRadius = function () {\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  };\n\n  CircularProgressbar.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        classes = _a.classes,\n        counterClockwise = _a.counterClockwise,\n        percentage = _a.percentage,\n        styles = _a.styles,\n        strokeWidth = _a.strokeWidth,\n        text = _a.text,\n        circleRatio = _a.circleRatio;\n    var pathRadius = this.getPathRadius();\n    return React.createElement(\"svg\", {\n      className: classes.root + \" \" + className,\n      style: styles.root,\n      viewBox: \"0 0 \" + VIEWBOX_WIDTH + \" \" + VIEWBOX_HEIGHT\n    }, this.props.background ? React.createElement(\"circle\", {\n      className: classes.background,\n      style: styles.background,\n      cx: VIEWBOX_CENTER_X,\n      cy: VIEWBOX_CENTER_Y,\n      r: VIEWBOX_HEIGHT_HALF\n    }) : null, React.createElement(Path, {\n      className: classes.trail,\n      counterClockwise: counterClockwise,\n      pathRadius: pathRadius,\n      percentage: 100 * circleRatio,\n      strokeWidth: strokeWidth,\n      style: styles.trail\n    }), React.createElement(Path, {\n      className: classes.path,\n      counterClockwise: counterClockwise,\n      pathRadius: pathRadius,\n      percentage: percentage * circleRatio,\n      strokeWidth: strokeWidth,\n      style: styles.path\n    }), text ? React.createElement(\"text\", {\n      className: classes.text,\n      style: styles.text,\n      x: VIEWBOX_CENTER_X,\n      y: VIEWBOX_CENTER_Y\n    }, text) : null);\n  };\n\n  CircularProgressbar.defaultProps = {\n    strokeWidth: 8,\n    className: '',\n    text: '',\n    background: false,\n    backgroundPadding: 0,\n    initialAnimation: false,\n    counterClockwise: false,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background'\n    },\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {}\n    }\n  };\n  return CircularProgressbar;\n}(React.Component);\n\nexport default CircularProgressbar;","map":{"version":3,"sources":["../src/constants.ts","../src/Path.tsx","../src/CircularProgressbar.tsx"],"names":[],"mappings":"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","sourcesContent":["export const VIEWBOX_WIDTH = 100;\nexport const VIEWBOX_HEIGHT = 100;\nexport const VIEWBOX_HEIGHT_HALF = 50;\nexport const VIEWBOX_CENTER_X = 50;\nexport const VIEWBOX_CENTER_Y = 50;\n","import React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nconst MIN_PERCENTAGE = 0;\nconst MAX_PERCENTAGE = 100;\n\nfunction Path({\n  className,\n  counterClockwise,\n  pathRadius,\n  percentage,\n  strokeWidth,\n  style,\n}: {\n  className?: string;\n  counterClockwise: boolean;\n  pathRadius: number;\n  percentage: number;\n  strokeWidth: number;\n  style?: object;\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, percentage, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  );\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  counterClockwise: boolean;\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0;\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  pathRadius,\n  percentage,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  percentage: number;\n  counterClockwise: boolean;\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n\n  // Keep percentage within range (MIN_PERCENTAGE, MAX_PERCENTAGE)\n  const truncatedPercentage = Math.min(Math.max(percentage, MIN_PERCENTAGE), MAX_PERCENTAGE);\n  const gapLength = (1 - truncatedPercentage / 100) * diameter;\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  };\n}\n\nexport default Path;\n","import React from 'react';\nimport {\n  VIEWBOX_WIDTH,\n  VIEWBOX_HEIGHT,\n  VIEWBOX_HEIGHT_HALF,\n  VIEWBOX_CENTER_X,\n  VIEWBOX_CENTER_Y,\n} from './constants';\nimport Path from './Path';\n\ntype CircularProgressbarDefaultProps = {\n  strokeWidth: number;\n  className: string;\n  text: string;\n  background: boolean;\n  backgroundPadding: number;\n  initialAnimation: boolean;\n  counterClockwise: boolean;\n  circleRatio: number;\n  classes: {\n    root: string;\n    trail: string;\n    path: string;\n    text: string;\n    background: string;\n  };\n  styles: {\n    root?: object;\n    trail?: object;\n    path?: object;\n    text?: object;\n    background?: object;\n  };\n};\n\ntype CircularProgressbarProps = CircularProgressbarDefaultProps & {\n  percentage: number;\n};\n\ntype CircularProgressbarState = {\n  percentage: number;\n};\n\nclass CircularProgressbar extends React.Component<\n  CircularProgressbarProps,\n  CircularProgressbarState\n> {\n  initialTimeout: number | undefined = undefined;\n  requestAnimationFrame: number | undefined = undefined;\n\n  static defaultProps: CircularProgressbarDefaultProps = {\n    strokeWidth: 8,\n    className: '',\n    text: '',\n    background: false,\n    backgroundPadding: 0,\n    initialAnimation: false,\n    counterClockwise: false,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n  };\n\n  constructor(props: CircularProgressbarProps) {\n    super(props);\n\n    this.state = {\n      percentage: props.initialAnimation ? 0 : props.percentage,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.initialAnimation) {\n      this.initialTimeout = window.setTimeout(() => {\n        this.requestAnimationFrame = window.requestAnimationFrame(() => {\n          this.setState({\n            percentage: this.props.percentage,\n          });\n        });\n      }, 0);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: CircularProgressbarProps) {\n    this.setState({\n      percentage: nextProps.percentage,\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.initialTimeout);\n    if (this.requestAnimationFrame) {\n      window.cancelAnimationFrame(this.requestAnimationFrame);\n    }\n  }\n\n  getBackgroundPadding() {\n    if (this.props.background) {\n      // Default padding to be the same as strokeWidth\n      // Compare to null because 0 is falsy\n      if (this.props.backgroundPadding == null) {\n        return this.props.strokeWidth;\n      }\n      return this.props.backgroundPadding;\n    }\n    // Don't add padding if not displaying background\n    return 0;\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  }\n\n  render() {\n    const {\n      className,\n      classes,\n      counterClockwise,\n      percentage,\n      styles,\n      strokeWidth,\n      text,\n      circleRatio,\n    } = this.props;\n\n    const pathRadius = this.getPathRadius();\n\n    return (\n      <svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n      >\n        {this.props.background ? (\n          <circle\n            className={classes.background}\n            style={styles.background}\n            cx={VIEWBOX_CENTER_X}\n            cy={VIEWBOX_CENTER_Y}\n            r={VIEWBOX_HEIGHT_HALF}\n          />\n        ) : null}\n\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          pathRadius={pathRadius}\n          percentage={100 * circleRatio}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          pathRadius={pathRadius}\n          percentage={percentage * circleRatio}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text\n            className={classes.text}\n            style={styles.text}\n            x={VIEWBOX_CENTER_X}\n            y={VIEWBOX_CENTER_Y}\n          >\n            {text}\n          </text>\n        ) : null}\n      </svg>\n    );\n  }\n}\n\nexport default CircularProgressbar;\n"]},"metadata":{},"sourceType":"module"}