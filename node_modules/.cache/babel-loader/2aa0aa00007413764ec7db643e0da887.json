{"ast":null,"code":"/*\n{\n            \"result\": {\n                \"fields\": [],\n                \"key\": {\n                    \"developer_key\": {\n                        \"name\": \"1000 Realities\"\n                    },\n                    \"name\": \"ThousandRealitiesApp\",\n                    \"version\": \"1.0\"\n                },\n                \"image_path\": \"registry.mobiledgex.net:5000/1000realities/1000realitiesapp\",\n                \"image_type\": \"ImageTypeDocker\",\n                \"ip_access\": \"IpAccessDedicatedOrShared\",\n                \"access_ports\": \"udp:8888,tcp:8889,tcp:8890\",\n                \"config\": \"\",\n                \"default_flavor\": {\n                    \"name\": \"x1.small\"\n                },\n                \"cluster\": {\n                    \"name\": \"mexdemo-app-cluster\"\n                },\n                \"app_template\": \"\",\n                \"auth_public_key\": \"\",\n                \"command\": \"\",\n                \"annotations\": \"\",\n                \"deployment\": \"kubernetes\",\n                \"deployment_manifest\": \"apiVersion: v1\\nkind: Service\\nmetadata:\\n  name: thousandrealitiesapp-tcp\\n  labels:\\n    run: thousandrealitiesapp\\nspec:\\n  type: LoadBalancer\\n  ports:\\n  - name: tcp8889\\n    protocol: TCP\\n    port: 8889\\n    targetPort: 8889\\n  - name: tcp8890\\n    protocol: TCP\\n    port: 8890\\n    targetPort: 8890\\n  selector:\\n    run: thousandrealitiesapp\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: thousandrealitiesapp-udp\\n  labels:\\n    run: thousandrealitiesapp\\nspec:\\n  type: LoadBalancer\\n  ports:\\n  - name: udp8888\\n    protocol: UDP\\n    port: 8888\\n    targetPort: 8888\\n  selector:\\n    run: thousandrealitiesapp\\n---\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: thousandrealitiesapp-deployment\\nspec:\\n  selector:\\n    matchLabels:\\n      run: thousandrealitiesapp\\n  replicas: 1\\n  template:\\n    metadata:\\n      labels:\\n        run: thousandrealitiesapp\\n    spec:\\n      volumes:\\n      imagePullSecrets:\\n      - name: mexregistrysecret\\n      containers:\\n      - name: thousandrealitiesapp\\n        image: registry.mobiledgex.net:5000/1000realities/1000realitiesapp\\n        imagePullPolicy: Always\\n        ports:\\n        - containerPort: 8888\\n          protocol: UDP\\n        - containerPort: 8889\\n          protocol: TCP\\n        - containerPort: 8890\\n          protocol: TCP\\n\",\n                \"deployment_generator\": \"kubernetes-basic\",\n                \"android_package_name\": \"\",\n                \"permits_platform_apps\": false,\n                \"del_opt\": \"NoAutoDelete\"\n            }\n        }\n//\n\n */\nimport * as moment from 'moment';\nimport * as d3 from 'd3';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n\nvar generateData = function generateData(datas) {\n  console.log('format application ......................data - ', datas);\n  var result = datas;\n  var values = [];\n  var formatMB = d3.format('.0f');\n\n  if (result) {\n    result.map(function (data, i) {\n      console.log('...', data);\n      data.series.map(function (obj) {\n        obj.values.map(function (value, j) {\n          if (j === 5) {\n            console.log('before format --->', value[5]);\n            value[5] = formatMB(value[5]);\n            console.log('after format --->', value[5]);\n          }\n        });\n      });\n    });\n  } else {\n    console.log('there is no result');\n  } //ascending or descending\n  //values.sort(numberDes);\n  //values.reverse();\n\n\n  console.log('format application ....after format........data - ', datas);\n  values = datas;\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatApplicationInfo = function FormatApplicationInfo(props) {\n  return generateData(props);\n};\n\nexport default FormatApplicationInfo;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/services/formatter/formatApplicationInfo.js"],"names":["moment","d3","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","generateData","console","log","result","values","formatMB","map","data","i","series","obj","value","j","retunDate","str","year","substring","month","day","hour","minute","date","Date","FormatApplicationInfo","props"],"mappings":"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","sourcesContent":["/*\n{\n            \"result\": {\n                \"fields\": [],\n                \"key\": {\n                    \"developer_key\": {\n                        \"name\": \"1000 Realities\"\n                    },\n                    \"name\": \"ThousandRealitiesApp\",\n                    \"version\": \"1.0\"\n                },\n                \"image_path\": \"registry.mobiledgex.net:5000/1000realities/1000realitiesapp\",\n                \"image_type\": \"ImageTypeDocker\",\n                \"ip_access\": \"IpAccessDedicatedOrShared\",\n                \"access_ports\": \"udp:8888,tcp:8889,tcp:8890\",\n                \"config\": \"\",\n                \"default_flavor\": {\n                    \"name\": \"x1.small\"\n                },\n                \"cluster\": {\n                    \"name\": \"mexdemo-app-cluster\"\n                },\n                \"app_template\": \"\",\n                \"auth_public_key\": \"\",\n                \"command\": \"\",\n                \"annotations\": \"\",\n                \"deployment\": \"kubernetes\",\n                \"deployment_manifest\": \"apiVersion: v1\\nkind: Service\\nmetadata:\\n  name: thousandrealitiesapp-tcp\\n  labels:\\n    run: thousandrealitiesapp\\nspec:\\n  type: LoadBalancer\\n  ports:\\n  - name: tcp8889\\n    protocol: TCP\\n    port: 8889\\n    targetPort: 8889\\n  - name: tcp8890\\n    protocol: TCP\\n    port: 8890\\n    targetPort: 8890\\n  selector:\\n    run: thousandrealitiesapp\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: thousandrealitiesapp-udp\\n  labels:\\n    run: thousandrealitiesapp\\nspec:\\n  type: LoadBalancer\\n  ports:\\n  - name: udp8888\\n    protocol: UDP\\n    port: 8888\\n    targetPort: 8888\\n  selector:\\n    run: thousandrealitiesapp\\n---\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: thousandrealitiesapp-deployment\\nspec:\\n  selector:\\n    matchLabels:\\n      run: thousandrealitiesapp\\n  replicas: 1\\n  template:\\n    metadata:\\n      labels:\\n        run: thousandrealitiesapp\\n    spec:\\n      volumes:\\n      imagePullSecrets:\\n      - name: mexregistrysecret\\n      containers:\\n      - name: thousandrealitiesapp\\n        image: registry.mobiledgex.net:5000/1000realities/1000realitiesapp\\n        imagePullPolicy: Always\\n        ports:\\n        - containerPort: 8888\\n          protocol: UDP\\n        - containerPort: 8889\\n          protocol: TCP\\n        - containerPort: 8890\\n          protocol: TCP\\n\",\n                \"deployment_generator\": \"kubernetes-basic\",\n                \"android_package_name\": \"\",\n                \"permits_platform_apps\": false,\n                \"del_opt\": \"NoAutoDelete\"\n            }\n        }\n//\n\n */\n\n\nimport * as moment from 'moment';\nimport * as d3 from 'd3';\n\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n\nlet generateData = (datas) => {\n    console.log('format application ......................data - ', datas)\n    let result = datas;\n    let values = [];\n    let formatMB = d3.format('.0f')\n    if(result){\n        result.map((data, i) => {\n            console.log('...', data)\n            data.series.map((obj) => {\n                obj.values.map((value, j)=>{\n                    if(j === 5){\n                        console.log('before format --->', value[5])\n                        value[5] = formatMB(value[5])\n                        console.log('after format --->', value[5])\n                    }\n                })\n            })\n        })\n\n    } else {\n        console.log('there is no result')\n    }\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    //values.reverse();\n    console.log('format application ....after format........data - ', datas)\n    values = datas\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatApplicationInfo = (props) => (\n    generateData(props)\n)\n\nexport default FormatApplicationInfo;\n"]},"metadata":{},"sourceType":"module"}