{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/registryInstViewer.js\";\nimport React from 'react';\nimport { Header, Button, Table, Icon, Input, Tab, Item } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport PopDetailViewer from './popDetailViewer';\nimport PopUserViewer from './popUserViewer';\nimport PopAddUserViewer from './popAddUserViewer';\nimport './styles.css';\nimport ContainerDimensions from 'react-container-dimensions';\nimport _ from \"lodash\";\nimport * as reducer from '../utils';\nimport MaterialIcon from \"material-icons-react\";\nimport * as services from '../services/service_compute_service';\nimport SiteFourCreateFormAppInstDefault from \"./siteFourCreateFormAppInstDefault\";\nimport Alert from \"react-s-alert\";\nimport { withRouter } from \"react-router-dom\";\nvar ReactGridLayout = WidthProvider(RGL);\nvar headerStyle = {\n  backgroundImage: 'url()'\n};\nvar horizon = 6;\nvar vertical = 20;\nvar layout = [{\n  \"w\": 19,\n  \"h\": 20,\n  \"x\": 0,\n  \"y\": 0,\n  \"i\": \"0\",\n  \"minW\": 5,\n  \"minH\": 5,\n  \"moved\": false,\n  \"static\": false,\n  \"title\": \"Developer\"\n}];\nvar _self = null;\nvar colors = ['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'grey'];\nvar panes = [{\n  menuItem: 'App Instance Deployment',\n  render: function render(props) {\n    return React.createElement(Tab.Pane, {\n      style: {\n        overflow: 'auto'\n      },\n      attached: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(SiteFourCreateFormAppInstDefault, {\n      data: props,\n      pId: 0,\n      getUserRole: props.userrole,\n      gotoUrl: props.gotoUrl,\n      toggleSubmit: props.toggleSubmit,\n      validError: props.error,\n      autoClusterDisable: props.autoClusterDisable,\n      onSubmit: props.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n  }\n} // { menuItem: 'Docker deployment', render: () => <Tab.Pane  attached={false} pId={1}>None</Tab.Pane> },\n// { menuItem: 'VM deployment', render: () => <Tab.Pane attached={false} pId={2}>None</Tab.Pane> }\n];\n\nvar RegistryInstViewer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RegistryInstViewer, _React$Component);\n\n  function RegistryInstViewer(props) {\n    var _this;\n\n    _classCallCheck(this, RegistryInstViewer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegistryInstViewer).call(this, props));\n\n    _this.receiveResultCloudlet = function (result) {\n      if (result.error) {} else {\n        var operatorGroup = reducer.groupBy(result, 'Operator'); //let cloudletGroup = reducer.groupBy(result, 'CloudletName')\n\n        var keys = Object.keys(operatorGroup);\n        var assObj = Object.assign([], _this.state.keysData);\n\n        if (result[0].Operator) {\n          assObj[0].Operator.items = keys;\n        } else {\n          assObj[0].Operator.items = [];\n        }\n\n        _this.setState({\n          keysData: assObj,\n          operators: operatorGroup\n        });\n      } // set list of operators\n\n\n      if (_this.props.devData.length > 0) {\n        _this.setState({\n          dummyData: _this.props.devData,\n          resultData: !_this.state.resultData ? _this.props.devData : _this.state.resultData\n        });\n      } else {\n        _this.setState({\n          dummyData: _this.state.fakeData,\n          resultData: !_this.state.resultData ? _this.props.devData : _this.state.resultData\n        });\n      }\n\n      _this.props.handleLoadingSpinner(false);\n    };\n\n    _this.receiveResultApp = function (result) {\n      if (result.error) {\n        _this.props.handleAlertInfo('error', String(result.error));\n      } else {\n        var appGroup = reducer.groupBy(result, 'OrganizationName');\n        var keys = Object.keys(appGroup);\n        var assObj = Object.assign([], _this.state.keysData);\n        assObj[0].DeveloperName.items = keys;\n\n        _this.setState({\n          keysData: assObj,\n          apps: appGroup\n        });\n\n        _this.props.handleLoadingSpinner(false);\n      }\n    };\n\n    _this.receiveResultClusterInst = function (result) {\n      if (result.error) {\n        _this.props.handleAlertInfo('error', String(result.error));\n      } else {\n        console.log('20191119 cluster result..', result);\n        var clinstGroup = reducer.groupBy(result, 'ClusterName');\n        var cloudletGroup = reducer.groupBy(result, 'Cloudlet'); //let operatorGroup = reducer.groupBy(result, 'Operator')\n        //let keys = Object.keys(operatorGroup);\n        //let assObj = Object.assign([], this.state.keysData);\n        //assObj[0].Operator.items = keys;\n\n        _this.setState({\n          clustinst: clinstGroup,\n          cloudlets: cloudletGroup\n        });\n      } // set list of operators\n\n\n      if (_this.props.devData.length > 0) {\n        _this.setState({\n          dummyData: _this.props.devData,\n          resultData: !_this.state.resultData ? _this.props.devData : _this.state.resultData\n        });\n      } else {\n        _this.setState({\n          dummyData: _this.state.fakeData,\n          resultData: !_this.state.resultData ? _this.props.devData : _this.state.resultData\n        });\n      }\n    };\n\n    _this.receiveResult = function (result, body) {\n      console.log(\"20191119 resultresultxxresult\", result);\n      /* code by inki : block this for not use tempfile.\n      setTimeout(() => {\n          services.errorTempFile(result.data, this.receiveStatusData)\n      }, 3000);\n      */\n      //TODO: inki 20191129 : request call streamTemp data from server..\n\n      _self.props.handleLoadingSpinner(false);\n\n      if (result.data.error) {\n        _this.setState({\n          regSuccess: false\n        });\n\n        _this.props.handleAlertInfo('error', result.data.error);\n\n        return;\n      } else {\n        // let toArray = result.data.split('\\n')\n        // toArray.pop();\n        // let toJson = toArray.map((str)=>(JSON.parse(str)))\n        //\n        // toJson.map((item) => {\n        //     if(item.result && item.result.code == 400){\n        //         this.props.handleAlertInfo('error',item.result.message)\n        //         return\n        //     } else {\n        //         this.props.handleAlertInfo('success','Your application instance created successfully')\n        //     }\n        // })\n        if (result && result.code == 400) {\n          _this.props.handleAlertInfo('error', result.message);\n\n          return;\n        } else {//this.props.handleAlertInfo('success','Your application instance created successfully')\n        }\n\n        setTimeout(function () {\n          _this.gotoUrl('submit');\n        }, 3000);\n      }\n    };\n\n    _this.show = function (dim) {\n      return _this.setState({\n        dimmer: dim,\n        openDetail: true\n      });\n    };\n\n    _this.close = function () {\n      _this.setState({\n        open: false\n      });\n\n      _this.props.handleInjectDeveloper(null);\n    };\n\n    _this.closeDetail = function () {\n      _this.setState({\n        openDetail: false\n      });\n    };\n\n    _this.closeUser = function () {\n      _this.setState({\n        openUser: false\n      });\n    };\n\n    _this.closeAddUser = function () {\n      _this.setState({\n        openAdd: false\n      });\n    };\n\n    _this.receiveStatusData = function (result) {\n      console.log(\"20191119 resultresultss\", result);\n      var toArray = null;\n      var toJson = null;\n      toArray = result.data.split('\\n');\n      toArray.pop();\n      toJson = toArray.map(function (str) {\n        return JSON.parse(str);\n      });\n      console.log(\"toJsontoJson\", toJson);\n\n      _this.props.handleLoadingSpinner(false);\n\n      toJson.map(function (item) {\n        if (item.result && item.result.code == 400) {\n          console.log(\"item.result\", item.result.message);\n\n          _this.setState({\n            regSuccess: false\n          });\n\n          _this.props.handleAlertInfo('error', item.result.message);\n        }\n      });\n\n      if (_this.state.regSuccess) {\n        _this.gotoUrl('submit');\n      }\n    };\n\n    _self = _assertThisInitialized(_this);\n\n    var layout = _this.generateLayout();\n\n    _this.state = {\n      layout: layout,\n      open: false,\n      openAdd: false,\n      openDetail: false,\n      dimmer: false,\n      activeItem: '',\n      dummyData: [],\n      detailViewData: null,\n      selected: {},\n      openUser: false,\n      orgData: {},\n      selectUse: null,\n      resultData: null,\n      cloudlets: [],\n      operators: {},\n      clustinst: [],\n      apps: {},\n      versions: {},\n      toggleSubmit: false,\n      validateError: [],\n      regSuccess: true,\n      autoClusterDisable: false,\n      keysData: [{\n        'Region': {\n          label: 'Region',\n          type: 'RenderSelect',\n          necessary: true,\n          tip: 'Select region where you want to deploy.',\n          disable: Object.keys(_this.props.appLaunch).length == 0 ? true : false,\n          active: true,\n          items: []\n        },\n        'DeveloperName': {\n          label: 'Organization Name',\n          type: Object.keys(_this.props.appLaunch).length == 0 ? 'RenderSelect' : '',\n          disable: Object.keys(_this.props.appLaunch).length == 0 ? true : false,\n          necessary: true,\n          tip: 'The name of the organization you are currently managing.',\n          active: true,\n          items: [null]\n        },\n        'AppName': {\n          label: 'App Name',\n          type: Object.keys(_this.props.appLaunch).length == 0 ? 'RenderSelect' : '',\n          disable: Object.keys(_this.props.appLaunch).length == 0 ? true : false,\n          necessary: true,\n          tip: 'The name of the application to deploy.',\n          active: true,\n          items: [null]\n        },\n        'Version': {\n          label: 'App Version',\n          type: Object.keys(_this.props.appLaunch).length == 0 ? 'RenderSelect' : '',\n          disable: Object.keys(_this.props.appLaunch).length == 0 ? true : false,\n          necessary: true,\n          tip: 'The version of the application to deploy.',\n          active: true,\n          items: [null]\n        },\n        'Operator': {\n          label: 'Operator',\n          type: 'RenderSelect',\n          necessary: true,\n          tip: 'Which operator do you want to deploy this applicaton? Please select one.',\n          active: true,\n          items: [null]\n        },\n        'Cloudlet': {\n          label: 'Cloudlet',\n          type: 'RenderDropDown',\n          necessary: true,\n          tip: 'Which cloudlet(s) do you want to deploy this application?',\n          active: true,\n          items: [null]\n        },\n        'AutoClusterInst': {\n          label: 'Auto Cluster Instance',\n          type: 'RenderCheckbox',\n          necessary: false,\n          tip: 'If you have yet to create a cluster, you can select this to auto create cluster instance.'\n        },\n        'ClusterInst': {\n          label: 'Cluster Instance',\n          type: 'RenderClusterDisabled',\n          necessary: true,\n          tip: 'Name of cluster instance to deploy this application.',\n          active: true,\n          items: [null]\n        }\n      }, {}],\n      fakeData: [{\n        'Region': 'US',\n        'DeveloperName': '',\n        'AppName': '',\n        'Version': '',\n        'Operator': '',\n        'Cloudlet': '',\n        'AutoClusterInst': false,\n        'ClusterInst': ''\n      }],\n      editMode: false\n    };\n    return _this;\n  }\n\n  _createClass(RegistryInstViewer, [{\n    key: \"onHandleClick\",\n    value: function onHandleClick(dim, data) {\n      this.setState({\n        dimmer: dim,\n        open: true,\n        selected: data\n      }); //this.props.handleChangeSite(data.children.props.to)\n    }\n  }, {\n    key: \"onHandleClicAdd\",\n    value: function onHandleClicAdd(dim, data) {\n      this.setState({\n        dimmer: dim,\n        openAdd: true,\n        selected: data\n      }); //this.props.handleChangeSite(data.children.props.to)\n    }\n  }, {\n    key: \"getDataDeveloper\",\n    value: function getDataDeveloper(token, _region) {\n      var _this2 = this;\n\n      services.getMCService('ShowApps', {\n        token: token,\n        region: _region\n      }, this.receiveResultApp);\n      setTimeout(function () {\n        return services.getMCService('ShowCloudlet', {\n          token: token,\n          region: _region\n        }, _this2.receiveResultCloudlet);\n      }, 200);\n      setTimeout(function () {\n        return services.getMCService('ShowClusterInst', {\n          token: token,\n          region: _region\n        }, _this2.receiveResultClusterInst);\n      }, 400);\n    }\n  }, {\n    key: \"gotoUrl\",\n    value: function gotoUrl(msg) {\n      var pg = 'pg=6';\n      var pgname = '';\n\n      if (_self.props.location.goBack && msg !== 'submit') {\n        pg = 'pg=5';\n        localStorage.setItem('selectMenu', 'Apps');\n      } else {\n        localStorage.setItem('selectMenu', 'App Instances');\n      }\n\n      _self.props.history.push({\n        pathname: '/site4',\n        search: pg\n      });\n\n      _self.props.history.location.search = pg;\n      console.log('20191119 pgnameData --- ', _self.props.submitData, \":  submitValues=\", _self.props.submitValues);\n\n      if (_self.props.submitData.createAppFormDefault.values && _self.props.submitData.createAppFormDefault.values.AutoClusterInst) {\n        _self.props.history.location.pgname = 'appinst';\n        _self.props.history.location.pgnameData = {\n          AppName: _self.props.submitData.createAppFormDefault.values.AppName,\n          Operator: _self.props.submitData.createAppFormDefault.values.Operator,\n          Cloudlet: _self.props.submitData.createAppFormDefault.values.Cloudlet[0],\n          ClusterInst: 'autocluster' + _self.props.submitData.createAppFormDefault.values.AppName.replace(/(\\s*)/g, \"\"),\n          State: 3\n        };\n      }\n\n      _self.props.handleChangeSite({\n        mainPath: '/site4',\n        subPath: pg\n      });\n    }\n  }, {\n    key: \"generateDOM\",\n    value: function generateDOM(open, dimmer, data, keysData, hideHeader) {\n      var _this3 = this;\n\n      var panelParams = {\n        data: data,\n        keys: keysData,\n        userrole: localStorage.selectRole,\n        editMode: this.state.editMode,\n        editData: this.props.editData\n      };\n      return layout.map(function (item, i) {\n        return i === 0 ? React.createElement(\"div\", {\n          className: \"round_panel\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"grid_table\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }, React.createElement(Tab, Object.assign({\n          className: \"grid_tabs\",\n          menu: {\n            secondary: true,\n            pointing: true,\n            inverted: true,\n            attached: false,\n            tabular: false\n          },\n          panes: panes\n        }, panelParams, {\n          gotoUrl: _this3.gotoUrl,\n          toggleSubmit: _this3.state.toggleSubmit,\n          error: _this3.state.validateError,\n          autoClusterDisable: _this3.state.autoClusterDisable,\n          onSubmit: _this3.onSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290\n          },\n          __self: this\n        })))) : React.createElement(\"div\", {\n          className: \"round_panel\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"generateLayout\",\n    value: function generateLayout() {\n      var p = this.props;\n      return layout;\n    }\n  }, {\n    key: \"onLayoutChange\",\n    value: function onLayoutChange(layout) {//this.props.onLayoutChange(layout);\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit() {\n      _self.props.handleSubmitInfo('submitAction');\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null; //if(store && store.userToken) this.getDataDeveloper(store.userToken,'US');\n\n      /************\n       * set Organization Name\n       * **********/\n\n      var assObj = Object.assign([], this.state.fakeData);\n      assObj[0].DeveloperName = localStorage.selectOrg;\n\n      if (Object.keys(this.props.appLaunch).length > 0) {\n        assObj[0].Region = this.props.appLaunch.Region;\n        assObj[0].AppName = this.props.appLaunch.AppName;\n        assObj[0].Version = this.props.appLaunch.Version;\n        assObj[0].DeveloperName = this.props.appLaunch.OrganizationName;\n      }\n\n      this.setState({\n        fakeData: assObj\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this4 = this;\n\n      if (nextProps.accountInfo) {\n        this.setState({\n          dimmer: 'blurring',\n          open: true\n        });\n      }\n\n      if (nextProps.devData.length > 1) {\n        this.setState({\n          dummyData: nextProps.devData,\n          resultData: !this.state.resultData ? nextProps.devData : this.state.resultData\n        });\n      } else {\n        this.setState({\n          dummyData: this.state.fakeData,\n          resultData: !this.state.resultData ? nextProps.devData : this.state.resultData\n        });\n      }\n\n      if (nextProps.regionInfo.region.length) {\n        var assObj = Object.assign([], this.state.keysData);\n        assObj[0].Region.items = nextProps.regionInfo.region;\n      }\n\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n      this.setState({\n        toggleSubmit: false\n      });\n\n      if (nextProps.submitValues && !this.state.toggleSubmit) {\n        var apps = ['Region', 'DeveloperName', 'AppName', 'Version', 'Operator', 'Cloudlet', 'ClusterInst'];\n\n        if (nextProps.formAppInst.values.AutoClusterInst || this.state.autoClusterDisable) {\n          apps.pop();\n        }\n\n        var error = [];\n        apps.map(function (item) {\n          if (!nextProps.validateValue[item]) {\n            error.push(item);\n          }\n        });\n\n        if (nextProps.formAppInst.submitSucceeded && error.length == 0) {\n          var submitData = nextProps.submitValues;\n          console.log('20191119 filtered cloudlet...', submitData, \" state.cloudelts=\", this.state.cloudlets);\n          /*\n            */\n\n          this.props.handleSubmitObject(submitData);\n          this.setState({\n            toggleSubmit: true,\n            validateError: error,\n            regSuccess: true\n          });\n          this.props.handleLoadingSpinner(true);\n          services.createNewMultiAppInst('CreateAppInst', {\n            params: submitData,\n            token: store ? store.userToken : 'null'\n          }, _self.receiveResult, nextProps.validateValue, this.state.cloudlets, this.state.autoClusterDisable);\n        } else {\n          this.setState({\n            validateError: error,\n            toggleSubmit: true\n          });\n        }\n      }\n      /************\n       * set list of Region\n       * **********/\n\n\n      if (nextProps.selectedRegion && nextProps.selectedRegion !== this.props.selectedRegion) {\n        console.log(\"nextProps.selectedRegionnextProps.selectedRegion\", nextProps.selectedRegion, \":::\", this.props.selectedRegion);\n        this.getDataDeveloper(store ? store.userToken : 'null', nextProps.formAppInst.values.Region);\n      }\n      /************\n       * set list of cloudlet\n       * **********/\n\n\n      if (nextProps.selectedOperator && this.state.operators[nextProps.selectedOperator]) {\n        var _assObj = Object.assign([], this.state.keysData);\n\n        _assObj[0].Cloudlet.items = [];\n        _assObj[0].ClusterInst.items = [];\n        _assObj[0].Cloudlet.items = this.state.operators[nextProps.selectedOperator].map(function (cld) {\n          return cld.CloudletName;\n        });\n        _assObj[0].Cloudlet.items = reducer.removeDuplicate(_assObj[0].Cloudlet.items);\n        this.setState({\n          keysData: _assObj\n        });\n      }\n      /************\n       * set list of Organization\n       * **********/\n\n\n      if (nextProps.selectedOrgName && this.state.apps[nextProps.selectedOrgName]) {\n        if (Object.keys(this.props.appLaunch).length == 0) {\n          var _assObj2 = Object.assign([], this.state.keysData);\n\n          _assObj2[0].AppName.items = this.state.apps[nextProps.selectedOrgName].map(function (cld) {\n            return cld.AppName;\n          });\n          this.setState({\n            keysData: _assObj2\n          });\n          var appGroup = reducer.groupBy(this.state.apps[nextProps.selectedOrgName], 'AppName');\n          this.setState({\n            versions: appGroup\n          });\n        }\n      }\n      /************\n       * set list of version\n       * **********/\n\n\n      if (nextProps.selectedApp && this.state.versions[nextProps.selectedApp]) {\n        if (Object.keys(this.props.appLaunch).length == 0) {\n          var _assObj3 = Object.assign([], this.state.keysData);\n\n          _assObj3[0].Version.items = this.state.versions[nextProps.selectedApp].map(function (cld) {\n            return cld.Version;\n          });\n          this.setState({\n            keysData: _assObj3\n          });\n        }\n      }\n\n      if (nextProps.selectedVersion && this.state.versions[nextProps.selectedApp]) {\n        if (Object.keys(this.state.versions).length !== 0 && this.state.versions[nextProps.selectedApp][0].DeploymentType === 'vm') {\n          this.setState({\n            autoClusterDisable: true\n          });\n        } else if (Object.keys(this.state.versions).length !== 0) {\n          this.setState({\n            autoClusterDisable: false\n          });\n        }\n\n        if (Object.keys(nextProps.appLaunch).length !== 0) {\n          if (nextProps.appLaunch.DeploymentType === 'vm') {\n            this.setState({\n              autoClusterDisable: true\n            });\n          } else {\n            this.setState({\n              autoClusterDisable: false\n            });\n          }\n        }\n      } //set list of clusterInst filter\n\n\n      if (Object.keys(nextProps.submitData).length > 0) {\n        if (nextProps.submitData.createAppFormDefault && nextProps.submitData.createAppFormDefault.values.Operator && nextProps.submitData.createAppFormDefault.values.Cloudlet) {\n          var keys = Object.keys(this.state.clustinst);\n          var arr = [];\n\n          var _assObj4 = Object.assign([], this.state.keysData);\n\n          console.log(\"20191119 dfdfdfdgsgsdg\", nextProps.submitData.createAppFormDefault.values.Cloudlet);\n          keys.map(function (item, i) {\n            _this4.state.clustinst[item].map(function (items, j) {\n              nextProps.submitData.createAppFormDefault.values.Cloudlet.map(function (cItem) {\n                if (cItem == items.Cloudlet && nextProps.submitData.createAppFormDefault.values.DeveloperName == items.OrganizationName) {\n                  arr.push(item);\n                }\n              });\n            });\n          });\n          arr = reducer.removeDuplicate(arr);\n          _assObj4[0].ClusterInst.items = arr;\n          this.setState({\n            keysData: _assObj4\n          });\n        }\n      }\n\n      if (nextProps.editMode) this.setState({\n        editMode: nextProps.editMode\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.handleAppLaunch({});\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          open = _this$state.open,\n          dimmer = _this$state.dimmer,\n          dummyData = _this$state.dummyData,\n          editMode = _this$state.editMode;\n      var hiddenKeys = this.props.hiddenKeys;\n      return React.createElement(\"div\", {\n        className: \"regis_container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      }, React.createElement(\"div\", Object.assign({\n        draggableHandle: true,\n        layout: this.state.layout,\n        onLayoutChange: this.onLayoutChange\n      }, this.props, {\n        useCSSTransforms: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494\n        },\n        __self: this\n      }), this.generateDOM(open, dimmer, dummyData, this.state.keysData, hiddenKeys)), React.createElement(PopDetailViewer, {\n        data: this.state.detailViewData,\n        dimmer: false,\n        open: this.state.openDetail,\n        close: this.closeDetail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }), React.createElement(PopUserViewer, {\n        data: this.state.detailViewData,\n        dimmer: false,\n        open: this.state.openUser,\n        close: this.closeUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        },\n        __self: this\n      }), React.createElement(PopAddUserViewer, {\n        data: this.state.selected,\n        dimmer: false,\n        open: this.state.openAdd,\n        close: this.closeAddUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return RegistryInstViewer;\n}(React.Component);\n/*\n{\n    \"region\":\"US\",\n    \"appinst\":\n    {\n        \"key\":{\n            \"app_key\":{\"developer_key\":{\"name\":\"bicinkiOrg\"},\"name\":\"myapp\",\"version\":\"1.0.0\"},\n            \"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"bonn-mexdemo\"}\n        },\n        \"cluster_inst_key\":{\n            \"cluster_key\":{\"name\":\"mexdemo-app-cluster\"},\n            \"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"bonn-mexdemo\"}\n        }\n    }\n}\n */\n\n\nRegistryInstViewer.defaultProps = {\n  className: \"layout\",\n  items: 20,\n  rowHeight: 30,\n  cols: 12,\n  width: 1600\n};\n\nvar createFormat = function createFormat(data) {\n  return {\n    \"region\": data['Region'],\n    \"appinst\": {\n      \"key\": {\n        \"app_key\": {\n          \"developer_key\": {\n            \"name\": data['DeveloperName']\n          },\n          \"name\": data['AppName'],\n          \"version\": data['Version']\n        },\n        \"cluster_inst_key\": {\n          \"cluster_key\": {\n            \"name\": data['ClusterInst']\n          },\n          \"cloudlet_key\": {\n            \"operator_key\": {\n              \"name\": data['Operator']\n            },\n            \"name\": data['Cloudlet']\n          }\n        }\n      }\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var account = state.registryAccount.account;\n  var dimm = state.btnMnmt;\n  var accountInfo = account ? account + Math.random() * 10000 : null;\n  var dimmInfo = dimm ? dimm : null;\n  var submitVal = null;\n  var selectedCloudlet = null;\n  var selectedOperator = null;\n  var selectedApp = null;\n  var selectedVersion = null;\n  var validateValue = null;\n  var selectedOrgName = null;\n  var selectedRegion = null; // alert(JSON.stringify(state.form.createAppFormDefault))\n\n  if (state.form.createAppFormDefault) {\n    if (state.form.createAppFormDefault.values.Cloudlet !== \"\") {\n      selectedCloudlet = state.form.createAppFormDefault.values.Cloudlet;\n    }\n\n    if (state.form.createAppFormDefault.values.Operator !== \"\") {\n      selectedOperator = state.form.createAppFormDefault.values.Operator;\n    }\n\n    if (state.form.createAppFormDefault.values.AppName !== \"\") {\n      selectedApp = state.form.createAppFormDefault.values.AppName;\n    }\n\n    if (state.form.createAppFormDefault.values.Version !== \"\") {\n      selectedVersion = state.form.createAppFormDefault.values.Version;\n    }\n\n    if (state.form.createAppFormDefault.values.DeveloperName !== \"\") {\n      selectedOrgName = state.form.createAppFormDefault.values.DeveloperName;\n    }\n\n    if (state.form.createAppFormDefault.values.Region !== \"\") {\n      selectedRegion = state.form.createAppFormDefault.values.Region;\n    }\n\n    if (state.form.createAppFormDefault.values && state.form.createAppFormDefault.submitSucceeded) {\n      var enableValue = reducer.filterDeleteKey(state.form.createAppFormDefault.values, 'Edit');\n      console.log('20191119 createformat ...', enableValue);\n      submitVal = createFormat(enableValue);\n      validateValue = state.form.createAppFormDefault.values;\n    }\n  }\n\n  var region = state.changeRegion ? {\n    value: state.changeRegion.region\n  } : {};\n  var formAppInst = state.form.createAppFormDefault ? {\n    values: state.form.createAppFormDefault.values,\n    submitSucceeded: state.form.createAppFormDefault.submitSucceeded\n  } : {};\n  var regionInfo = state.regionInfo ? state.regionInfo : null;\n  return {\n    accountInfo: accountInfo,\n    dimmInfo: dimmInfo,\n    itemLabel: state.computeItem.item,\n    userToken: state.user.userToken ? state.userToken : null,\n    submitValues: submitVal,\n    region: region.value,\n    selectedApp: selectedApp,\n    selectedVersion: selectedVersion,\n    selectedCloudlet: selectedCloudlet,\n    selectedOperator: selectedOperator,\n    selectOrg: state.selectOrg.org ? state.selectOrg.org : null,\n    submitData: state.form ? state.form : null,\n    userRole: state.showUserRole ? state.showUserRole.role : null,\n    appLaunch: state.appLaunch ? state.appLaunch.data : null,\n    validateValue: validateValue,\n    formAppInst: formAppInst,\n    selectedOrgName: selectedOrgName,\n    selectedRegion: selectedRegion,\n    editData: state.editInstance.data,\n    regionInfo: regionInfo\n  }; // return (dimm) ? {\n  //     dimmInfo : dimm\n  // } : (account)? {\n  //     accountInfo: account + Math.random()*10000\n  // } : null;\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleChangeSite: function handleChangeSite(data) {\n      dispatch(actions.changeSite(data));\n    },\n    handleInjectDeveloper: function handleInjectDeveloper(data) {\n      dispatch(actions.registDeveloper(data));\n    },\n    handleLoadingSpinner: function handleLoadingSpinner(data) {\n      dispatch(actions.loadingSpinner(data));\n    },\n    handleAppLaunch: function handleAppLaunch(data) {\n      dispatch(actions.appLaunch(data));\n    },\n    handleAlertInfo: function handleAlertInfo(mode, msg) {\n      dispatch(actions.alertInfo(mode, msg));\n    },\n    handleSubmitInfo: function handleSubmitInfo(data) {\n      dispatch(actions.submitInfo(data));\n    },\n    handleSubmitObject: function handleSubmitObject(data) {\n      dispatch(actions.submitObj(data));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(RegistryInstViewer));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/registryInstViewer.js"],"names":["React","Header","Button","Table","Icon","Input","Tab","Item","connect","actions","RGL","WidthProvider","PopDetailViewer","PopUserViewer","PopAddUserViewer","ContainerDimensions","_","reducer","MaterialIcon","services","SiteFourCreateFormAppInstDefault","Alert","withRouter","ReactGridLayout","headerStyle","backgroundImage","horizon","vertical","layout","_self","colors","panes","menuItem","render","props","overflow","userrole","gotoUrl","toggleSubmit","error","autoClusterDisable","onSubmit","RegistryInstViewer","receiveResultCloudlet","result","operatorGroup","groupBy","keys","Object","assObj","assign","state","keysData","Operator","items","setState","operators","devData","length","dummyData","resultData","fakeData","handleLoadingSpinner","receiveResultApp","handleAlertInfo","String","appGroup","DeveloperName","apps","receiveResultClusterInst","console","log","clinstGroup","cloudletGroup","clustinst","cloudlets","receiveResult","body","data","regSuccess","code","message","setTimeout","show","dim","dimmer","openDetail","close","open","handleInjectDeveloper","closeDetail","closeUser","openUser","closeAddUser","openAdd","receiveStatusData","toArray","toJson","split","pop","map","str","JSON","parse","item","generateLayout","activeItem","detailViewData","selected","orgData","selectUse","versions","validateError","label","type","necessary","tip","disable","appLaunch","active","editMode","token","_region","getMCService","region","msg","pg","pgname","location","goBack","localStorage","setItem","history","push","pathname","search","submitData","submitValues","createAppFormDefault","values","AutoClusterInst","pgnameData","AppName","Cloudlet","ClusterInst","replace","State","handleChangeSite","mainPath","subPath","hideHeader","panelParams","selectRole","editData","i","secondary","pointing","inverted","attached","tabular","p","handleSubmitInfo","store","PROJECT_INIT","selectOrg","Region","Version","OrganizationName","nextProps","nextContext","accountInfo","regionInfo","formAppInst","validateValue","submitSucceeded","handleSubmitObject","createNewMultiAppInst","params","userToken","selectedRegion","getDataDeveloper","selectedOperator","cld","CloudletName","removeDuplicate","selectedOrgName","selectedApp","selectedVersion","DeploymentType","arr","j","cItem","handleAppLaunch","hiddenKeys","onLayoutChange","generateDOM","Component","defaultProps","className","rowHeight","cols","width","createFormat","mapStateToProps","account","registryAccount","dimm","btnMnmt","Math","random","dimmInfo","submitVal","selectedCloudlet","form","enableValue","filterDeleteKey","changeRegion","value","itemLabel","computeItem","user","org","userRole","showUserRole","role","editInstance","mapDispatchProps","dispatch","changeSite","registDeveloper","loadingSpinner","mode","alertInfo","submitInfo","submitObj"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Header, Button, Table, Icon, Input, Tab, Item} from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\n\nimport PopDetailViewer from './popDetailViewer';\nimport PopUserViewer from './popUserViewer';\nimport PopAddUserViewer from './popAddUserViewer';\nimport './styles.css';\nimport ContainerDimensions from 'react-container-dimensions'\nimport _ from \"lodash\";\nimport * as reducer from '../utils'\nimport MaterialIcon from \"material-icons-react\";\nimport * as services from '../services/service_compute_service';\nimport SiteFourCreateFormAppInstDefault from \"./siteFourCreateFormAppInstDefault\";\nimport Alert from \"react-s-alert\";\nimport {withRouter} from \"react-router-dom\";\nconst ReactGridLayout = WidthProvider(RGL);\n\n\nconst headerStyle = {\n    backgroundImage: 'url()'\n}\nvar horizon = 6;\nvar vertical = 20;\nvar layout = [\n    {\"w\":19,\"h\":20,\"x\":0,\"y\":0,\"i\":\"0\",\"minW\":5,\"minH\":5,\"moved\":false,\"static\":false, \"title\":\"Developer\"}\n]\nlet _self = null;\nconst colors = [\n    'red',\n    'orange',\n    'yellow',\n    'olive',\n    'green',\n    'teal',\n    'blue',\n    'violet',\n    'purple',\n    'pink',\n    'brown',\n    'grey',\n]\n\nconst panes = [\n    { menuItem: 'App Instance Deployment', render: (props) => <Tab.Pane style={{overflow:'auto'}} attached={false}><SiteFourCreateFormAppInstDefault data={props} pId={0} getUserRole={props.userrole} gotoUrl={props.gotoUrl} toggleSubmit={props.toggleSubmit} validError={props.error} autoClusterDisable={props.autoClusterDisable} onSubmit={props.onSubmit}/></Tab.Pane> },\n    // { menuItem: 'Docker deployment', render: () => <Tab.Pane  attached={false} pId={1}>None</Tab.Pane> },\n    // { menuItem: 'VM deployment', render: () => <Tab.Pane attached={false} pId={2}>None</Tab.Pane> }\n]\nclass RegistryInstViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        _self = this;\n        const layout = this.generateLayout();\n        this.state = {\n            layout,\n            open: false,\n            openAdd: false,\n            openDetail:false,\n            dimmer:false,\n            activeItem:'',\n            dummyData : [],\n            detailViewData:null,\n            selected:{},\n            openUser:false,\n            orgData:{},\n            selectUse:null,\n            resultData:null,\n            cloudlets:[],\n            operators:{},\n            clustinst:[],\n            apps:{},\n            versions:{},\n            toggleSubmit:false,\n            validateError:[],\n            regSuccess:true,\n            autoClusterDisable:false,\n            keysData:[\n                {\n                    'Region':{label:'Region', type:'RenderSelect', necessary:true, tip:'Select region where you want to deploy.', disable:(Object.keys(this.props.appLaunch).length == 0)?true:false, active:true, items:[]},\n                    'DeveloperName':{label:'Organization Name', type:(Object.keys(this.props.appLaunch).length == 0)?'RenderSelect':'', disable:(Object.keys(this.props.appLaunch).length == 0)?true:false, necessary:true, tip:'The name of the organization you are currently managing.', active:true, items:[null]},\n                    'AppName':{label:'App Name', type:(Object.keys(this.props.appLaunch).length == 0)?'RenderSelect':'', disable:(Object.keys(this.props.appLaunch).length == 0)?true:false, necessary:true, tip:'The name of the application to deploy.', active:true, items:[null]},\n                    'Version':{label:'App Version', type:(Object.keys(this.props.appLaunch).length == 0)?'RenderSelect':'', disable:(Object.keys(this.props.appLaunch).length == 0)?true:false, necessary:true, tip:'The version of the application to deploy.', active:true, items:[null]},\n                    'Operator':{label:'Operator', type:'RenderSelect', necessary:true, tip:'Which operator do you want to deploy this applicaton? Please select one.', active:true, items:[null]},\n                    'Cloudlet':{label:'Cloudlet', type:'RenderDropDown', necessary:true, tip:'Which cloudlet(s) do you want to deploy this application?', active:true, items:[null]},\n                    'AutoClusterInst':{label:'Auto Cluster Instance', type:'RenderCheckbox', necessary:false, tip:'If you have yet to create a cluster, you can select this to auto create cluster instance.'},\n                    'ClusterInst':{label:'Cluster Instance', type:'RenderClusterDisabled', necessary:true,\n                        tip:'Name of cluster instance to deploy this application.',\n                        active:true, items:[null]},\n                },\n                {\n                    \n                }\n            ],\n            fakeData:[\n                {\n                    'Region':'US',\n                    'DeveloperName':'',\n                    'AppName':'',\n                    'Version':'',\n                    'Operator':'',\n                    'Cloudlet':'',\n                    'AutoClusterInst':false,\n                    'ClusterInst':'',\n                }\n            ],\n            editMode:false\n\n        };\n\n    }\n\n    onHandleClick(dim, data) {\n        this.setState({ dimmer:dim, open: true, selected:data })\n        //this.props.handleChangeSite(data.children.props.to)\n    }\n    onHandleClicAdd(dim, data) {\n        this.setState({ dimmer:dim, openAdd: true, selected:data })\n        //this.props.handleChangeSite(data.children.props.to)\n    }\n    getDataDeveloper(token,_region) {\n        services.getMCService('ShowApps',{token:token,region:_region}, this.receiveResultApp)\n        setTimeout(() => services.getMCService('ShowCloudlet',{token:token,region:_region}, this.receiveResultCloudlet), 200);\n        setTimeout(() => services.getMCService('ShowClusterInst',{token:token,region:_region}, this.receiveResultClusterInst), 400);\n        \n    }\n    receiveResultCloudlet = (result) => {\n        if(result.error){\n\n        } else {\n            let operatorGroup = reducer.groupBy(result, 'Operator')\n            //let cloudletGroup = reducer.groupBy(result, 'CloudletName')\n            let keys = Object.keys(operatorGroup);\n            let assObj = Object.assign([], this.state.keysData);\n            if(result[0].Operator){\n                assObj[0].Operator.items = keys;\n            } else{\n                assObj[0].Operator.items = [];\n            }\n            this.setState({keysData:assObj, operators:operatorGroup})\n            \n        }\n        // set list of operators\n        if(this.props.devData.length > 0) {\n            this.setState({dummyData:this.props.devData, resultData:(!this.state.resultData)?this.props.devData:this.state.resultData})\n        } else {\n            this.setState({dummyData:this.state.fakeData, resultData:(!this.state.resultData)?this.props.devData:this.state.resultData})\n        }\n        this.props.handleLoadingSpinner(false);\n\n    }\n    receiveResultApp = (result) => {\n        if(result.error) {\n            this.props.handleAlertInfo('error',String(result.error))\n        } else {\n            let appGroup = reducer.groupBy(result, 'OrganizationName')\n            let keys = Object.keys(appGroup);\n            let assObj = Object.assign([], this.state.keysData);\n            assObj[0].DeveloperName.items = keys;\n            this.setState({keysData:assObj, apps:appGroup})\n            this.props.handleLoadingSpinner(false);\n        }\n    }\n    receiveResultClusterInst = (result) => {\n        if(result.error) {\n            this.props.handleAlertInfo('error',String(result.error))\n        } else {\n            console.log('20191119 cluster result..', result)\n            let clinstGroup = reducer.groupBy(result, 'ClusterName')\n            let cloudletGroup = reducer.groupBy(result, 'Cloudlet')\n            //let operatorGroup = reducer.groupBy(result, 'Operator')\n            //let keys = Object.keys(operatorGroup);\n            //let assObj = Object.assign([], this.state.keysData);\n            //assObj[0].Operator.items = keys;\n            this.setState({ clustinst:clinstGroup, cloudlets:cloudletGroup})\n        }\n\n        // set list of operators\n        if(this.props.devData.length > 0) {\n            this.setState({dummyData:this.props.devData, resultData:(!this.state.resultData)?this.props.devData:this.state.resultData})\n        } else {\n            this.setState({dummyData:this.state.fakeData, resultData:(!this.state.resultData)?this.props.devData:this.state.resultData})\n        }\n    }\n\n    receiveResult = (result, body) => {\n        console.log(\"20191119 resultresultxxresult\",result)\n        /* code by inki : block this for not use tempfile.\n        setTimeout(() => {\n            services.errorTempFile(result.data, this.receiveStatusData)\n        }, 3000);\n        */\n\n        //TODO: inki 20191129 : request call streamTemp data from server..\n        \n\n        _self.props.handleLoadingSpinner(false);\n        if(result.data.error) {\n            this.setState({regSuccess:false});\n            this.props.handleAlertInfo('error',result.data.error)\n            return;\n        } else {\n            \n\n\n            // let toArray = result.data.split('\\n')\n            // toArray.pop();\n            // let toJson = toArray.map((str)=>(JSON.parse(str)))\n            //\n            // toJson.map((item) => {\n            //     if(item.result && item.result.code == 400){\n            //         this.props.handleAlertInfo('error',item.result.message)\n            //         return\n            //     } else {\n            //         this.props.handleAlertInfo('success','Your application instance created successfully')\n            //     }\n            // })\n\n\n            if(result && result.code == 400){\n                this.props.handleAlertInfo('error',result.message)\n                return\n            } else {\n                //this.props.handleAlertInfo('success','Your application instance created successfully')\n            }\n\n\n\n\n            setTimeout(() => {\n                this.gotoUrl('submit');\n            }, 3000)\n        }\n    }\n    \n    show = (dim) => this.setState({ dimmer:dim, openDetail: true })\n    close = () => {\n        this.setState({ open: false })\n        this.props.handleInjectDeveloper(null)\n    }\n    closeDetail = () => {\n        this.setState({ openDetail: false })\n    }\n    closeUser = () => {\n        this.setState({ openUser: false })\n    }\n    closeAddUser = () => {\n        this.setState({ openAdd: false })\n    }\n\n    gotoUrl(msg) {\n        let pg = 'pg=6'\n        let pgname = '';\n        if(_self.props.location.goBack && msg !== 'submit') {\n            pg = 'pg=5'\n            localStorage.setItem('selectMenu', 'Apps')\n        } else {\n            localStorage.setItem('selectMenu', 'App Instances')\n        }\n        _self.props.history.push({\n            pathname: '/site4',\n            search: pg,\n        });\n        _self.props.history.location.search = pg;\n        console.log('20191119 pgnameData --- ', _self.props.submitData, \":  submitValues=\", _self.props.submitValues)\n        if(_self.props.submitData.createAppFormDefault.values && _self.props.submitData.createAppFormDefault.values.AutoClusterInst){\n            _self.props.history.location.pgname = 'appinst';\n            _self.props.history.location.pgnameData = {\n                AppName:_self.props.submitData.createAppFormDefault.values.AppName,\n                Operator:_self.props.submitData.createAppFormDefault.values.Operator,\n                Cloudlet:_self.props.submitData.createAppFormDefault.values.Cloudlet[0],\n                ClusterInst:'autocluster'+_self.props.submitData.createAppFormDefault.values.AppName.replace(/(\\s*)/g, \"\"),\n                State:3\n            }\n        }\n        _self.props.handleChangeSite({mainPath:'/site4', subPath: pg})\n    }\n\n    generateDOM(open, dimmer, data, keysData, hideHeader) {\n\n        let panelParams = {data:data, keys:keysData, userrole:localStorage.selectRole, editMode:this.state.editMode, editData:this.props.editData}\n\n        return layout.map((item, i) => (\n\n            (i === 0)?\n                <div className=\"round_panel\" key={i}>\n                    <div className=\"grid_table\">\n\n                        <Tab className=\"grid_tabs\" menu={{ secondary: true, pointing: true, inverted: true, attached: false, tabular: false }} panes={panes}{...panelParams} gotoUrl={this.gotoUrl} toggleSubmit={this.state.toggleSubmit} error={this.state.validateError} autoClusterDisable={this.state.autoClusterDisable} onSubmit={this.onSubmit} />\n\n                    </div>\n                </div>\n                :\n                <div className=\"round_panel\" key={i}>\n                    \n                </div>\n\n        ))\n    }\n\n    generateLayout() {\n        const p = this.props;\n\n        return layout\n    }\n\n    onLayoutChange(layout) {\n        //this.props.onLayoutChange(layout);\n    }\n\n    onSubmit() {\n        _self.props.handleSubmitInfo('submitAction')\n    }\n\n\n    componentDidMount() {\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        //if(store && store.userToken) this.getDataDeveloper(store.userToken,'US');\n        /************\n         * set Organization Name\n         * **********/\n        let assObj = Object.assign([], this.state.fakeData);\n        assObj[0].DeveloperName = localStorage.selectOrg;\n        if(Object.keys(this.props.appLaunch).length > 0) {\n            assObj[0].Region = this.props.appLaunch.Region;\n            assObj[0].AppName = this.props.appLaunch.AppName;\n            assObj[0].Version = this.props.appLaunch.Version;\n            assObj[0].DeveloperName = this.props.appLaunch.OrganizationName;\n        }\n        this.setState({fakeData:assObj})\n\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.accountInfo){\n            this.setState({ dimmer:'blurring', open: true })\n        }\n        if(nextProps.devData.length > 1) {\n            this.setState({dummyData:nextProps.devData, resultData:(!this.state.resultData)?nextProps.devData:this.state.resultData})\n        } else {\n            this.setState({dummyData:this.state.fakeData, resultData:(!this.state.resultData)?nextProps.devData:this.state.resultData})\n        }\n        if(nextProps.regionInfo.region.length){\n            let assObj = Object.assign([], this.state.keysData);\n            assObj[0].Region.items = nextProps.regionInfo.region;\n        }\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        this.setState({toggleSubmit:false});\n        if(nextProps.submitValues && !this.state.toggleSubmit) {\n            \n            const apps = ['Region','DeveloperName','AppName','Version','Operator','Cloudlet','ClusterInst']\n            if(nextProps.formAppInst.values.AutoClusterInst || this.state.autoClusterDisable) {\n                apps.pop();\n            }\n            let error = [];\n            apps.map((item) => {\n                if(!nextProps.validateValue[item]) {\n                    error.push(item)\n                }\n            })\n\n            if(nextProps.formAppInst.submitSucceeded && error.length == 0){\n\n                let submitData = nextProps.submitValues\n                console.log('20191119 filtered cloudlet...', submitData, \" state.cloudelts=\", this.state.cloudlets)\n                /*\n\n                 */\n                this.props.handleSubmitObject(submitData)\n                this.setState({toggleSubmit:true,validateError:error,regSuccess:true});\n                this.props.handleLoadingSpinner(true);\n\n                services.createNewMultiAppInst('CreateAppInst', {params:submitData, token:store ? store.userToken : 'null'}, _self.receiveResult, nextProps.validateValue, this.state.cloudlets, this.state.autoClusterDisable)\n\n            } else {\n                this.setState({validateError:error,toggleSubmit:true})\n            }\n            \n        }\n\n        /************\n         * set list of Region\n         * **********/\n        if(nextProps.selectedRegion && nextProps.selectedRegion !== this.props.selectedRegion){\n            console.log(\"nextProps.selectedRegionnextProps.selectedRegion\",nextProps.selectedRegion,\":::\",this.props.selectedRegion)\n            this.getDataDeveloper(store ? store.userToken : 'null',nextProps.formAppInst.values.Region);\n        }\n\n        /************\n         * set list of cloudlet\n         * **********/\n        if(nextProps.selectedOperator && this.state.operators[nextProps.selectedOperator]) {\n            let assObj = Object.assign([], this.state.keysData);\n            assObj[0].Cloudlet.items = [];\n            assObj[0].ClusterInst.items = [];\n            assObj[0].Cloudlet.items = this.state.operators[nextProps.selectedOperator].map((cld) => (cld.CloudletName));\n            assObj[0].Cloudlet.items = reducer.removeDuplicate(assObj[0].Cloudlet.items)\n            this.setState({keysData:assObj})\n        }\n        /************\n         * set list of Organization\n         * **********/\n        if(nextProps.selectedOrgName && this.state.apps[nextProps.selectedOrgName]) {\n            if(Object.keys(this.props.appLaunch).length == 0) {\n                let assObj = Object.assign([], this.state.keysData);\n                assObj[0].AppName.items = this.state.apps[nextProps.selectedOrgName].map((cld) => (cld.AppName));\n                this.setState({keysData:assObj})\n                let appGroup = reducer.groupBy(this.state.apps[nextProps.selectedOrgName], 'AppName');\n                this.setState({versions:appGroup})\n            }\n        }\n        /************\n         * set list of version\n         * **********/\n        if(nextProps.selectedApp && this.state.versions[nextProps.selectedApp]) {\n            if(Object.keys(this.props.appLaunch).length == 0) {\n                let assObj = Object.assign([], this.state.keysData);\n                assObj[0].Version.items = this.state.versions[nextProps.selectedApp].map((cld) => (cld.Version));\n                this.setState({keysData:assObj})\n            }\n        }\n        if(nextProps.selectedVersion  && this.state.versions[nextProps.selectedApp]) {\n            if(Object.keys(this.state.versions).length !== 0 && this.state.versions[nextProps.selectedApp][0].DeploymentType === 'vm'){\n                this.setState({autoClusterDisable:true})\n            } else if(Object.keys(this.state.versions).length !== 0){\n                this.setState({autoClusterDisable:false})\n            }\n\n            if(Object.keys(nextProps.appLaunch).length !== 0) {\n                if(nextProps.appLaunch.DeploymentType === 'vm'){\n                    this.setState({autoClusterDisable:true})\n                } else {\n                    this.setState({autoClusterDisable:false})\n                }\n            }\n        }\n\n        //set list of clusterInst filter\n        if(Object.keys(nextProps.submitData).length > 0){\n            if(nextProps.submitData.createAppFormDefault && nextProps.submitData.createAppFormDefault.values.Operator && nextProps.submitData.createAppFormDefault.values.Cloudlet) {\n                let keys = Object.keys(this.state.clustinst);\n                let arr = []\n                let assObj = Object.assign([], this.state.keysData);\n                console.log(\"20191119 dfdfdfdgsgsdg\",nextProps.submitData.createAppFormDefault.values.Cloudlet)\n                keys.map((item,i) => {\n                    this.state.clustinst[item].map((items,j) => {\n                        nextProps.submitData.createAppFormDefault.values.Cloudlet.map((cItem) => {\n                            if(cItem == items.Cloudlet && nextProps.submitData.createAppFormDefault.values.DeveloperName == items.OrganizationName) {\n                                arr.push(item);\n                            }\n                        })\n                    })\n                })\n                arr = reducer.removeDuplicate(arr)\n                assObj[0].ClusterInst.items = arr;\n                this.setState({keysData:assObj})\n            }\n        }\n\n        if(nextProps.editMode) this.setState({editMode:nextProps.editMode})\n    }\n\n    componentWillUnmount() {\n        this.props.handleAppLaunch({})\n    }\n\n    receiveStatusData = (result) => {\n        console.log(\"20191119 resultresultss\",result)\n        let toArray = null;\n        let toJson = null;\n        toArray = result.data.split('\\n')\n        toArray.pop();\n        toJson = toArray.map((str)=>(JSON.parse(str)))\n        console.log(\"toJsontoJson\",toJson)\n        this.props.handleLoadingSpinner(false);\n        toJson.map((item) => {\n            if(item.result && item.result.code == 400){\n                console.log(\"item.result\",item.result.message)\n                this.setState({regSuccess:false});\n                this.props.handleAlertInfo('error',item.result.message)\n            }\n        })\n        if(this.state.regSuccess) {\n            this.gotoUrl('submit');\n        }\n    }\n\n    render() {\n        const { open, dimmer, dummyData, editMode } = this.state;\n        const { hiddenKeys } = this.props;\n        return (\n            <div className=\"regis_container\">\n                {/*<RegistNewListItem data={this.state.dummyData} resultData={this.state.resultData} dimmer={this.state.dimmer} open={this.state.open} selected={this.state.selected} close={this.close}/>*/}\n                <div\n                    draggableHandle\n                    layout={this.state.layout}\n                    onLayoutChange={this.onLayoutChange}\n                    {...this.props}\n                    useCSSTransforms={false}\n                >\n                    {this.generateDOM(open, dimmer, dummyData, this.state.keysData, hiddenKeys)}\n                </div>\n                <PopDetailViewer data={this.state.detailViewData} dimmer={false} open={this.state.openDetail} close={this.closeDetail}></PopDetailViewer>\n                <PopUserViewer data={this.state.detailViewData} dimmer={false} open={this.state.openUser} close={this.closeUser}></PopUserViewer>\n                <PopAddUserViewer data={this.state.selected} dimmer={false} open={this.state.openAdd} close={this.closeAddUser}></PopAddUserViewer>\n            </div>\n\n        );\n    }\n    static defaultProps = {\n        className: \"layout\",\n        items: 20,\n        rowHeight: 30,\n        cols: 12,\n        width: 1600\n    };\n}\n/*\n{\n    \"region\":\"US\",\n    \"appinst\":\n    {\n        \"key\":{\n            \"app_key\":{\"developer_key\":{\"name\":\"bicinkiOrg\"},\"name\":\"myapp\",\"version\":\"1.0.0\"},\n            \"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"bonn-mexdemo\"}\n        },\n        \"cluster_inst_key\":{\n            \"cluster_key\":{\"name\":\"mexdemo-app-cluster\"},\n            \"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"bonn-mexdemo\"}\n        }\n    }\n}\n */\nconst createFormat = (data) => (\n    {\n        \"region\":data['Region'],\n        \"appinst\":{\n            \"key\":{\n                \"app_key\":{\"developer_key\":{\"name\":data['DeveloperName']},\"name\":data['AppName'],\"version\":data['Version']},\n                \"cluster_inst_key\":{\n                    \"cluster_key\":{\"name\":data['ClusterInst']},\n                    \"cloudlet_key\":{\"operator_key\":{\"name\":data['Operator']},\"name\":data['Cloudlet']}\n                }\n            },\n        }\n    }\n)\nconst mapStateToProps = (state) => {\n    let account = state.registryAccount.account;\n    let dimm =  state.btnMnmt;\n    let accountInfo = account ? account + Math.random()*10000 : null;\n    let dimmInfo = dimm ? dimm : null;\n    let submitVal = null;\n    let selectedCloudlet = null;\n    let selectedOperator = null;\n    let selectedApp = null;\n    let selectedVersion = null;\n    let validateValue = null;\n    let selectedOrgName = null;\n    let selectedRegion = null;\n    // alert(JSON.stringify(state.form.createAppFormDefault))\n    if(state.form.createAppFormDefault) {\n        if(state.form.createAppFormDefault.values.Cloudlet !== \"\") {\n            selectedCloudlet = state.form.createAppFormDefault.values.Cloudlet;\n        }\n        if(state.form.createAppFormDefault.values.Operator !== \"\") {\n            selectedOperator = state.form.createAppFormDefault.values.Operator;\n        }\n        if(state.form.createAppFormDefault.values.AppName !== \"\") {\n            selectedApp = state.form.createAppFormDefault.values.AppName;\n        }\n        if(state.form.createAppFormDefault.values.Version !== \"\") {\n            selectedVersion = state.form.createAppFormDefault.values.Version;\n        }\n        if(state.form.createAppFormDefault.values.DeveloperName !== \"\") {\n            selectedOrgName = state.form.createAppFormDefault.values.DeveloperName;\n        }\n        if(state.form.createAppFormDefault.values.Region !== \"\") {\n            selectedRegion = state.form.createAppFormDefault.values.Region;\n        }\n\n        if(state.form.createAppFormDefault.values && state.form.createAppFormDefault.submitSucceeded) {\n            let enableValue = reducer.filterDeleteKey(state.form.createAppFormDefault.values, 'Edit')\n            console.log('20191119 createformat ...', enableValue)\n            submitVal = createFormat(enableValue);\n            validateValue = state.form.createAppFormDefault.values;\n        }\n    }\n\n\n    let region = state.changeRegion\n        ? {\n            value: state.changeRegion.region\n        }\n        : {};\n        \n    let formAppInst= state.form.createAppFormDefault\n        ? {\n            values: state.form.createAppFormDefault.values,\n            submitSucceeded: state.form.createAppFormDefault.submitSucceeded\n        }\n        : {};\n    let regionInfo = (state.regionInfo)?state.regionInfo:null;\n    return {\n        accountInfo,\n        dimmInfo,\n        itemLabel: state.computeItem.item,\n        userToken : (state.user.userToken) ? state.userToken: null,\n        submitValues: submitVal,\n        region: region.value,\n        selectedApp: selectedApp,\n        selectedVersion : selectedVersion,\n        selectedCloudlet: selectedCloudlet,\n        selectedOperator: selectedOperator,\n        selectOrg : state.selectOrg.org?state.selectOrg.org:null,\n        submitData : state.form?state.form : null,\n        userRole : state.showUserRole?state.showUserRole.role:null,\n        appLaunch : state.appLaunch?state.appLaunch.data:null,\n        validateValue:validateValue,\n        formAppInst : formAppInst,\n        selectedOrgName : selectedOrgName,\n        selectedRegion : selectedRegion,\n        editData : state.editInstance.data,\n        regionInfo: regionInfo\n    }\n    \n    // return (dimm) ? {\n    //     dimmInfo : dimm\n    // } : (account)? {\n    //     accountInfo: account + Math.random()*10000\n    // } : null;\n};\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleChangeSite: (data) => { dispatch(actions.changeSite(data))},\n        handleInjectDeveloper: (data) => { dispatch(actions.registDeveloper(data))},\n        handleLoadingSpinner: (data) => { dispatch(actions.loadingSpinner(data))},\n        handleAppLaunch: (data) => { dispatch(actions.appLaunch(data))},\n        handleAlertInfo: (mode,msg) => { dispatch(actions.alertInfo(mode,msg))},\n        handleSubmitInfo: (data) => {dispatch(actions.submitInfo(data))},\n        handleSubmitObject: (data) => {dispatch(actions.submitObj(data))}\n    };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(RegistryInstViewer));\n\n\n"]},"metadata":{},"sourceType":"module"}