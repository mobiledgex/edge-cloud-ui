{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/registryCloudletViewer.js\";\nimport React from 'react';\nimport { Header, Button, Table, Icon, Input, Tab, Item } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport PopDetailViewer from './popDetailViewer';\nimport PopUserViewer from './popUserViewer';\nimport PopAddUserViewer from './popAddUserViewer';\nimport './styles.css';\nimport ContainerDimensions from 'react-container-dimensions';\nimport _ from \"lodash\";\nimport * as reducer from '../utils';\nimport * as service from '../services/service_compute_service';\nimport SiteFourCreateInstForm from \"./siteFourCreateInstForm\";\nimport Alert from \"react-s-alert\";\nimport SiteFourCreateFormDefault from \"./siteFourCreateFormDefault\";\nvar ReactGridLayout = WidthProvider(RGL);\nvar headerStyle = {\n  backgroundImage: 'url()'\n};\nvar horizon = 6;\nvar vertical = 20;\nvar layout = [{\n  \"w\": 19,\n  \"x\": 0,\n  \"y\": 0,\n  \"i\": \"0\",\n  \"minW\": 8,\n  \"moved\": false,\n  \"static\": false,\n  \"title\": \"Developer\"\n}];\nvar _self = null;\nvar panes = [{\n  menuItem: 'Cloudlet Deployment',\n  render: function render(props) {\n    return React.createElement(Tab.Pane, {\n      attached: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(SiteFourCreateInstForm, {\n      data: props,\n      pId: 0,\n      getUserRole: props.userrole,\n      gotoUrl: props.gotoUrl,\n      toggleSubmit: props.toggleSubmit,\n      validError: props.error,\n      onSubmit: function onSubmit() {\n        return console.log('submit form');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }));\n  }\n} // { menuItem: 'Docker deployment', render: () => <Tab.Pane  attached={false} pId={1}>None</Tab.Pane> },\n// { menuItem: 'VM deployment', render: () => <Tab.Pane attached={false} pId={2}>None</Tab.Pane> }\n];\n/*\nWeb UI - need to add new fields for creating a new cloudlet\n\nwe need to add the following fields when creating a new cloudlet:Type - with pulldown values of 'Openstack', 'Azure', 'GCP'. Location - this is a freeform string value but has to match what is configured in the vault. Right now we use the values of 'hamburg' and 'bonn'. Should we use a pulldown with the pulldown of 'Hamburg', 'Bonn'?\n\nType needs to send the following in the create cloudlet message:for openstack: \"platform_type\":2for azure: \"platform_type\":3for gcp: \"platform_type\":4\n\nLocation needs to send the following in the create cloudlet message:\"physical_name\":\"hamburg\"\"physical_name\":\"bonn\"\n */\n\nvar ipaccessArr = ['Dedicated', 'Shared'];\n\nvar RegistryCloudletViewer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RegistryCloudletViewer, _React$Component);\n\n  function RegistryCloudletViewer(props) {\n    var _this;\n\n    _classCallCheck(this, RegistryCloudletViewer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegistryCloudletViewer).call(this, props));\n\n    _this.show = function (dim) {\n      return _this.setState({\n        dimmer: dim,\n        openDetail: true\n      });\n    };\n\n    _this.close = function () {\n      _this.setState({\n        open: false\n      });\n\n      _this.props.handleInjectDeveloper(null);\n    };\n\n    _this.closeDetail = function () {\n      _this.setState({\n        openDetail: false\n      });\n    };\n\n    _this.closeUser = function () {\n      _this.setState({\n        openUser: false\n      });\n    };\n\n    _this.closeAddUser = function () {\n      _this.setState({\n        openAdd: false\n      });\n    };\n\n    _this.receiveSubmit = function (result, body) {\n      console.log(\"20191119 paseDatapaseDatapaseData\", result);\n      _this.pauseRender = false;\n      var paseData = result.data;\n\n      if (paseData.error && !_this.state.errorClose) {\n        //this.setState({clusterInstCreate:false})\n        _this.props.handleLoadingSpinner(false);\n\n        if (paseData.error == 'Key already exists') {} else {\n          _this.props.handleAlertInfo('error', paseData.error);\n        }\n      } else {\n        if (result.data.error) {\n          _this.props.handleAlertInfo('error', result.data.error);\n        } else {\n          console.log('20191119 receive submit result is success..', result, \":\", result.data);\n\n          _this.props.handleAlertInfo('success', result.data.message);\n        }\n\n        if (_this.props.siteId !== 'appinst' || body.params.appinst.key.cluster_inst_key.cluster_key.name.indexOf('autocluster') > -1) {\n          setTimeout(function () {\n            if (_self.props.refresh) _self.props.refresh(_this.props.changeRegion);\n          }, 3000);\n        }\n      } // if(paseData.message) {\n      //     Alert.error(paseData.message, {\n      //         position: 'top-right',\n      //         effect: 'slide',\n      //         onShow: function () {\n      //             console.log('aye!')\n      //         },\n      //         beep: true,\n      //         timeout: 5000,\n      //         offset: 100\n      //     });\n      // } else {\n      //     let splitData = JSON.parse( \"[\"+paseData.split('}\\n{').join('},\\n{')+\"]\" );\n      //     if(result.data.indexOf('successfully') > -1 || result.data.indexOf('ok') > -1) {\n      //         Alert.success(\"Success!\", {\n      //             position: 'top-right',\n      //             effect: 'slide',\n      //             onShow: function () {\n      //                 console.log('aye!')\n      //             },\n      //             beep: true,\n      //             timeout: 5000,\n      //             offset: 100\n      //         });\n      //         _self.props.success();\n      //         _self.reqCount = 0;\n      //     }\n      // }\n\n    };\n\n    _self = _assertThisInitialized(_this);\n\n    var layout = _this.generateLayout();\n\n    _this.state = {\n      layout: layout,\n      open: false,\n      openAdd: false,\n      openDetail: false,\n      dimmer: false,\n      activeItem: '',\n      dummyData: [],\n      detailViewData: null,\n      selected: {},\n      openUser: false,\n      orgData: {},\n      selectUse: null,\n      resultData: null,\n      cloudlets: [],\n      operators: [],\n      clustinst: [],\n      apps: [],\n      clusterInstCreate: true,\n      toggleSubmit: false,\n      validateError: [],\n      regSuccess: true,\n      errorClose: false,\n      keysData: [{\n        'Region': {\n          label: 'Region',\n          type: 'RenderSelect',\n          necessary: true,\n          tip: 'Select region where you want to deploy.',\n          active: true,\n          items: []\n        },\n        'CloudletName': {\n          label: 'Cloudlet Name',\n          type: 'RenderInputCluster',\n          necessary: true,\n          tip: 'Name of the cloudlet.',\n          active: true\n        },\n        'OperatorName': {\n          label: 'Operator Name',\n          type: 'RenderInputDisabled',\n          necessary: true,\n          tip: 'Name of the organization you are currently managing.',\n          active: true,\n          items: ['', '']\n        },\n        'CloudletLocation': {\n          label: 'Cloudlet Location',\n          type: 'CloudletLocation',\n          necessary: true,\n          tip: 'Cloudlet Location',\n          active: true,\n          items: ['', '']\n        },\n        'IPSupport': {\n          label: 'IP Support',\n          type: 'RenderSelect',\n          necessary: true,\n          tip: 'Ip Support indicates the type of public IP support provided by the Cloudlet. Static IP support indicates a set of static public IPs are available for use, and managed by the Controller. Dynamic indicates the Cloudlet uses a DHCP server to provide public IP addresses, and the controller has no control over which IPs are assigned.',\n          active: true,\n          items: ['Dynamic']\n        },\n        'NumberOfDynamicIPs': {\n          label: 'Number of Dynamic IPs',\n          type: 'RenderInput',\n          necessary: true,\n          tip: 'Number of dynamic IPs available for dynamic IP support.'\n        },\n        'PhysicalName': {\n          label: 'Physical Name',\n          type: 'RenderInput',\n          necessary: true,\n          tip: 'Physical infrastructure cloudlet name.',\n          active: true\n        },\n        'PlatformType': {\n          label: 'Platform Type',\n          type: 'RenderSelect',\n          necessary: true,\n          tip: 'Supported list of cloudlet types.',\n          active: true,\n          items: ['Openstack']\n        }\n      }, {}],\n      fakeData: [{\n        'Region': '',\n        'CloudletName': '',\n        'OperatorName': '',\n        'CloudletLocation': '',\n        'IPSupport': '',\n        'NumberOfDynamicIPs': '',\n        'PhysicalName': '',\n        'PlatformType': ''\n      }]\n    };\n    _this.pauseRender = false;\n    return _this;\n  }\n\n  _createClass(RegistryCloudletViewer, [{\n    key: \"gotoUrl\",\n    value: function gotoUrl() {\n      _self.props.history.push({\n        pathname: '/site4',\n        search: 'pg=2'\n      });\n\n      _self.props.history.location.search = 'pg=2';\n\n      _self.props.handleChangeSite({\n        mainPath: '/site4',\n        subPath: 'pg=2'\n      });\n    }\n  }, {\n    key: \"generateDOM\",\n    value: function generateDOM(open, dimmer, data, keysData, hideHeader, region) {\n      var _this2 = this;\n\n      var panelParams = {\n        data: data,\n        keys: keysData,\n        region: region,\n        handleLoadingSpinner: this.props.handleLoadingSpinner,\n        userrole: localStorage.selectRole\n      };\n      return layout.map(function (item, i) {\n        return i === 0 ? React.createElement(\"div\", {\n          className: \"round_panel\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"grid_table\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(Tab, Object.assign({\n          className: \"grid_tabs\",\n          menu: {\n            secondary: true,\n            pointing: true,\n            inverted: true,\n            attached: false,\n            tabular: false\n          },\n          panes: panes\n        }, panelParams, {\n          gotoUrl: _this2.gotoUrl,\n          toggleSubmit: _this2.state.toggleSubmit,\n          error: _this2.state.validateError,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        })))) : React.createElement(\"div\", {\n          className: \"round_panel\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"generateLayout\",\n    value: function generateLayout() {\n      var p = this.props;\n      return layout;\n    }\n  }, {\n    key: \"onLayoutChange\",\n    value: function onLayoutChange(layout) {//this.props.onLayoutChange(layout);\n    }\n  }, {\n    key: \"setFildData\",\n    value: function setFildData() {\n      //\n      if (_self.props.devData.length > 0) {\n        _self.setState({\n          dummyData: _self.props.devData,\n          resultData: !_self.state.resultData ? _self.props.devData : _self.state.resultData\n        });\n      } else {\n        _self.setState({\n          dummyData: _self.state.fakeData,\n          resultData: !_self.state.resultData ? _self.props.devData : _self.state.resultData\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setFildData();\n      /************\n       * set Organization Name\n       * **********/\n\n      var assObj = Object.assign([], this.state.fakeData);\n      assObj[0].OperatorName = localStorage.selectOrg;\n      this.setState({\n        fakeData: assObj\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      _self.props.handleGetRegion(null);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this3 = this;\n\n      if (nextProps.regionInfo.region.length) {\n        var assObj = Object.assign([], this.state.keysData);\n        assObj[0].Region.items = nextProps.regionInfo.region;\n      }\n\n      if (nextProps.accountInfo) {\n        this.setState({\n          dimmer: 'blurring',\n          open: true\n        });\n      }\n\n      if (nextProps.devData.length > 1) {\n        this.setState({\n          dummyData: nextProps.devData,\n          resultData: !this.state.resultData ? nextProps.devData : this.state.resultData\n        });\n      } else {\n        this.setState({\n          dummyData: this.state.fakeData,\n          resultData: !this.state.resultData ? nextProps.devData : this.state.resultData\n        });\n      }\n\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n      this.setState({\n        toggleSubmit: false\n      });\n\n      if (nextProps.submitValues && !this.state.toggleSubmit) {\n        var cluster = ['Region', 'CloudletName', 'OperatorName', 'IPSupport', 'NumberOfDynamicIPs', 'PhysicalName', 'PlatformType', 'Latitude', 'Longitude'];\n        var error = [];\n        cluster.map(function (item) {\n          if (!nextProps.validateValue[item]) {\n            error.push(item);\n          }\n        }); //close tutorial\n\n        this.props.handleStateTutor('done');\n\n        if (!this.pauseRender && nextProps.formClusterInst.submitSucceeded && error.length == 0) {\n          this.setState({\n            toggleSubmit: true,\n            validateError: error,\n            regSuccess: true\n          });\n          this.props.handleLoadingSpinner(true);\n          console.log('20191119 create cloudlet....', nextProps.submitValues); //service.createNewMultiClusterInst('CreateClusterInst',{params:nextProps.submitValues, token:store.userToken}, this.receiveSubmit, nextProps.validateValue.Cloudlet)\n\n          service.createNewCloudlet('CreateCloudlet', {\n            params: nextProps.submitValues,\n            token: store.userToken\n          }, this.receiveSubmit);\n          setTimeout(function () {\n            _this3.props.handleLoadingSpinner(false);\n\n            _this3.props.gotoUrl();\n\n            _this3.setState({\n              errorClose: true\n            });\n          }, 3000);\n          this.pauseRender = true;\n        } else {\n          this.setState({\n            validateError: error,\n            toggleSubmit: true\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          open = _this$state.open,\n          dimmer = _this$state.dimmer,\n          dummyData = _this$state.dummyData;\n      var hiddenKeys = this.props.hiddenKeys;\n      return React.createElement(\"div\", {\n        className: \"regis_container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(\"div\", Object.assign({\n        draggableHandle: true,\n        layout: this.state.layout,\n        onLayoutChange: this.onLayoutChange\n      }, this.props, {\n        style: {\n          overflowY: 'visible'\n        },\n        useCSSTransforms: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }), this.generateDOM(open, dimmer, dummyData, this.state.keysData, hiddenKeys, this.props.region)), React.createElement(PopDetailViewer, {\n        data: this.state.detailViewData,\n        dimmer: false,\n        open: this.state.openDetail,\n        close: this.closeDetail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(PopUserViewer, {\n        data: this.state.detailViewData,\n        dimmer: false,\n        open: this.state.openUser,\n        close: this.closeUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }), React.createElement(PopAddUserViewer, {\n        data: this.state.selected,\n        dimmer: false,\n        open: this.state.openAdd,\n        close: this.closeAddUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return RegistryCloudletViewer;\n}(React.Component);\n/*\n{\n  \"Region\": \"US\",\n  \"ClusterName\": \"myClusterInst0513\",\n  \"OrganizationName\": \"TDG\",\n  \"Operator\": \"RCI\",\n  \"Cloudlet\": \"toronto-cloudlet\",\n  \"Flavor\": \"m4.large\",\n  \"IpAccess\": \"IpAccessDedicated\",\n  \"NumberOfMaster\": \"1\",\n  \"NumberOfNode\": \"2\"\n}\n */\n\n\nRegistryCloudletViewer.defaultProps = {\n  className: \"layout\",\n  items: 20,\n  rowHeight: 30,\n  cols: 12,\n  width: 1600\n};\n\nvar getInteger = function getInteger(str) {\n  return str === 'Openstack' ? 2 : str === 'Azure' ? 3 : str === 'GCP' ? 4 : false;\n};\n\nvar getInteger_ip = function getInteger_ip(str) {\n  return str === 'Static' ? 1 : str === 'Dynamic' ? 2 : false;\n};\n\nvar createFormat = function createFormat(data, loc) {\n  return {\n    \"region\": data['Region'],\n    \"cloudlet\": {\n      \"key\": {\n        \"operator_key\": {\n          \"name\": data['OperatorName']\n        },\n        \"name\": data['CloudletName']\n      },\n      \"location\": {\n        // \"latitude\":Number((loc)?loc.lat:0),\n        // \"longitude\":Number((loc)?loc.long:0),\n        \"latitude\": Number(data['Latitude']),\n        \"longitude\": Number(data['Longitude']),\n        \"timestamp\": {}\n      },\n      \"ip_support\": getInteger_ip(data['IPSupport']),\n      \"num_dynamic_ips\": Number(data['NumberOfDynamicIPs']),\n      \"physical_name\": data['PhysicalName'],\n      \"platform_type\": getInteger(data['PlatformType'])\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var account = state.registryAccount.account;\n  var dimm = state.btnMnmt;\n  var accountInfo = account ? account + Math.random() * 10000 : null;\n  var dimmInfo = dimm ? dimm : null;\n  var submitVal = null;\n  var selectedRegion = null;\n  var selectedCloudlet = null;\n  var selectedOperator = null;\n  var selectedApp = null;\n  var flavors = null;\n  var validateValue = {}; //TODO : 건희 20190902 새롭게 추가된 필드 'Cloudlet Type'데 대한 기능 구현 ()\n\n  /**\n   * EDGECLOUD-1187 Web UI - need to add new fields for creating a new cloudlet\n   * Web UI - need to add new fields for creating a new cloudlet\n    we need to add the following fields when creating a new cloudlet:\n   Type - with pulldown values of 'Openstack', 'Azure', 'GCP'.\n   Location - this is a freeform string value but has to match what is configured in the vault. Right now we use the values of 'hamburg' and 'bonn'. Should we use a pulldown with the pulldown of 'Hamburg', 'Bonn'?\n    Type needs to send the following in the create cloudlet message:\n   for openstack: \"platform_type\":2\n   for azure: \"platform_type\":3\n   for gcp: \"platform_type\":4\n    Location needs to send the following in the create cloudlet message:\n   \"physical_name\":\"hamburg\"\n   \"physical_name\":\"bonn\"\n   */\n\n  if (state.form.createAppFormDefault && state.form.createAppFormDefault.values && state.getRegion.region) {\n    state.form.createAppFormDefault.values.Latitude = state.getRegion.region.lat;\n    state.form.createAppFormDefault.values.Longitude = state.getRegion.region.long;\n  }\n\n  if (state.form.createAppFormDefault && state.form.createAppFormDefault.values && state.form.createAppFormDefault.submitSucceeded) {\n    var enableValue = reducer.filterDeleteKey(state.form.createAppFormDefault.values, 'Edit');\n    submitVal = createFormat(enableValue, state.getRegion.region);\n    validateValue = state.form.createAppFormDefault.values;\n  }\n\n  var region = state.changeRegion ? {\n    value: state.changeRegion.region\n  } : {};\n  var formClusterInst = state.form.createAppFormDefault ? {\n    values: state.form.createAppFormDefault.values,\n    submitSucceeded: state.form.createAppFormDefault.submitSucceeded\n  } : {};\n  var regionInfo = state.regionInfo ? state.regionInfo : null;\n  return {\n    accountInfo: accountInfo,\n    dimmInfo: dimmInfo,\n    itemLabel: state.computeItem.item,\n    userToken: state.user.userToken ? state.userToken : null,\n    submitValues: submitVal,\n    region: region.value,\n    flavors: state.showFlavor ? state.showFlavor.flavor : null,\n    selectOrg: state.selectOrg.org ? state.selectOrg.org : null,\n    userRole: state.showUserRole ? state.showUserRole.role : null,\n    validateValue: validateValue,\n    formClusterInst: formClusterInst,\n    getRegion: state.getRegion ? state.getRegion.region : null,\n    regionInfo: regionInfo\n  }; // return (dimm) ? {\n  //     dimmInfo : dimm\n  // } : (account)? {\n  //     accountInfo: account + Math.random()*10000\n  // } : null;\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleChangeSite: function handleChangeSite(data) {\n      dispatch(actions.changeSite(data));\n    },\n    handleInjectDeveloper: function handleInjectDeveloper(data) {\n      dispatch(actions.registDeveloper(data));\n    },\n    handleLoadingSpinner: function handleLoadingSpinner(data) {\n      dispatch(actions.loadingSpinner(data));\n    },\n    handleAlertInfo: function handleAlertInfo(mode, msg) {\n      dispatch(actions.alertInfo(mode, msg));\n    },\n    handleStateTutor: function handleStateTutor(data) {\n      dispatch(actions.tutorStatus(data));\n    },\n    handleGetRegion: function handleGetRegion(data) {\n      dispatch(actions.getRegion(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(RegistryCloudletViewer);","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/registryCloudletViewer.js"],"names":["React","Header","Button","Table","Icon","Input","Tab","Item","connect","actions","RGL","WidthProvider","PopDetailViewer","PopUserViewer","PopAddUserViewer","ContainerDimensions","_","reducer","service","SiteFourCreateInstForm","Alert","SiteFourCreateFormDefault","ReactGridLayout","headerStyle","backgroundImage","horizon","vertical","layout","_self","panes","menuItem","render","props","userrole","gotoUrl","toggleSubmit","error","console","log","ipaccessArr","RegistryCloudletViewer","show","dim","setState","dimmer","openDetail","close","open","handleInjectDeveloper","closeDetail","closeUser","openUser","closeAddUser","openAdd","receiveSubmit","result","body","pauseRender","paseData","data","state","errorClose","handleLoadingSpinner","handleAlertInfo","message","siteId","params","appinst","key","cluster_inst_key","cluster_key","name","indexOf","setTimeout","refresh","changeRegion","generateLayout","activeItem","dummyData","detailViewData","selected","orgData","selectUse","resultData","cloudlets","operators","clustinst","apps","clusterInstCreate","validateError","regSuccess","keysData","label","type","necessary","tip","active","items","fakeData","history","push","pathname","search","location","handleChangeSite","mainPath","subPath","hideHeader","region","panelParams","keys","localStorage","selectRole","map","item","i","secondary","pointing","inverted","attached","tabular","p","devData","length","setFildData","assObj","Object","assign","OperatorName","selectOrg","handleGetRegion","nextProps","nextContext","regionInfo","Region","accountInfo","store","PROJECT_INIT","JSON","parse","submitValues","cluster","validateValue","handleStateTutor","formClusterInst","submitSucceeded","createNewCloudlet","token","userToken","hiddenKeys","onLayoutChange","overflowY","generateDOM","Component","defaultProps","className","rowHeight","cols","width","getInteger","str","getInteger_ip","createFormat","loc","Number","mapStateToProps","account","registryAccount","dimm","btnMnmt","Math","random","dimmInfo","submitVal","selectedRegion","selectedCloudlet","selectedOperator","selectedApp","flavors","form","createAppFormDefault","values","getRegion","Latitude","lat","Longitude","long","enableValue","filterDeleteKey","value","itemLabel","computeItem","user","showFlavor","flavor","org","userRole","showUserRole","role","mapDispatchProps","dispatch","changeSite","registDeveloper","loadingSpinner","mode","msg","alertInfo","tutorStatus"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Header, Button, Table, Icon, Input, Tab, Item} from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\n\nimport PopDetailViewer from './popDetailViewer';\nimport PopUserViewer from './popUserViewer';\nimport PopAddUserViewer from './popAddUserViewer';\nimport './styles.css';\nimport ContainerDimensions from 'react-container-dimensions'\nimport _ from \"lodash\";\nimport * as reducer from '../utils'\n\nimport * as service from '../services/service_compute_service';\nimport SiteFourCreateInstForm from \"./siteFourCreateInstForm\";\nimport Alert from \"react-s-alert\";\nimport SiteFourCreateFormDefault from \"./siteFourCreateFormDefault\";\nconst ReactGridLayout = WidthProvider(RGL);\n\n\nconst headerStyle = {\n    backgroundImage: 'url()'\n}\nvar horizon = 6;\nvar vertical = 20;\nvar layout = [\n    {\"w\":19,\"x\":0,\"y\":0,\"i\":\"0\", \"minW\":8, \"moved\":false,\"static\":false, \"title\":\"Developer\"}\n]\nlet _self = null;\n\nconst panes = [\n    { menuItem: 'Cloudlet Deployment', render: (props) => <Tab.Pane attached={false}><SiteFourCreateInstForm data={props} pId={0} getUserRole={props.userrole} gotoUrl={props.gotoUrl} toggleSubmit={props.toggleSubmit} validError={props.error} onSubmit={() => console.log('submit form')}/></Tab.Pane> },\n    // { menuItem: 'Docker deployment', render: () => <Tab.Pane  attached={false} pId={1}>None</Tab.Pane> },\n    // { menuItem: 'VM deployment', render: () => <Tab.Pane attached={false} pId={2}>None</Tab.Pane> }\n]\n/*\nWeb UI - need to add new fields for creating a new cloudlet\n\nwe need to add the following fields when creating a new cloudlet:Type - with pulldown values of 'Openstack', 'Azure', 'GCP'. Location - this is a freeform string value but has to match what is configured in the vault. Right now we use the values of 'hamburg' and 'bonn'. Should we use a pulldown with the pulldown of 'Hamburg', 'Bonn'?\n\nType needs to send the following in the create cloudlet message:for openstack: \"platform_type\":2for azure: \"platform_type\":3for gcp: \"platform_type\":4\n\nLocation needs to send the following in the create cloudlet message:\"physical_name\":\"hamburg\"\"physical_name\":\"bonn\"\n */\nconst ipaccessArr = ['Dedicated','Shared'];\nclass RegistryCloudletViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        _self = this;\n        const layout = this.generateLayout();\n\n        this.state = {\n            layout,\n            open: false,\n            openAdd: false,\n            openDetail:false,\n            dimmer:false,\n            activeItem:'',\n            dummyData : [],\n            detailViewData:null,\n            selected:{},\n            openUser:false,\n            orgData:{},\n            selectUse:null,\n            resultData:null,\n            cloudlets:[],\n            operators:[],\n            clustinst:[],\n            apps:[],\n            clusterInstCreate:true,\n            toggleSubmit:false,\n            validateError:[],\n            regSuccess:true,\n            errorClose:false,\n            keysData:[\n                {\n                    'Region':{label:'Region', type:'RenderSelect', necessary:true, tip:'Select region where you want to deploy.', active:true, items:[]},\n                    'CloudletName':{label:'Cloudlet Name', type:'RenderInputCluster', necessary:true, tip:'Name of the cloudlet.', active:true},\n                    'OperatorName':{label:'Operator Name', type:'RenderInputDisabled', necessary:true, tip:'Name of the organization you are currently managing.', active:true, items:['','']},\n                    'CloudletLocation':{label:'Cloudlet Location', type:'CloudletLocation', necessary:true, tip:'Cloudlet Location', active:true, items:['','']},\n                    'IPSupport':{label:'IP Support', type:'RenderSelect', necessary:true, tip:'Ip Support indicates the type of public IP support provided by the Cloudlet. Static IP support indicates a set of static public IPs are available for use, and managed by the Controller. Dynamic indicates the Cloudlet uses a DHCP server to provide public IP addresses, and the controller has no control over which IPs are assigned.', active:true, items:['Dynamic']},\n                    'NumberOfDynamicIPs':{label:'Number of Dynamic IPs', type:'RenderInput', necessary:true, tip:'Number of dynamic IPs available for dynamic IP support.'},\n                    'PhysicalName':{label:'Physical Name', type:'RenderInput', necessary:true, tip:'Physical infrastructure cloudlet name.', active:true},\n                    'PlatformType':{label:'Platform Type', type:'RenderSelect', necessary:true, tip:'Supported list of cloudlet types.', active:true, items:['Openstack']},\n                },\n                {\n\n                }\n            ],\n            fakeData:[\n                {\n                    'Region':'',\n                    'CloudletName':'',\n                    'OperatorName':'',\n                    'CloudletLocation':'',\n                    'IPSupport':'',\n                    'NumberOfDynamicIPs':'',\n                    'PhysicalName':'',\n                    'PlatformType':''\n                }\n            ]\n\n\n        };\n\n        this.pauseRender =false;\n\n    }\n\n    \n    show = (dim) => this.setState({ dimmer:dim, openDetail: true })\n    close = () => {\n        this.setState({ open: false })\n        this.props.handleInjectDeveloper(null)\n    }\n    closeDetail = () => {\n        this.setState({ openDetail: false })\n    }\n    closeUser = () => {\n        this.setState({ openUser: false })\n    }\n    closeAddUser = () => {\n        this.setState({ openAdd: false })\n    }\n\n    gotoUrl() {\n        _self.props.history.push({\n            pathname: '/site4',\n            search: 'pg=2'\n        });\n        _self.props.history.location.search = 'pg=2';\n        _self.props.handleChangeSite({mainPath:'/site4', subPath: 'pg=2'})\n    }\n\n\n    generateDOM(open, dimmer, data, keysData, hideHeader, region) {\n\n        let panelParams = {data:data, keys:keysData, region:region, handleLoadingSpinner:this.props.handleLoadingSpinner, userrole:localStorage.selectRole}\n\n        return layout.map((item, i) => (\n\n            (i === 0)?\n                <div className=\"round_panel\" key={i}>\n                    <div className=\"grid_table\">\n                        <Tab className=\"grid_tabs\" menu={{ secondary: true, pointing: true, inverted: true, attached: false, tabular: false }} panes={panes}{...panelParams} gotoUrl={this.gotoUrl} toggleSubmit={this.state.toggleSubmit} error={this.state.validateError} />\n                    </div>\n                </div>\n                :\n                <div className=\"round_panel\" key={i}>\n\n                </div>\n\n\n        ))\n    }\n\n    generateLayout() {\n        const p = this.props;\n\n        return layout\n    }\n\n    onLayoutChange(layout) {\n        //this.props.onLayoutChange(layout);\n    }\n\n    setFildData() {\n        //\n        if(_self.props.devData.length > 0) {\n            _self.setState({dummyData:_self.props.devData, resultData:(!_self.state.resultData)?_self.props.devData:_self.state.resultData})\n        } else {\n            _self.setState({dummyData:_self.state.fakeData, resultData:(!_self.state.resultData)?_self.props.devData:_self.state.resultData})\n        }\n    }\n    receiveSubmit = (result, body) => {\n        console.log(\"20191119 paseDatapaseDatapaseData\",result)\n        this.pauseRender = false;\n        let paseData = result.data;\n        if(paseData.error && !this.state.errorClose) {\n            //this.setState({clusterInstCreate:false})\n            this.props.handleLoadingSpinner(false);\n            if(paseData.error == 'Key already exists'){\n                \n            } else {\n                this.props.handleAlertInfo('error',paseData.error)\n            }\n        } else {\n            if (result.data.error) {\n                this.props.handleAlertInfo('error', result.data.error)\n            } else {\n                console.log('20191119 receive submit result is success..', result,\":\", result.data)\n                this.props.handleAlertInfo('success',result.data.message)\n            }\n            if(this.props.siteId !== 'appinst' || body.params.appinst.key.cluster_inst_key.cluster_key.name.indexOf('autocluster') > -1){\n                setTimeout(() => {\n                    if(_self.props.refresh) _self.props.refresh(this.props.changeRegion);\n                }, 3000);\n            }\n        }\n\n        // if(paseData.message) {\n        //     Alert.error(paseData.message, {\n        //         position: 'top-right',\n        //         effect: 'slide',\n        //         onShow: function () {\n        //             console.log('aye!')\n        //         },\n        //         beep: true,\n        //         timeout: 5000,\n        //         offset: 100\n        //     });\n        // } else {\n        //     let splitData = JSON.parse( \"[\"+paseData.split('}\\n{').join('},\\n{')+\"]\" );\n\n        //     if(result.data.indexOf('successfully') > -1 || result.data.indexOf('ok') > -1) {\n        //         Alert.success(\"Success!\", {\n        //             position: 'top-right',\n        //             effect: 'slide',\n        //             onShow: function () {\n        //                 console.log('aye!')\n        //             },\n        //             beep: true,\n        //             timeout: 5000,\n        //             offset: 100\n        //         });\n        //         _self.props.success();\n        //         _self.reqCount = 0;\n        //     }\n        // }\n\n    }\n\n    componentDidMount() {\n\n        this.setFildData();\n\n        /************\n         * set Organization Name\n         * **********/\n        let assObj = Object.assign([], this.state.fakeData);\n        assObj[0].OperatorName = localStorage.selectOrg;\n        this.setState({fakeData:assObj});\n\n    }\n    componentWillUnmount() {\n        _self.props.handleGetRegion(null)\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.regionInfo.region.length){\n            let assObj = Object.assign([], this.state.keysData);\n            assObj[0].Region.items = nextProps.regionInfo.region;\n        }\n        if(nextProps.accountInfo){\n            this.setState({ dimmer:'blurring', open: true })\n        }\n        if(nextProps.devData.length > 1) {\n            this.setState({dummyData:nextProps.devData, resultData:(!this.state.resultData)?nextProps.devData:this.state.resultData})\n        } else {\n            this.setState({dummyData:this.state.fakeData, resultData:(!this.state.resultData)?nextProps.devData:this.state.resultData})\n        }\n\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        this.setState({toggleSubmit:false});\n        if(nextProps.submitValues && !this.state.toggleSubmit) {\n            const cluster = ['Region','CloudletName','OperatorName','IPSupport','NumberOfDynamicIPs','PhysicalName','PlatformType','Latitude','Longitude'];\n            let error = [];\n            cluster.map((item) => {\n                if(!nextProps.validateValue[item]) {\n                    error.push(item)\n                }\n            })\n\n            //close tutorial\n            this.props.handleStateTutor('done');\n\n            if(!this.pauseRender && nextProps.formClusterInst.submitSucceeded && error.length == 0){\n                this.setState({toggleSubmit:true,validateError:error,regSuccess:true});\n                this.props.handleLoadingSpinner(true);\n                console.log('20191119 create cloudlet....',nextProps.submitValues)\n                //service.createNewMultiClusterInst('CreateClusterInst',{params:nextProps.submitValues, token:store.userToken}, this.receiveSubmit, nextProps.validateValue.Cloudlet)\n                service.createNewCloudlet('CreateCloudlet', {params:nextProps.submitValues, token:store.userToken}, this.receiveSubmit)\n                setTimeout(() => {\n                    this.props.handleLoadingSpinner(false);\n                    this.props.gotoUrl();\n                    this.setState({errorClose:true})\n                }, 3000)\n                this.pauseRender = true;\n            } else {\n                this.setState({validateError:error,toggleSubmit:true})\n            }\n            \n        }\n\n    }\n\n    render() {\n        const { open, dimmer, dummyData } = this.state;\n        const { hiddenKeys } = this.props;\n        return (\n            <div className=\"regis_container\">\n                {/*<RegistNewListItem data={this.state.dummyData} resultData={this.state.resultData} dimmer={this.state.dimmer} open={this.state.open} selected={this.state.selected} close={this.close}/>*/}\n                <div\n                    draggableHandle\n                    layout={this.state.layout}\n                    onLayoutChange={this.onLayoutChange}\n                    {...this.props}\n                    style={{overflowY:'visible'}}\n                    useCSSTransforms={false}\n                >\n                    {this.generateDOM(open, dimmer, dummyData, this.state.keysData, hiddenKeys, this.props.region)}\n                </div>\n                <PopDetailViewer data={this.state.detailViewData} dimmer={false} open={this.state.openDetail} close={this.closeDetail}></PopDetailViewer>\n                <PopUserViewer data={this.state.detailViewData} dimmer={false} open={this.state.openUser} close={this.closeUser}></PopUserViewer>\n                <PopAddUserViewer data={this.state.selected} dimmer={false} open={this.state.openAdd} close={this.closeAddUser}></PopAddUserViewer>\n            </div>\n\n        );\n    }\n    static defaultProps = {\n        className: \"layout\",\n        items: 20,\n        rowHeight: 30,\n        cols: 12,\n        width: 1600\n    };\n}\n/*\n{\n  \"Region\": \"US\",\n  \"ClusterName\": \"myClusterInst0513\",\n  \"OrganizationName\": \"TDG\",\n  \"Operator\": \"RCI\",\n  \"Cloudlet\": \"toronto-cloudlet\",\n  \"Flavor\": \"m4.large\",\n  \"IpAccess\": \"IpAccessDedicated\",\n  \"NumberOfMaster\": \"1\",\n  \"NumberOfNode\": \"2\"\n}\n */\nconst getInteger = (str) => (\n    (str === 'Openstack')? 2 :\n    (str === 'Azure')? 3 :\n    (str === 'GCP')? 4 : false\n)\nconst getInteger_ip = (str) => (\n    (str === 'Static')? 1 :\n    (str === 'Dynamic')? 2 : false\n)\nconst createFormat = (data,loc) => (\n    {\n        \"region\":data['Region'],\n        \"cloudlet\":{\n            \"key\":{\n                \"operator_key\":{\"name\":data['OperatorName']},\n                \"name\":data['CloudletName']\n            },\n            \"location\":{\n                // \"latitude\":Number((loc)?loc.lat:0),\n                // \"longitude\":Number((loc)?loc.long:0),\n                \"latitude\":Number(data['Latitude']),\n                \"longitude\":Number(data['Longitude']),\n                \"timestamp\":{}\n            },\n            \"ip_support\":getInteger_ip(data['IPSupport']),\n            \"num_dynamic_ips\":Number(data['NumberOfDynamicIPs']),\n            \"physical_name\":data['PhysicalName'],\n            \"platform_type\":getInteger(data['PlatformType'])\n        }\n    }\n)\nconst mapStateToProps = (state) => {\n    let account = state.registryAccount.account;\n    let dimm =  state.btnMnmt;\n    let accountInfo = account ? account + Math.random()*10000 : null;\n    let dimmInfo = dimm ? dimm : null;\n    let submitVal = null;\n    let selectedRegion = null;\n    let selectedCloudlet = null;\n    let selectedOperator = null;\n    let selectedApp = null;\n    let flavors = null;\n    let validateValue = {};\n    \n    //TODO : 건희 20190902 새롭게 추가된 필드 'Cloudlet Type'데 대한 기능 구현 ()\n    /**\n     * EDGECLOUD-1187 Web UI - need to add new fields for creating a new cloudlet\n     * Web UI - need to add new fields for creating a new cloudlet\n\n     we need to add the following fields when creating a new cloudlet:\n     Type - with pulldown values of 'Openstack', 'Azure', 'GCP'.\n     Location - this is a freeform string value but has to match what is configured in the vault. Right now we use the values of 'hamburg' and 'bonn'. Should we use a pulldown with the pulldown of 'Hamburg', 'Bonn'?\n\n     Type needs to send the following in the create cloudlet message:\n     for openstack: \"platform_type\":2\n     for azure: \"platform_type\":3\n     for gcp: \"platform_type\":4\n\n     Location needs to send the following in the create cloudlet message:\n     \"physical_name\":\"hamburg\"\n     \"physical_name\":\"bonn\"\n     */\n    if(state.form.createAppFormDefault && state.form.createAppFormDefault.values && state.getRegion.region){\n        state.form.createAppFormDefault.values.Latitude = state.getRegion.region.lat;\n        state.form.createAppFormDefault.values.Longitude = state.getRegion.region.long;\n    }\n    \n    if(state.form.createAppFormDefault && state.form.createAppFormDefault.values && state.form.createAppFormDefault.submitSucceeded) {\n        let enableValue = reducer.filterDeleteKey(state.form.createAppFormDefault.values, 'Edit')\n        submitVal = createFormat(enableValue,state.getRegion.region);\n        validateValue = state.form.createAppFormDefault.values;\n    }\n    \n    let region = state.changeRegion\n        ? {\n            value: state.changeRegion.region\n        }\n        : {};\n\n    let formClusterInst= state.form.createAppFormDefault\n        ? {\n            values: state.form.createAppFormDefault.values,\n            submitSucceeded: state.form.createAppFormDefault.submitSucceeded\n        }\n        : {};\n    let regionInfo = (state.regionInfo)?state.regionInfo:null;\n    return {\n        accountInfo,\n        dimmInfo,\n        itemLabel: state.computeItem.item,\n        userToken : (state.user.userToken) ? state.userToken: null,\n        submitValues: submitVal,\n        region: region.value,\n        flavors: (state.showFlavor) ? state.showFlavor.flavor : null,\n        selectOrg : state.selectOrg.org?state.selectOrg.org:null,\n        userRole : state.showUserRole?state.showUserRole.role:null,\n        validateValue:validateValue,\n        formClusterInst : formClusterInst,\n        getRegion : (state.getRegion)?state.getRegion.region:null,\n        regionInfo: regionInfo\n    }\n    \n    // return (dimm) ? {\n    //     dimmInfo : dimm\n    // } : (account)? {\n    //     accountInfo: account + Math.random()*10000\n    // } : null;\n};\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleChangeSite: (data) => { dispatch(actions.changeSite(data))},\n        handleInjectDeveloper: (data) => { dispatch(actions.registDeveloper(data))},\n        handleLoadingSpinner: (data) => { dispatch(actions.loadingSpinner(data))},\n        handleAlertInfo: (mode,msg) => { dispatch(actions.alertInfo(mode,msg))},\n        handleStateTutor: (data) => { dispatch(actions.tutorStatus(data))},\n        handleGetRegion: (data) => { dispatch(actions.getRegion(data)) }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(RegistryCloudletViewer);\n\n\n"]},"metadata":{},"sourceType":"module"}