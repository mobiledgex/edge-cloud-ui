{"ast":null,"code":"// prng4.js - uses Arcfour as a PRNG\nfunction Arcfour() {\n  this.i = 0;\n  this.j = 0;\n  this.S = new Array();\n} // Initialize arcfour context from key, an array of ints, each from [0..255]\n\n\nfunction ARC4init(key) {\n  var i, j, t;\n\n  for (i = 0; i < 256; ++i) {\n    this.S[i] = i;\n  }\n\n  j = 0;\n\n  for (i = 0; i < 256; ++i) {\n    j = j + this.S[i] + key[i % key.length] & 255;\n    t = this.S[i];\n    this.S[i] = this.S[j];\n    this.S[j] = t;\n  }\n\n  this.i = 0;\n  this.j = 0;\n}\n\nfunction ARC4next() {\n  var t;\n  this.i = this.i + 1 & 255;\n  this.j = this.j + this.S[this.i] & 255;\n  t = this.S[this.i];\n  this.S[this.i] = this.S[this.j];\n  this.S[this.j] = t;\n  return this.S[t + this.S[this.i] & 255];\n}\n\nArcfour.prototype.init = ARC4init;\nArcfour.prototype.next = ARC4next; // Plug in your RNG constructor here\n\nfunction prng_newstate() {\n  return new Arcfour();\n} // Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\n\n\nvar rng_psize = 256; // rng.js\n// Random number generator - requires a PRNG backend, e.g. prng4.js\n// For best results, put code like\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n// in your main HTML document.\n\nvar rng_state;\nvar rng_pool;\nvar rng_pptr; // Mix in a 32-bit integer into the pool\n\nfunction rng_seed_int(x) {\n  rng_pool[rng_pptr++] ^= x & 255;\n  rng_pool[rng_pptr++] ^= x >> 8 & 255;\n  rng_pool[rng_pptr++] ^= x >> 16 & 255;\n  rng_pool[rng_pptr++] ^= x >> 24 & 255;\n  if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n} // Mix in the current time (w/milliseconds) into the pool\n\n\nfunction rng_seed_time() {\n  rng_seed_int(new Date().getTime());\n} // Initialize the pool with junk if needed.\n\n\nif (rng_pool == null) {\n  rng_pool = new Array();\n  rng_pptr = 0;\n  var t;\n\n  if (typeof window !== 'undefined') {\n    if (window.crypto && window.crypto.getRandomValues) {\n      // Use webcrypto if available\n      var ua = new Uint8Array(32);\n      window.crypto.getRandomValues(ua);\n\n      for (t = 0; t < 32; ++t) {\n        rng_pool[rng_pptr++] = ua[t];\n      }\n    }\n\n    if (navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n      // Extract entropy (256 bits) from NS4 RNG if available\n      var z = window.crypto.random(32);\n\n      for (t = 0; t < z.length; ++t) {\n        rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n      }\n    }\n  } else {// TODOï¼š we are in nodejs mode, consider to add some randomness from node js functions\n  }\n\n  while (rng_pptr < rng_psize) {\n    // extract some randomness from Math.random()\n    t = Math.floor(65536 * Math.random());\n    rng_pool[rng_pptr++] = t >>> 8;\n    rng_pool[rng_pptr++] = t & 255;\n  }\n\n  rng_pptr = 0;\n  rng_seed_time(); //rng_seed_int(window.screenX);\n  //rng_seed_int(window.screenY);\n}\n\nfunction rng_get_byte() {\n  if (rng_state == null) {\n    rng_seed_time();\n    rng_state = prng_newstate();\n    rng_state.init(rng_pool);\n\n    for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {\n      rng_pool[rng_pptr] = 0;\n    }\n\n    rng_pptr = 0; //rng_pool = null;\n  } // TODO: allow reseeding after first request\n\n\n  return rng_state.next();\n}\n\nfunction rng_get_bytes(ba) {\n  var i;\n\n  for (i = 0; i < ba.length; ++i) {\n    ba[i] = rng_get_byte();\n  }\n}\n\nfunction SecureRandom() {}\n\nSecureRandom.prototype.nextBytes = rng_get_bytes;\nmodule.exports = SecureRandom;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/react-native-rsa/lib/rng.js"],"names":["Arcfour","i","j","S","Array","ARC4init","key","t","length","ARC4next","prototype","init","next","prng_newstate","rng_psize","rng_state","rng_pool","rng_pptr","rng_seed_int","x","rng_seed_time","Date","getTime","window","crypto","getRandomValues","ua","Uint8Array","navigator","appName","appVersion","z","random","charCodeAt","Math","floor","rng_get_byte","rng_get_bytes","ba","SecureRandom","nextBytes","module","exports"],"mappings":"AAAA;AAEA,SAASA,OAAT,GAAmB;AACjB,OAAKC,CAAL,GAAS,CAAT;AACA,OAAKC,CAAL,GAAS,CAAT;AACA,OAAKC,CAAL,GAAS,IAAIC,KAAJ,EAAT;AACD,C,CAED;;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,MAAIL,CAAJ,EAAOC,CAAP,EAAUK,CAAV;;AACA,OAAIN,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,GAAf,EAAoB,EAAEA,CAAtB;AACE,SAAKE,CAAL,CAAOF,CAAP,IAAYA,CAAZ;AADF;;AAEAC,EAAAA,CAAC,GAAG,CAAJ;;AACA,OAAID,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,GAAf,EAAoB,EAAEA,CAAtB,EAAyB;AACvBC,IAAAA,CAAC,GAAIA,CAAC,GAAG,KAAKC,CAAL,CAAOF,CAAP,CAAJ,GAAgBK,GAAG,CAACL,CAAC,GAAGK,GAAG,CAACE,MAAT,CAApB,GAAwC,GAA5C;AACAD,IAAAA,CAAC,GAAG,KAAKJ,CAAL,CAAOF,CAAP,CAAJ;AACA,SAAKE,CAAL,CAAOF,CAAP,IAAY,KAAKE,CAAL,CAAOD,CAAP,CAAZ;AACA,SAAKC,CAAL,CAAOD,CAAP,IAAYK,CAAZ;AACD;;AACD,OAAKN,CAAL,GAAS,CAAT;AACA,OAAKC,CAAL,GAAS,CAAT;AACD;;AAED,SAASO,QAAT,GAAoB;AAClB,MAAIF,CAAJ;AACA,OAAKN,CAAL,GAAU,KAAKA,CAAL,GAAS,CAAV,GAAe,GAAxB;AACA,OAAKC,CAAL,GAAU,KAAKA,CAAL,GAAS,KAAKC,CAAL,CAAO,KAAKF,CAAZ,CAAV,GAA4B,GAArC;AACAM,EAAAA,CAAC,GAAG,KAAKJ,CAAL,CAAO,KAAKF,CAAZ,CAAJ;AACA,OAAKE,CAAL,CAAO,KAAKF,CAAZ,IAAiB,KAAKE,CAAL,CAAO,KAAKD,CAAZ,CAAjB;AACA,OAAKC,CAAL,CAAO,KAAKD,CAAZ,IAAiBK,CAAjB;AACA,SAAO,KAAKJ,CAAL,CAAQI,CAAC,GAAG,KAAKJ,CAAL,CAAO,KAAKF,CAAZ,CAAL,GAAuB,GAA9B,CAAP;AACD;;AAEDD,OAAO,CAACU,SAAR,CAAkBC,IAAlB,GAAyBN,QAAzB;AACAL,OAAO,CAACU,SAAR,CAAkBE,IAAlB,GAAyBH,QAAzB,C,CAEA;;AACA,SAASI,aAAT,GAAyB;AACvB,SAAO,IAAIb,OAAJ,EAAP;AACD,C,CAED;AACA;;;AACA,IAAIc,SAAS,GAAG,GAAhB,C,CAEA;AAEA;AAEA;AACA;AACA;;AAEA,IAAIC,SAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,QAAJ,C,CAEA;;AACA,SAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACvBH,EAAAA,QAAQ,CAACC,QAAQ,EAAT,CAAR,IAAwBE,CAAC,GAAG,GAA5B;AACAH,EAAAA,QAAQ,CAACC,QAAQ,EAAT,CAAR,IAAyBE,CAAC,IAAI,CAAN,GAAW,GAAnC;AACAH,EAAAA,QAAQ,CAACC,QAAQ,EAAT,CAAR,IAAyBE,CAAC,IAAI,EAAN,GAAY,GAApC;AACAH,EAAAA,QAAQ,CAACC,QAAQ,EAAT,CAAR,IAAyBE,CAAC,IAAI,EAAN,GAAY,GAApC;AACA,MAAGF,QAAQ,IAAIH,SAAf,EAA0BG,QAAQ,IAAIH,SAAZ;AAC3B,C,CAED;;;AACA,SAASM,aAAT,GAAyB;AACvBF,EAAAA,YAAY,CAAC,IAAIG,IAAJ,GAAWC,OAAX,EAAD,CAAZ;AACD,C,CAED;;;AACA,IAAGN,QAAQ,IAAI,IAAf,EAAqB;AACnBA,EAAAA,QAAQ,GAAG,IAAIZ,KAAJ,EAAX;AACAa,EAAAA,QAAQ,GAAG,CAAX;AACA,MAAIV,CAAJ;;AAEA,MAAI,OAAOgB,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAGA,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcC,eAAlC,EAAmD;AACjD;AACA,UAAIC,EAAE,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAT;AACAJ,MAAAA,MAAM,CAACC,MAAP,CAAcC,eAAd,CAA8BC,EAA9B;;AACA,WAAInB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,EAAf,EAAmB,EAAEA,CAArB;AACES,QAAAA,QAAQ,CAACC,QAAQ,EAAT,CAAR,GAAuBS,EAAE,CAACnB,CAAD,CAAzB;AADF;AAED;;AAED,QAAGqB,SAAS,CAACC,OAAV,IAAqB,UAArB,IAAmCD,SAAS,CAACE,UAAV,GAAuB,GAA1D,IAAiEP,MAAM,CAACC,MAA3E,EAAmF;AACjF;AACA,UAAIO,CAAC,GAAGR,MAAM,CAACC,MAAP,CAAcQ,MAAd,CAAqB,EAArB,CAAR;;AACA,WAAIzB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGwB,CAAC,CAACvB,MAAjB,EAAyB,EAAED,CAA3B;AACES,QAAAA,QAAQ,CAACC,QAAQ,EAAT,CAAR,GAAuBc,CAAC,CAACE,UAAF,CAAa1B,CAAb,IAAkB,GAAzC;AADF;AAED;AACF,GAfD,MAeO,CACL;AAED;;AAED,SAAMU,QAAQ,GAAGH,SAAjB,EAA4B;AAAG;AAC7BP,IAAAA,CAAC,GAAG2B,IAAI,CAACC,KAAL,CAAW,QAAQD,IAAI,CAACF,MAAL,EAAnB,CAAJ;AACAhB,IAAAA,QAAQ,CAACC,QAAQ,EAAT,CAAR,GAAuBV,CAAC,KAAK,CAA7B;AACAS,IAAAA,QAAQ,CAACC,QAAQ,EAAT,CAAR,GAAuBV,CAAC,GAAG,GAA3B;AACD;;AACDU,EAAAA,QAAQ,GAAG,CAAX;AACAG,EAAAA,aAAa,GA/BM,CAgCnB;AACA;AACD;;AAED,SAASgB,YAAT,GAAwB;AACtB,MAAGrB,SAAS,IAAI,IAAhB,EAAsB;AACpBK,IAAAA,aAAa;AACbL,IAAAA,SAAS,GAAGF,aAAa,EAAzB;AACAE,IAAAA,SAAS,CAACJ,IAAV,CAAeK,QAAf;;AACA,SAAIC,QAAQ,GAAG,CAAf,EAAkBA,QAAQ,GAAGD,QAAQ,CAACR,MAAtC,EAA8C,EAAES,QAAhD;AACED,MAAAA,QAAQ,CAACC,QAAD,CAAR,GAAqB,CAArB;AADF;;AAEAA,IAAAA,QAAQ,GAAG,CAAX,CANoB,CAOpB;AACD,GATqB,CAUtB;;;AACA,SAAOF,SAAS,CAACH,IAAV,EAAP;AACD;;AAED,SAASyB,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,MAAIrC,CAAJ;;AACA,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGqC,EAAE,CAAC9B,MAAlB,EAA0B,EAAEP,CAA5B;AAA+BqC,IAAAA,EAAE,CAACrC,CAAD,CAAF,GAAQmC,YAAY,EAApB;AAA/B;AACD;;AAED,SAASG,YAAT,GAAwB,CAAE;;AAE1BA,YAAY,CAAC7B,SAAb,CAAuB8B,SAAvB,GAAmCH,aAAnC;AAEAI,MAAM,CAACC,OAAP,GAAiBH,YAAjB","sourcesContent":["// prng4.js - uses Arcfour as a PRNG\n\nfunction Arcfour() {\n  this.i = 0;\n  this.j = 0;\n  this.S = new Array();\n}\n\n// Initialize arcfour context from key, an array of ints, each from [0..255]\nfunction ARC4init(key) {\n  var i, j, t;\n  for(i = 0; i < 256; ++i)\n    this.S[i] = i;\n  j = 0;\n  for(i = 0; i < 256; ++i) {\n    j = (j + this.S[i] + key[i % key.length]) & 255;\n    t = this.S[i];\n    this.S[i] = this.S[j];\n    this.S[j] = t;\n  }\n  this.i = 0;\n  this.j = 0;\n}\n\nfunction ARC4next() {\n  var t;\n  this.i = (this.i + 1) & 255;\n  this.j = (this.j + this.S[this.i]) & 255;\n  t = this.S[this.i];\n  this.S[this.i] = this.S[this.j];\n  this.S[this.j] = t;\n  return this.S[(t + this.S[this.i]) & 255];\n}\n\nArcfour.prototype.init = ARC4init;\nArcfour.prototype.next = ARC4next;\n\n// Plug in your RNG constructor here\nfunction prng_newstate() {\n  return new Arcfour();\n}\n\n// Pool size must be a multiple of 4 and greater than 32.\n// An array of bytes the size of the pool will be passed to init()\nvar rng_psize = 256;\n\n// rng.js\n\n// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n// For best results, put code like\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n// in your main HTML document.\n\nvar rng_state;\nvar rng_pool;\nvar rng_pptr;\n\n// Mix in a 32-bit integer into the pool\nfunction rng_seed_int(x) {\n  rng_pool[rng_pptr++] ^= x & 255;\n  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n}\n\n// Mix in the current time (w/milliseconds) into the pool\nfunction rng_seed_time() {\n  rng_seed_int(new Date().getTime());\n}\n\n// Initialize the pool with junk if needed.\nif(rng_pool == null) {\n  rng_pool = new Array();\n  rng_pptr = 0;\n  var t;\n\n  if (typeof window !== 'undefined') {\n    if(window.crypto && window.crypto.getRandomValues) {\n      // Use webcrypto if available\n      var ua = new Uint8Array(32);\n      window.crypto.getRandomValues(ua);\n      for(t = 0; t < 32; ++t)\n        rng_pool[rng_pptr++] = ua[t];\n    }\n\n    if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n      // Extract entropy (256 bits) from NS4 RNG if available\n      var z = window.crypto.random(32);\n      for(t = 0; t < z.length; ++t)\n        rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n    }\n  } else {\n    // TODOï¼š we are in nodejs mode, consider to add some randomness from node js functions\n\n  }\n\n  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n    t = Math.floor(65536 * Math.random());\n    rng_pool[rng_pptr++] = t >>> 8;\n    rng_pool[rng_pptr++] = t & 255;\n  }\n  rng_pptr = 0;\n  rng_seed_time();\n  //rng_seed_int(window.screenX);\n  //rng_seed_int(window.screenY);\n}\n\nfunction rng_get_byte() {\n  if(rng_state == null) {\n    rng_seed_time();\n    rng_state = prng_newstate();\n    rng_state.init(rng_pool);\n    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n      rng_pool[rng_pptr] = 0;\n    rng_pptr = 0;\n    //rng_pool = null;\n  }\n  // TODO: allow reseeding after first request\n  return rng_state.next();\n}\n\nfunction rng_get_bytes(ba) {\n  var i;\n  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n}\n\nfunction SecureRandom() {}\n\nSecureRandom.prototype.nextBytes = rng_get_bytes;\n\nmodule.exports = SecureRandom;"]},"metadata":{},"sourceType":"script"}