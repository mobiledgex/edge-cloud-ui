{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/registryClusterInstViewer.js\";\nimport React from 'react';\nimport { Header, Button, Table, Icon, Input, Tab, Item } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport PopDetailViewer from './popDetailViewer';\nimport PopUserViewer from './popUserViewer';\nimport PopAddUserViewer from './popAddUserViewer';\nimport './styles.css';\nimport ContainerDimensions from 'react-container-dimensions';\nimport _ from \"lodash\";\nimport * as reducer from '../utils';\nimport * as service from '../services/service_compute_service';\nimport SiteFourCreateInstForm from \"./siteFourCreateInstForm\";\nimport Alert from \"react-s-alert\";\nimport SiteFourCreateFormDefault from \"./siteFourCreateFormDefault\";\nvar ReactGridLayout = WidthProvider(RGL);\nvar headerStyle = {\n  backgroundImage: 'url()'\n};\nvar horizon = 6;\nvar vertical = 20;\nvar layout = [{\n  \"w\": 19,\n  \"x\": 0,\n  \"y\": 0,\n  \"i\": \"0\",\n  \"minW\": 8,\n  \"moved\": false,\n  \"static\": false,\n  \"title\": \"Developer\"\n}];\nvar _self = null;\nvar colors = ['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'grey'];\nvar panes = [{\n  menuItem: 'Cluster Instance Deployment',\n  render: function render(props) {\n    return React.createElement(Tab.Pane, {\n      attached: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(SiteFourCreateInstForm, {\n      data: props,\n      pId: 0,\n      getUserRole: props.userrole,\n      toggleSubmit: props.toggleSubmit,\n      validError: props.error,\n      onSubmit: function onSubmit() {\n        return console.log('submit form');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n  }\n} // { menuItem: 'Docker deployment', render: () => <Tab.Pane  attached={false} pId={1}>None</Tab.Pane> },\n// { menuItem: 'VM deployment', render: () => <Tab.Pane attached={false} pId={2}>None</Tab.Pane> }\n];\nvar ipaccessArr = ['Dedicated', 'Shared'];\n\nvar RegistryClusterInstViewer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RegistryClusterInstViewer, _React$Component);\n\n  function RegistryClusterInstViewer(props) {\n    var _this;\n\n    _classCallCheck(this, RegistryClusterInstViewer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegistryClusterInstViewer).call(this, props));\n\n    _this.show = function (dim) {\n      return _this.setState({\n        dimmer: dim,\n        openDetail: true\n      });\n    };\n\n    _this.close = function () {\n      _this.setState({\n        open: false\n      });\n\n      _this.props.handleInjectDeveloper(null);\n    };\n\n    _this.closeDetail = function () {\n      _this.setState({\n        openDetail: false\n      });\n    };\n\n    _this.closeUser = function () {\n      _this.setState({\n        openUser: false\n      });\n    };\n\n    _this.closeAddUser = function () {\n      _this.setState({\n        openAdd: false\n      });\n    };\n\n    _this.receiveSubmit = function (result, body) {\n      var paseData = result.data;\n\n      if (paseData.error && !_this.state.errorClose) {\n        //this.setState({clusterInstCreate:false})\n        _this.props.handleLoadingSpinner(false);\n\n        if (paseData.error == 'Key already exists') {} else {\n          _this.props.handleAlertInfo('error', paseData.error);\n        }\n      } // if(paseData.message) {\n      //     Alert.error(paseData.message, {\n      //         position: 'top-right',\n      //         effect: 'slide',\n      //         onShow: function () {\n      //             console.log('aye!')\n      //         },\n      //         beep: true,\n      //         timeout: 5000,\n      //         offset: 100\n      //     });\n      // } else {\n      //     let splitData = JSON.parse( \"[\"+paseData.split('}\\n{').join('},\\n{')+\"]\" );\n      //     if(result.data.indexOf('successfully') > -1 || result.data.indexOf('ok') > -1) {\n      //         Alert.success(\"Success!\", {\n      //             position: 'top-right',\n      //             effect: 'slide',\n      //             onShow: function () {\n      //                 console.log('aye!')\n      //             },\n      //             beep: true,\n      //             timeout: 5000,\n      //             offset: 100\n      //         });\n      //         _self.props.success();\n      //         _self.reqCount = 0;\n      //     }\n      // }\n\n    };\n\n    _self = _assertThisInitialized(_this);\n\n    var layout = _this.generateLayout();\n\n    _this.state = {\n      layout: layout,\n      open: false,\n      openAdd: false,\n      openDetail: false,\n      dimmer: false,\n      activeItem: '',\n      dummyData: [],\n      detailViewData: null,\n      selected: {},\n      openUser: false,\n      orgData: {},\n      selectUse: null,\n      resultData: null,\n      cloudlets: [],\n      operators: [],\n      clustinst: [],\n      apps: [],\n      clusterInstCreate: true,\n      toggleSubmit: false,\n      validateError: [],\n      regSuccess: true,\n      errorClose: false,\n      keysData: [{\n        'Region': {\n          label: 'Region',\n          type: 'RenderSelect',\n          necessary: true,\n          tip: 'Select region where you want to deploy the cluster.',\n          active: true,\n          items: []\n        },\n        'ClusterName': {\n          label: 'Cluster Name',\n          type: 'RenderInputCluster',\n          necessary: true,\n          tip: 'Enter name of your cluster.',\n          active: true\n        },\n        'OrganizationName': {\n          label: 'Organization Name',\n          type: 'RenderInputDisabled',\n          necessary: true,\n          tip: 'This is the name of the organization you are currently managing.',\n          active: true,\n          items: ['', '']\n        },\n        'Operator': {\n          label: 'Operator',\n          type: 'RenderSelect',\n          necessary: true,\n          tip: 'Which operator do you want to deploy this cluster? Please select one.',\n          active: true,\n          items: ['', '']\n        },\n        'Cloudlet': {\n          label: 'Cloudlet',\n          type: 'RenderDropDown',\n          necessary: true,\n          tip: 'Which cloudlet(s) do you want to deploy this cluster?',\n          active: true,\n          items: ['', '']\n        },\n        'DeploymentType': {\n          label: 'Deployment Type',\n          type: 'RenderSelect',\n          necessary: true,\n          tip: 'Do you plan to deploy your application in kubernetes cluster? Or do you plan to deploy it as a plain docker container?',\n          active: true,\n          items: ['Docker', 'Kubernetes']\n        },\n        'IpAccess': {\n          label: 'IP Access',\n          type: 'RenderSelect',\n          necessary: false,\n          tip: 'Shared IP Access represents that you would be sharing a Root Load Balancer with other developers. Dedicated IP Access represents that you would have a dedicated Root Load Balancer.',\n          items: ipaccessArr\n        },\n        'Flavor': {\n          label: 'Flavor',\n          type: 'RenderSelect',\n          necessary: true,\n          tip: 'What flavor is needed to run your application?',\n          active: true,\n          items: ['', '']\n        },\n        'NumberOfMaster': {\n          label: 'Number of Masters',\n          type: 'RenderInputDisabled',\n          necessary: false,\n          tip: 'This representsÂ Kubernetes Master where it is responsible for maintaining the desired state for your cluster.',\n          value: null\n        },\n        'NumberOfNode': {\n          label: 'Number of Nodes',\n          type: 'RenderInputNum',\n          necessary: false,\n          tip: 'What is the number of nodes you want in this cluster? The nodes in a cluster are the machines that run your applications.',\n          value: null\n        }\n      }, {}],\n      fakeData: [{\n        'Region': '',\n        'ClusterName': '',\n        'OrganizationName': '',\n        'Operator': '',\n        'Cloudlet': '',\n        'DeploymentType': '',\n        'IpAccess': '',\n        'Flavor': '',\n        'NumberOfMaster': '1',\n        'NumberOfNode': '1'\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(RegistryClusterInstViewer, [{\n    key: \"generateDOM\",\n    value: function generateDOM(open, dimmer, data, keysData, hideHeader, region) {\n      var _this2 = this;\n\n      var panelParams = {\n        data: data,\n        keys: keysData,\n        region: region,\n        handleLoadingSpinner: this.props.handleLoadingSpinner,\n        userrole: localStorage.selectRole\n      };\n      return layout.map(function (item, i) {\n        return i === 0 ? React.createElement(\"div\", {\n          className: \"round_panel\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"grid_table\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, React.createElement(Tab, Object.assign({\n          className: \"grid_tabs\",\n          menu: {\n            secondary: true,\n            pointing: true,\n            inverted: true,\n            attached: false,\n            tabular: false\n          },\n          panes: panes\n        }, panelParams, {\n          gotoUrl: _this2.gotoUrl,\n          toggleSubmit: _this2.state.toggleSubmit,\n          error: _this2.state.validateError,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        })))) : React.createElement(\"div\", {\n          className: \"round_panel\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"generateLayout\",\n    value: function generateLayout() {\n      var p = this.props;\n      return layout;\n    }\n  }, {\n    key: \"onLayoutChange\",\n    value: function onLayoutChange(layout) {//this.props.onLayoutChange(layout);\n    }\n  }, {\n    key: \"setFildData\",\n    value: function setFildData() {\n      //\n      if (_self.props.devData.length > 0) {\n        _self.setState({\n          dummyData: _self.props.devData,\n          resultData: !_self.state.resultData ? _self.props.devData : _self.state.resultData\n        });\n      } else {\n        _self.setState({\n          dummyData: _self.state.fakeData,\n          resultData: !_self.state.resultData ? _self.props.devData : _self.state.resultData\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setFildData();\n      /************\n       * set Organization Name\n       * **********/\n\n      var assObj = Object.assign([], this.state.fakeData);\n      assObj[0].OrganizationName = localStorage.selectOrg;\n      this.setState({\n        fakeData: assObj\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this3 = this;\n\n      if (nextProps.accountInfo) {\n        this.setState({\n          dimmer: 'blurring',\n          open: true\n        });\n      }\n\n      if (nextProps.devData.length > 1) {\n        this.setState({\n          dummyData: nextProps.devData,\n          resultData: !this.state.resultData ? nextProps.devData : this.state.resultData\n        });\n      } else {\n        this.setState({\n          dummyData: this.state.fakeData,\n          resultData: !this.state.resultData ? nextProps.devData : this.state.resultData\n        });\n      }\n\n      if (nextProps.regionInfo.region.length) {\n        var assObj = Object.assign([], this.state.keysData);\n        assObj[0].Region.items = nextProps.regionInfo.region;\n      }\n\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n      this.setState({\n        toggleSubmit: false\n      });\n\n      if (nextProps.submitValues && !this.state.toggleSubmit) {\n        var cluster = ['Region', 'ClusterName', 'OrganizationName', 'Operator', 'Cloudlet', 'DeploymentType', 'Flavor'];\n        var error = [];\n        cluster.map(function (item) {\n          if (!nextProps.validateValue[item]) {\n            error.push(item);\n          }\n        }); //close tutorial\n\n        this.props.handleStateTutor('done');\n\n        if (nextProps.formClusterInst.submitSucceeded && error.length == 0) {\n          this.setState({\n            toggleSubmit: true,\n            validateError: error,\n            regSuccess: true\n          });\n          this.props.handleLoadingSpinner(true);\n          service.createNewMultiClusterInst('CreateClusterInst', {\n            params: nextProps.submitValues,\n            token: store ? store.userToken : 'null'\n          }, this.receiveSubmit, nextProps.validateValue.Cloudlet);\n          setTimeout(function () {\n            _this3.props.handleLoadingSpinner(false);\n\n            _this3.props.gotoUrl();\n\n            _this3.setState({\n              errorClose: true\n            });\n          }, 3000);\n        } else {\n          this.setState({\n            validateError: error,\n            toggleSubmit: true\n          });\n        }\n      }\n      /************\n       * set list of flavors\n       * **********/\n      // if(nextProps.flavors) {\n      //     let flavorGroup = reducer.groupBy(nextProps.flavors, 'FlavorName');\n      //     let flavorKeys = Object.keys(flavorGroup);\n      //     let assObj = Object.assign([], this.state.keysData);\n      //     assObj[0].MasterFlavor.items = flavorKeys;\n      //     assObj[0].NodeFlavor.items = flavorKeys;\n      //     this.setState({keysData:assObj})\n      //\n      // }\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          open = _this$state.open,\n          dimmer = _this$state.dimmer,\n          dummyData = _this$state.dummyData;\n      var hiddenKeys = this.props.hiddenKeys;\n      return React.createElement(\"div\", {\n        className: \"regis_container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(\"div\", Object.assign({\n        draggableHandle: true,\n        layout: this.state.layout,\n        onLayoutChange: this.onLayoutChange\n      }, this.props, {\n        style: {\n          overflowY: 'visible'\n        },\n        useCSSTransforms: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }), this.generateDOM(open, dimmer, dummyData, this.state.keysData, hiddenKeys, this.props.region)), React.createElement(PopDetailViewer, {\n        data: this.state.detailViewData,\n        dimmer: false,\n        open: this.state.openDetail,\n        close: this.closeDetail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }), React.createElement(PopUserViewer, {\n        data: this.state.detailViewData,\n        dimmer: false,\n        open: this.state.openUser,\n        close: this.closeUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }), React.createElement(PopAddUserViewer, {\n        data: this.state.selected,\n        dimmer: false,\n        open: this.state.openAdd,\n        close: this.closeAddUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return RegistryClusterInstViewer;\n}(React.Component);\n/*\n{\n  \"Region\": \"US\",\n  \"ClusterName\": \"myClusterInst0513\",\n  \"OrganizationName\": \"TDG\",\n  \"Operator\": \"RCI\",\n  \"Cloudlet\": \"toronto-cloudlet\",\n  \"Flavor\": \"m4.large\",\n  \"IpAccess\": \"IpAccessDedicated\",\n  \"NumberOfMaster\": \"1\",\n  \"NumberOfNode\": \"2\"\n}\n */\n\n\nRegistryClusterInstViewer.defaultProps = {\n  className: \"layout\",\n  items: 20,\n  rowHeight: 30,\n  cols: 12,\n  width: 1600\n};\n\nvar getInteger = function getInteger(str) {\n  return str === 'Dedicated' ? 1 : str === 'Shared' ? 3 : false;\n};\n\nvar createFormat = function createFormat(data) {\n  return {\n    \"region\": data['Region'],\n    \"clusterinst\": {\n      \"key\": {\n        \"cluster_key\": {\n          \"name\": data['ClusterName']\n        },\n        \"cloudlet_key\": {\n          \"operator_key\": {\n            \"name\": data['Operator']\n          },\n          \"name\": data['Cloudlet']\n        },\n        \"developer\": data['OrganizationName']\n      },\n      \"deployment\": data['DeploymentType'],\n      \"flavor\": {\n        \"name\": data['Flavor']\n      },\n      \"ip_access\": parseInt(getInteger(data['IpAccess'])),\n      \"num_masters\": parseInt(data['NumberOfMaster']),\n      \"num_nodes\": parseInt(data['NumberOfNode'])\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var account = state.registryAccount.account;\n  var dimm = state.btnMnmt;\n  var accountInfo = account ? account + Math.random() * 10000 : null;\n  var dimmInfo = dimm ? dimm : null;\n  var submitVal = null;\n  var selectedRegion = null;\n  var selectedCloudlet = null;\n  var selectedOperator = null;\n  var selectedApp = null;\n  var flavors = null;\n  var validateValue = null;\n\n  if (state.form.createAppFormDefault) {\n    if (state.form.createAppFormDefault.values.Region !== \"\") {\n      selectedRegion = state.form.createAppFormDefault.values.Region;\n    }\n\n    if (state.form.createAppFormDefault.values.Cloudlet !== \"\") {\n      selectedCloudlet = state.form.createAppFormDefault.values.Cloudlet;\n    }\n\n    if (state.form.createAppFormDefault.values.Operator !== \"\") {\n      selectedOperator = state.form.createAppFormDefault.values.Operator;\n    }\n\n    if (state.form.createAppFormDefault.values.AppName !== \"\") {\n      selectedApp = state.form.createAppFormDefault.values.AppName;\n    } // if(state.form.createAppFormDefault.values.AppName !== \"\") {\n    //     selectedApp = state.form.createAppFormDefault.values.AppName;\n    // }\n\n\n    if (state.form.createAppFormDefault.values && state.form.createAppFormDefault.submitSucceeded) {\n      var enableValue = reducer.filterDeleteKey(state.form.createAppFormDefault.values, 'Edit');\n\n      if (enableValue.DeploymentType === \"Docker\") {\n        enableValue.NumberOfMaster = 0;\n        enableValue.NumberOfNode = 0;\n        enableValue.DeploymentType = \"docker\";\n      }\n\n      if (enableValue.DeploymentType === \"Kubernetes\") {\n        enableValue.DeploymentType = \"kubernetes\";\n      }\n\n      submitVal = createFormat(enableValue);\n      validateValue = state.form.createAppFormDefault.values;\n    }\n  }\n\n  var region = state.changeRegion ? {\n    value: state.changeRegion.region\n  } : {};\n  var formClusterInst = state.form.createAppFormDefault ? {\n    values: state.form.createAppFormDefault.values,\n    submitSucceeded: state.form.createAppFormDefault.submitSucceeded\n  } : {};\n  var regionInfo = state.regionInfo ? state.regionInfo : null;\n  return {\n    accountInfo: accountInfo,\n    dimmInfo: dimmInfo,\n    itemLabel: state.computeItem.item,\n    userToken: state.user.userToken ? state.userToken : null,\n    submitValues: submitVal,\n    region: region.value,\n    flavors: state.showFlavor ? state.showFlavor.flavor : null,\n    selectOrg: state.selectOrg.org ? state.selectOrg.org : null,\n    userRole: state.showUserRole ? state.showUserRole.role : null,\n    validateValue: validateValue,\n    formClusterInst: formClusterInst,\n    regionInfo: regionInfo\n  }; // return (dimm) ? {\n  //     dimmInfo : dimm\n  // } : (account)? {\n  //     accountInfo: account + Math.random()*10000\n  // } : null;\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleChangeSite: function handleChangeSite(data) {\n      dispatch(actions.changeSite(data));\n    },\n    handleInjectDeveloper: function handleInjectDeveloper(data) {\n      dispatch(actions.registDeveloper(data));\n    },\n    handleLoadingSpinner: function handleLoadingSpinner(data) {\n      dispatch(actions.loadingSpinner(data));\n    },\n    handleAlertInfo: function handleAlertInfo(mode, msg) {\n      dispatch(actions.alertInfo(mode, msg));\n    },\n    handleStateTutor: function handleStateTutor(data) {\n      dispatch(actions.tutorStatus(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(RegistryClusterInstViewer);","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/registryClusterInstViewer.js"],"names":["React","Header","Button","Table","Icon","Input","Tab","Item","connect","actions","RGL","WidthProvider","PopDetailViewer","PopUserViewer","PopAddUserViewer","ContainerDimensions","_","reducer","service","SiteFourCreateInstForm","Alert","SiteFourCreateFormDefault","ReactGridLayout","headerStyle","backgroundImage","horizon","vertical","layout","_self","colors","panes","menuItem","render","props","userrole","toggleSubmit","error","console","log","ipaccessArr","RegistryClusterInstViewer","show","dim","setState","dimmer","openDetail","close","open","handleInjectDeveloper","closeDetail","closeUser","openUser","closeAddUser","openAdd","receiveSubmit","result","body","paseData","data","state","errorClose","handleLoadingSpinner","handleAlertInfo","generateLayout","activeItem","dummyData","detailViewData","selected","orgData","selectUse","resultData","cloudlets","operators","clustinst","apps","clusterInstCreate","validateError","regSuccess","keysData","label","type","necessary","tip","active","items","value","fakeData","hideHeader","region","panelParams","keys","localStorage","selectRole","map","item","i","secondary","pointing","inverted","attached","tabular","gotoUrl","p","devData","length","setFildData","assObj","Object","assign","OrganizationName","selectOrg","nextProps","nextContext","accountInfo","regionInfo","Region","store","PROJECT_INIT","JSON","parse","submitValues","cluster","validateValue","push","handleStateTutor","formClusterInst","submitSucceeded","createNewMultiClusterInst","params","token","userToken","Cloudlet","setTimeout","hiddenKeys","onLayoutChange","overflowY","generateDOM","Component","defaultProps","className","rowHeight","cols","width","getInteger","str","createFormat","parseInt","mapStateToProps","account","registryAccount","dimm","btnMnmt","Math","random","dimmInfo","submitVal","selectedRegion","selectedCloudlet","selectedOperator","selectedApp","flavors","form","createAppFormDefault","values","Operator","AppName","enableValue","filterDeleteKey","DeploymentType","NumberOfMaster","NumberOfNode","changeRegion","itemLabel","computeItem","user","showFlavor","flavor","org","userRole","showUserRole","role","mapDispatchProps","dispatch","handleChangeSite","changeSite","registDeveloper","loadingSpinner","mode","msg","alertInfo","tutorStatus"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Header, Button, Table, Icon, Input, Tab, Item} from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\n\nimport PopDetailViewer from './popDetailViewer';\nimport PopUserViewer from './popUserViewer';\nimport PopAddUserViewer from './popAddUserViewer';\nimport './styles.css';\nimport ContainerDimensions from 'react-container-dimensions'\nimport _ from \"lodash\";\nimport * as reducer from '../utils'\n\nimport * as service from '../services/service_compute_service';\nimport SiteFourCreateInstForm from \"./siteFourCreateInstForm\";\nimport Alert from \"react-s-alert\";\nimport SiteFourCreateFormDefault from \"./siteFourCreateFormDefault\";\nconst ReactGridLayout = WidthProvider(RGL);\n\n\nconst headerStyle = {\n    backgroundImage: 'url()'\n}\nvar horizon = 6;\nvar vertical = 20;\nvar layout = [\n    {\"w\":19,\"x\":0,\"y\":0,\"i\":\"0\", \"minW\":8, \"moved\":false,\"static\":false, \"title\":\"Developer\"}\n]\nlet _self = null;\nconst colors = [\n    'red',\n    'orange',\n    'yellow',\n    'olive',\n    'green',\n    'teal',\n    'blue',\n    'violet',\n    'purple',\n    'pink',\n    'brown',\n    'grey',\n]\n\nconst panes = [\n    { menuItem: 'Cluster Instance Deployment', render: (props) => <Tab.Pane attached={false}><SiteFourCreateInstForm data={props} pId={0} getUserRole={props.userrole} toggleSubmit={props.toggleSubmit} validError={props.error} onSubmit={() => console.log('submit form')}/></Tab.Pane> },\n    // { menuItem: 'Docker deployment', render: () => <Tab.Pane  attached={false} pId={1}>None</Tab.Pane> },\n    // { menuItem: 'VM deployment', render: () => <Tab.Pane attached={false} pId={2}>None</Tab.Pane> }\n]\nconst ipaccessArr = ['Dedicated','Shared'];\nclass RegistryClusterInstViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        _self = this;\n        const layout = this.generateLayout();\n\n        this.state = {\n            layout,\n            open: false,\n            openAdd: false,\n            openDetail:false,\n            dimmer:false,\n            activeItem:'',\n            dummyData : [],\n            detailViewData:null,\n            selected:{},\n            openUser:false,\n            orgData:{},\n            selectUse:null,\n            resultData:null,\n            cloudlets:[],\n            operators:[],\n            clustinst:[],\n            apps:[],\n            clusterInstCreate:true,\n            toggleSubmit:false,\n            validateError:[],\n            regSuccess:true,\n            errorClose:false,\n            keysData:[\n                {\n                    'Region':{label:'Region', type:'RenderSelect', necessary:true, tip:'Select region where you want to deploy the cluster.', active:true, items:[]},\n                    'ClusterName':{label:'Cluster Name', type:'RenderInputCluster', necessary:true, tip:'Enter name of your cluster.', active:true},\n                    'OrganizationName':{label:'Organization Name', type:'RenderInputDisabled', necessary:true, tip:'This is the name of the organization you are currently managing.', active:true, items:['','']},\n                    'Operator':{label:'Operator', type:'RenderSelect', necessary:true, tip:'Which operator do you want to deploy this cluster? Please select one.', active:true, items:['','']},\n                    'Cloudlet':{label:'Cloudlet', type:'RenderDropDown', necessary:true, tip:'Which cloudlet(s) do you want to deploy this cluster?', active:true, items:['','']},\n                    'DeploymentType':{label:'Deployment Type', type:'RenderSelect', necessary:true, tip:'Do you plan to deploy your application in kubernetes cluster? Or do you plan to deploy it as a plain docker container?', active:true, items:['Docker', 'Kubernetes']},\n                    'IpAccess':{label:'IP Access', type:'RenderSelect', necessary:false, tip:'Shared IP Access represents that you would be sharing a Root Load Balancer with other developers. Dedicated IP Access represents that you would have a dedicated Root Load Balancer.',items:ipaccessArr},\n                    'Flavor':{label:'Flavor', type:'RenderSelect', necessary:true, tip:'What flavor is needed to run your application?', active:true, items:['','']},\n                    'NumberOfMaster':{label:'Number of Masters', type:'RenderInputDisabled', necessary:false, tip:'This representsÂ Kubernetes Master where it is responsible for maintaining the desired state for your cluster.', value:null},\n                    'NumberOfNode':{label:'Number of Nodes', type:'RenderInputNum', necessary:false, tip:'What is the number of nodes you want in this cluster? The nodes in a cluster are the machines that run your applications.', value:null},\n                },\n                {\n\n                }\n            ],\n            fakeData:[\n                {\n                    'Region':'',\n                    'ClusterName':'',\n                    'OrganizationName':'',\n                    'Operator':'',\n                    'Cloudlet':'',\n                    'DeploymentType':'',\n                    'IpAccess':'',\n                    'Flavor':'',\n                    'NumberOfMaster':'1',\n                    'NumberOfNode':'1',\n                }\n            ]\n\n\n        };\n\n    }\n\n    \n    show = (dim) => this.setState({ dimmer:dim, openDetail: true })\n    close = () => {\n        this.setState({ open: false })\n        this.props.handleInjectDeveloper(null)\n    }\n    closeDetail = () => {\n        this.setState({ openDetail: false })\n    }\n    closeUser = () => {\n        this.setState({ openUser: false })\n    }\n    closeAddUser = () => {\n        this.setState({ openAdd: false })\n    }\n\n    generateDOM(open, dimmer, data, keysData, hideHeader, region) {\n\n        let panelParams = {data:data, keys:keysData, region:region, handleLoadingSpinner:this.props.handleLoadingSpinner, userrole:localStorage.selectRole}\n\n        return layout.map((item, i) => (\n\n            (i === 0)?\n                <div className=\"round_panel\" key={i}>\n                    <div className=\"grid_table\">\n                        <Tab className=\"grid_tabs\" menu={{ secondary: true, pointing: true, inverted: true, attached: false, tabular: false }} panes={panes}{...panelParams} gotoUrl={this.gotoUrl} toggleSubmit={this.state.toggleSubmit} error={this.state.validateError} />\n                    </div>\n                </div>\n                :\n                <div className=\"round_panel\" key={i}>\n                </div>\n\n\n        ))\n    }\n\n    generateLayout() {\n        const p = this.props;\n\n        return layout\n    }\n\n    onLayoutChange(layout) {\n        //this.props.onLayoutChange(layout);\n    }\n\n    setFildData() {\n        //\n        if(_self.props.devData.length > 0) {\n            _self.setState({dummyData:_self.props.devData, resultData:(!_self.state.resultData)?_self.props.devData:_self.state.resultData})\n        } else {\n            _self.setState({dummyData:_self.state.fakeData, resultData:(!_self.state.resultData)?_self.props.devData:_self.state.resultData})\n        }\n    }\n    receiveSubmit = (result, body) => {\n        \n        let paseData = result.data;\n        if(paseData.error && !this.state.errorClose) {\n            //this.setState({clusterInstCreate:false})\n            this.props.handleLoadingSpinner(false);\n            if(paseData.error == 'Key already exists'){\n                \n            } else {\n                this.props.handleAlertInfo('error',paseData.error)\n            }\n        }\n\n        // if(paseData.message) {\n        //     Alert.error(paseData.message, {\n        //         position: 'top-right',\n        //         effect: 'slide',\n        //         onShow: function () {\n        //             console.log('aye!')\n        //         },\n        //         beep: true,\n        //         timeout: 5000,\n        //         offset: 100\n        //     });\n        // } else {\n        //     let splitData = JSON.parse( \"[\"+paseData.split('}\\n{').join('},\\n{')+\"]\" );\n\n        //     if(result.data.indexOf('successfully') > -1 || result.data.indexOf('ok') > -1) {\n        //         Alert.success(\"Success!\", {\n        //             position: 'top-right',\n        //             effect: 'slide',\n        //             onShow: function () {\n        //                 console.log('aye!')\n        //             },\n        //             beep: true,\n        //             timeout: 5000,\n        //             offset: 100\n        //         });\n        //         _self.props.success();\n        //         _self.reqCount = 0;\n        //     }\n        // }\n\n    }\n\n    componentDidMount() {\n\n        this.setFildData();\n\n        /************\n         * set Organization Name\n         * **********/\n        let assObj = Object.assign([], this.state.fakeData);\n        assObj[0].OrganizationName = localStorage.selectOrg;\n        this.setState({fakeData:assObj});\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n\n        if(nextProps.accountInfo){\n            this.setState({ dimmer:'blurring', open: true })\n        }\n        if(nextProps.devData.length > 1) {\n            this.setState({dummyData:nextProps.devData, resultData:(!this.state.resultData)?nextProps.devData:this.state.resultData})\n        } else {\n            this.setState({dummyData:this.state.fakeData, resultData:(!this.state.resultData)?nextProps.devData:this.state.resultData})\n        }\n        if(nextProps.regionInfo.region.length){\n            let assObj = Object.assign([], this.state.keysData);\n            assObj[0].Region.items = nextProps.regionInfo.region;\n        }\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        this.setState({toggleSubmit:false});\n        if(nextProps.submitValues && !this.state.toggleSubmit) {\n            \n            const cluster = ['Region','ClusterName','OrganizationName','Operator','Cloudlet','DeploymentType','Flavor'];\n            let error = [];\n            cluster.map((item) => {\n                if(!nextProps.validateValue[item]) {\n                    error.push(item)\n                }\n            })\n\n            //close tutorial\n            this.props.handleStateTutor('done');\n\n            if(nextProps.formClusterInst.submitSucceeded && error.length == 0){\n\n\n\n                this.setState({toggleSubmit:true,validateError:error,regSuccess:true});\n                this.props.handleLoadingSpinner(true);                \n                service.createNewMultiClusterInst('CreateClusterInst',{params:nextProps.submitValues, token:store ? store.userToken : 'null'}, this.receiveSubmit, nextProps.validateValue.Cloudlet)\n                setTimeout(() => {\n                    this.props.handleLoadingSpinner(false);\n                    this.props.gotoUrl();\n                    this.setState({errorClose:true})\n                }, 3000)\n            } else {\n                this.setState({validateError:error,toggleSubmit:true})\n            }\n            \n        }\n\n        /************\n         * set list of flavors\n         * **********/\n        // if(nextProps.flavors) {\n        //     let flavorGroup = reducer.groupBy(nextProps.flavors, 'FlavorName');\n        //     let flavorKeys = Object.keys(flavorGroup);\n        //     let assObj = Object.assign([], this.state.keysData);\n        //     assObj[0].MasterFlavor.items = flavorKeys;\n        //     assObj[0].NodeFlavor.items = flavorKeys;\n        //     this.setState({keysData:assObj})\n        //\n        // }\n\n    }\n\n    render() {\n        const { open, dimmer, dummyData } = this.state;\n        const { hiddenKeys } = this.props;\n        return (\n            <div className=\"regis_container\">\n                {/*<RegistNewListItem data={this.state.dummyData} resultData={this.state.resultData} dimmer={this.state.dimmer} open={this.state.open} selected={this.state.selected} close={this.close}/>*/}\n                <div\n                    draggableHandle\n                    layout={this.state.layout}\n                    onLayoutChange={this.onLayoutChange}\n                    {...this.props}\n                    style={{overflowY:'visible'}}\n                    useCSSTransforms={false}\n                >\n                    {this.generateDOM(open, dimmer, dummyData, this.state.keysData, hiddenKeys, this.props.region)}\n                </div>\n                <PopDetailViewer data={this.state.detailViewData} dimmer={false} open={this.state.openDetail} close={this.closeDetail}></PopDetailViewer>\n                <PopUserViewer data={this.state.detailViewData} dimmer={false} open={this.state.openUser} close={this.closeUser}></PopUserViewer>\n                <PopAddUserViewer data={this.state.selected} dimmer={false} open={this.state.openAdd} close={this.closeAddUser}></PopAddUserViewer>\n            </div>\n        );\n    }\n    static defaultProps = {\n        className: \"layout\",\n        items: 20,\n        rowHeight: 30,\n        cols: 12,\n        width: 1600\n    };\n}\n/*\n{\n  \"Region\": \"US\",\n  \"ClusterName\": \"myClusterInst0513\",\n  \"OrganizationName\": \"TDG\",\n  \"Operator\": \"RCI\",\n  \"Cloudlet\": \"toronto-cloudlet\",\n  \"Flavor\": \"m4.large\",\n  \"IpAccess\": \"IpAccessDedicated\",\n  \"NumberOfMaster\": \"1\",\n  \"NumberOfNode\": \"2\"\n}\n */\nconst getInteger = (str) => (\n    (str === 'Dedicated')? 1 :\n    (str === 'Shared')? 3 : false\n)\nconst createFormat = (data) => (\n    {\n        \"region\":data['Region'],\n        \"clusterinst\":\n            {\n                \"key\":\n                    {\n                        \"cluster_key\":{\"name\":data['ClusterName']},\n                        \"cloudlet_key\":{\n                            \"operator_key\":{\"name\":data['Operator']},\n                            \"name\":data['Cloudlet']\n                        },\n                        \"developer\":data['OrganizationName']\n                    },\n                \"deployment\":data['DeploymentType'],\n                \"flavor\":{\"name\":data['Flavor']},\n                \"ip_access\":parseInt(getInteger(data['IpAccess'])),\n                \"num_masters\":parseInt(data['NumberOfMaster']),\n                \"num_nodes\":parseInt(data['NumberOfNode'])\n            }\n    }\n)\nconst mapStateToProps = (state) => {\n    let account = state.registryAccount.account;\n    let dimm =  state.btnMnmt;\n    let accountInfo = account ? account + Math.random()*10000 : null;\n    let dimmInfo = dimm ? dimm : null;\n    let submitVal = null;\n    let selectedRegion = null;\n    let selectedCloudlet = null;\n    let selectedOperator = null;\n    let selectedApp = null;\n    let flavors = null;\n    let validateValue = null;\n\n    if(state.form.createAppFormDefault) {\n        if(state.form.createAppFormDefault.values.Region !== \"\") {\n            selectedRegion = state.form.createAppFormDefault.values.Region;\n        }\n        if(state.form.createAppFormDefault.values.Cloudlet !== \"\") {\n            selectedCloudlet = state.form.createAppFormDefault.values.Cloudlet;\n        }\n        if(state.form.createAppFormDefault.values.Operator !== \"\") {\n            selectedOperator = state.form.createAppFormDefault.values.Operator;\n        }\n        if(state.form.createAppFormDefault.values.AppName !== \"\") {\n            selectedApp = state.form.createAppFormDefault.values.AppName;\n        }\n        // if(state.form.createAppFormDefault.values.AppName !== \"\") {\n        //     selectedApp = state.form.createAppFormDefault.values.AppName;\n        // }\n\n        if(state.form.createAppFormDefault.values && state.form.createAppFormDefault.submitSucceeded) {\n            let enableValue = reducer.filterDeleteKey(state.form.createAppFormDefault.values, 'Edit')\n            if(enableValue.DeploymentType === \"Docker\"){\n                enableValue.NumberOfMaster = 0;\n                enableValue.NumberOfNode = 0;\n                enableValue.DeploymentType = \"docker\"\n            }\n            if(enableValue.DeploymentType === \"Kubernetes\"){\n                enableValue.DeploymentType = \"kubernetes\"\n            }\n            submitVal = createFormat(enableValue);\n            validateValue = state.form.createAppFormDefault.values;\n        }\n    }\n\n\n    let region = state.changeRegion\n        ? {\n            value: state.changeRegion.region\n        }\n        : {};\n\n    let formClusterInst= state.form.createAppFormDefault\n        ? {\n            values: state.form.createAppFormDefault.values,\n            submitSucceeded: state.form.createAppFormDefault.submitSucceeded\n        }\n        : {};\n    let regionInfo = (state.regionInfo)?state.regionInfo:null;\n    return {\n        accountInfo,\n        dimmInfo,\n        itemLabel: state.computeItem.item,\n        userToken : (state.user.userToken) ? state.userToken: null,\n        submitValues: submitVal,\n        region: region.value,\n        flavors: (state.showFlavor) ? state.showFlavor.flavor : null,\n        selectOrg : state.selectOrg.org?state.selectOrg.org:null,\n        userRole : state.showUserRole?state.showUserRole.role:null,\n        validateValue:validateValue,\n        formClusterInst : formClusterInst,\n        regionInfo: regionInfo\n    }\n    \n    // return (dimm) ? {\n    //     dimmInfo : dimm\n    // } : (account)? {\n    //     accountInfo: account + Math.random()*10000\n    // } : null;\n};\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleChangeSite: (data) => { dispatch(actions.changeSite(data))},\n        handleInjectDeveloper: (data) => { dispatch(actions.registDeveloper(data))},\n        handleLoadingSpinner: (data) => { dispatch(actions.loadingSpinner(data))},\n        handleAlertInfo: (mode,msg) => { dispatch(actions.alertInfo(mode,msg))},\n        handleStateTutor: (data) => { dispatch(actions.tutorStatus(data))},\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(RegistryClusterInstViewer);\n\n\n"]},"metadata":{},"sourceType":"module"}