{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/charts/plotly/methodCallChart.js\";\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport ContainerDimensions from 'react-container-dimensions';\nimport { connect } from \"react-redux\";\nimport './styles.css';\nimport * as actions from \"../../actions\";\nimport * as aggregation from \"../../utils\";\nimport * as moment from 'moment'; //https://plot.ly/python/#layout-options\n//https://plot.ly/javascript/axes/#tick-placement-color-and-style\n//https://plot.ly/javascript/streaming/\n\nvar trace1 = {\n  x: ['giraffes', 'orangutans', 'monkeys'],\n  y: [20, 14, 23],\n  name: 'SF Zoo',\n  type: 'bar'\n};\nvar trace2 = {\n  x: ['giraffes', 'orangutans', 'monkeys'],\n  y: [12, 18, 29],\n  name: 'LA Zoo',\n  type: 'bar'\n};\n\nvar MethodCallChart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MethodCallChart, _React$Component);\n\n  function MethodCallChart() {\n    var _this;\n\n    _classCallCheck(this, MethodCallChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MethodCallChart).call(this));\n    _this.state = {\n      vWidth: 600,\n      vHeight: 300,\n      data: [],\n      chartData: [trace1, trace2],\n      layout: {\n        datarevision: 0\n      },\n      currentKey: '',\n      revision: 10,\n      fromToDate: '09:27:23 ~ 09:28:23 '\n    };\n    _this.colors = ['#6699ff', '#22cccc', '#aa77ff', '#ffce03'];\n    _this.colorsErr = ['#22cccc', '#ff3355', '#6699ff', '#ffce03'];\n    return _this;\n  }\n\n  _createClass(MethodCallChart, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      if (nextProps.chartData && nextProps.chartData.methodCall) {\n        this.reloadChart(nextProps.chartData, nextProps.lineLimit);\n      }\n    }\n  }, {\n    key: \"reloadChart\",\n    value: function reloadChart(data, lineLimit) {\n      var _this2 = this;\n\n      var methodName = ['FindCloudlet', 'RegisterClient', 'GetFqdnList'];\n      var mthData = data.methodCall;\n      var groupDev = aggregation.groupBy(mthData, 'dev');\n      var groupTime = aggregation.groupBy(mthData, 'time');\n      var timeKeys = Object.keys(groupTime);\n      var dataComp = [];\n      var devKeys = Object.keys(groupDev); // samsung, neon2...\n\n      methodName.map(function (name, i) {\n        var item = {\n          x: [],\n          y: [],\n          text: '',\n          textposition: 'auto',\n          name: '',\n          type: 'bar',\n          marker: {\n            color: _this2.colors[i]\n          }\n        }; //method 이름별 디벨로퍼들의 3가지 메소스 호출 카운트\n        // 1. name\n\n        item.name = name; // x array : dev 이름들\n\n        item.x = devKeys; // y array : method 당 호출 카운드\n\n        var mthCount = 0;\n        devKeys.map(function (dName) {\n          groupDev[dName].map(function (obj) {\n            if (obj.method === name) mthCount++;\n          });\n          item.y.push(mthCount);\n        });\n        item.text = item.y.map(String);\n        dataComp.push(item);\n      });\n      this.setState({\n        chartData: dataComp,\n        fromToDate: moment(timeKeys[0], 'YYYYMMDD HH:mm:ss').format('HH:mm:ss') + '  ~  ' + moment(timeKeys[timeKeys.length - 1], 'YYYYMMDD HH:mm:ss').format('HH:mm:ss') //fromToDate:timeKeys[0] +'  ~  '+ timeKeys[timeKeys.length-1]\n\n      });\n      this.setState({\n        revision: this.state.revision + 1\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var error = this.props.error;\n      return React.createElement(ContainerDimensions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, function (_ref) {\n        var width = _ref.width,\n            height = _ref.height;\n        return React.createElement(\"div\", {\n          className: \"plotContainer\",\n          style: {\n            width: width,\n            height: height - 2,\n            display: 'flex',\n            flexDirection: 'column',\n            overflowY: 'hidden',\n            overflowX: 'auto'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            width: '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, \"Range of date ::: \".concat(_this3.state.fromToDate)), React.createElement(Plot, {\n          style: {\n            backgroundColor: 'transparent',\n            overflow: 'hidden',\n            width: width,\n            height: height\n          },\n          data: _this3.state.chartData,\n          layout: {\n            barmode: 'group',\n            title: null,\n            autosize: false,\n            width: width - _this3.props.marginRight,\n            height: height,\n            margin: _this3.props.margin,\n            paper_bgcolor: 'transparent',\n            plot_bgcolor: 'transparent',\n            legend: {\n              x: 1,\n              y: 1\n            },\n            xaxis: {\n              showgrid: false,\n              zeroline: true,\n              showline: true,\n              mirror: 'ticks',\n              gridcolor: 'rgba(255,255,255,.05)',\n              gridwidth: 1,\n              zerolinecolor: 'rgba(255,255,255,0)',\n              zerolinewidth: 1,\n              linecolor: 'rgba(255,255,255,.2)',\n              linewidth: 1,\n              color: 'rgba(255,255,255,.4)',\n              domain: [0, 0.94],\n              wrap: true,\n              tickangle: 13 // domain: [0, 0.94]\n\n            },\n            yaxis: {\n              showgrid: true,\n              zeroline: false,\n              showline: true,\n              mirror: 'ticks',\n              ticklen: 3,\n              tickcolor: 'rgba(0,0,0,0)',\n              gridcolor: 'rgba(255,255,255,.05)',\n              gridwidth: 1,\n              zerolinecolor: 'rgba(255,255,255,0)',\n              zerolinewidth: 1,\n              linecolor: 'rgba(255,255,255,.2)',\n              linewidth: 1,\n              color: 'rgba(255,255,255,.4)'\n            },\n            yaxis2: {\n              showgrid: true,\n              zeroline: false,\n              showline: true,\n              mirror: 'ticks',\n              ticklen: 3,\n              tickcolor: 'rgba(0,0,0,0)',\n              gridcolor: 'rgba(255,255,255,.05)',\n              gridwidth: 1,\n              zerolinecolor: 'rgba(255,255,255,0)',\n              zerolinewidth: 1,\n              linecolor: 'rgba(255,255,255,.2)',\n              linewidth: 1,\n              color: 'rgba(255,255,255,.4)',\n              overlaying: 'y',\n              side: 'right',\n              position: _this3.props.y2Position,\n              range: _this3.props.y2Range\n            },\n            yaxis3: {\n              showgrid: true,\n              zeroline: false,\n              showline: true,\n              mirror: 'ticks',\n              ticklen: 3,\n              tickcolor: 'rgba(0,0,0,0)',\n              gridcolor: 'rgba(255,255,255,.05)',\n              gridwidth: 1,\n              zerolinecolor: 'rgba(255,255,255,0)',\n              zerolinewidth: 1,\n              linecolor: 'rgba(255,255,255,.2)',\n              linewidth: 1,\n              color: 'rgba(255,255,255,.4)',\n              overlaying: 'y',\n              side: 'right',\n              position: _this3.props.y3Position,\n              range: _this3.props.y3Range\n            },\n            bargap: 0.2,\n            bargroupgap: 0.1,\n            showlegend: _this3.props.showLegend,\n            points: {\n              width: 0.5\n            },\n            hoverlabel: {\n              bordercolor: 'rgba(255,255,255,.3)',\n              font: {\n                color: 'rgba(255,255,255,.7)'\n              }\n            },\n            datarevision: _this3.state.datarevision + 1\n          },\n          revision: _this3.state.revision,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }));\n      });\n    }\n  }]);\n\n  return MethodCallChart;\n}(React.Component);\n\nMethodCallChart.defaultProps = {\n  margin: {\n    l: 40,\n    r: 20,\n    b: 70,\n    t: 5,\n    pad: 0\n  },\n  marginRight: 0,\n  showLegend: false,\n  y2Range: null,\n  y3Range: null,\n  y2Position: null,\n  y3Position: null\n}; //\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    currentKey: state.cityChanger.city\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleChangeCity: function handleChangeCity(data) {\n      dispatch(actions.changeCity(data));\n    },\n    handleInjectData: function handleInjectData(data) {\n      dispatch(actions.injectNetworkData(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(MethodCallChart);","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/charts/plotly/methodCallChart.js"],"names":["React","Plot","ContainerDimensions","connect","actions","aggregation","moment","trace1","x","y","name","type","trace2","MethodCallChart","state","vWidth","vHeight","data","chartData","layout","datarevision","currentKey","revision","fromToDate","colors","colorsErr","nextProps","nextContext","methodCall","reloadChart","lineLimit","methodName","mthData","groupDev","groupBy","groupTime","timeKeys","Object","keys","dataComp","devKeys","map","i","item","text","textposition","marker","color","mthCount","dName","obj","method","push","String","setState","format","length","error","props","width","height","display","flexDirection","overflowY","overflowX","backgroundColor","overflow","barmode","title","autosize","marginRight","margin","paper_bgcolor","plot_bgcolor","legend","xaxis","showgrid","zeroline","showline","mirror","gridcolor","gridwidth","zerolinecolor","zerolinewidth","linecolor","linewidth","domain","wrap","tickangle","yaxis","ticklen","tickcolor","yaxis2","overlaying","side","position","y2Position","range","y2Range","yaxis3","y3Position","y3Range","bargap","bargroupgap","showlegend","showLegend","points","hoverlabel","bordercolor","font","Component","defaultProps","l","r","b","t","pad","mapStateToProps","ownProps","cityChanger","city","mapDispatchProps","dispatch","handleChangeCity","changeCity","handleInjectData","injectNetworkData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Plot from 'react-plotly.js';\nimport ContainerDimensions from 'react-container-dimensions';\n\nimport {connect} from \"react-redux\";\nimport './styles.css';\nimport * as actions from \"../../actions\";\nimport * as aggregation from \"../../utils\";\nimport * as moment from 'moment';\n//https://plot.ly/python/#layout-options\n//https://plot.ly/javascript/axes/#tick-placement-color-and-style\n//https://plot.ly/javascript/streaming/\n\n\nvar trace1 = {\n    x: ['giraffes', 'orangutans', 'monkeys'],\n    y: [20, 14, 23],\n    name: 'SF Zoo',\n    type: 'bar'\n};\n\nvar trace2 = {\n    x: ['giraffes', 'orangutans', 'monkeys'],\n    y: [12, 18, 29],\n    name: 'LA Zoo',\n    type: 'bar'\n};\n\n\nclass MethodCallChart extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            vWidth: 600,\n            vHeight: 300,\n            data:[],\n            chartData:[trace1, trace2],\n            layout: {\n                datarevision: 0,\n            },\n            currentKey:'',\n            revision: 10,\n            fromToDate:'09:27:23 ~ 09:28:23 '\n        }\n        this.colors = ['#6699ff','#22cccc', '#aa77ff', '#ffce03' ];\n        this.colorsErr = ['#22cccc','#ff3355', '#6699ff', '#ffce03' ];\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.chartData && nextProps.chartData.methodCall) {\n            this.reloadChart(nextProps.chartData, nextProps.lineLimit);\n        }\n\n    }\n    reloadChart(data, lineLimit) {\n        let methodName = ['FindCloudlet', 'RegisterClient', 'GetFqdnList']\n        let mthData = data.methodCall;\n        let groupDev = aggregation.groupBy(mthData, 'dev')\n        let groupTime = aggregation.groupBy(mthData, 'time')\n        let timeKeys = Object.keys(groupTime);\n        let dataComp = [];\n        let devKeys = Object.keys(groupDev); // samsung, neon2...\n        methodName.map((name, i) => {\n            let item = {\n                x: [],\n                y: [],\n                text: '',\n                textposition: 'auto',\n                name: '',\n                type: 'bar',\n                marker: {\n                    color: this.colors[i]\n                }\n            }\n\n            //method 이름별 디벨로퍼들의 3가지 메소스 호출 카운트\n            // 1. name\n            item.name = name;\n            // x array : dev 이름들\n            item.x = devKeys;\n            // y array : method 당 호출 카운드\n            let mthCount = 0;\n\n            devKeys.map(dName => {\n                groupDev[dName].map(obj => {\n                    if(obj.method === name) mthCount ++;\n                })\n\n                item.y.push(mthCount)\n            })\n\n            item.text = item.y.map(String)\n\n            dataComp.push(item);\n        })\n        this.setState({\n            chartData:dataComp,\n            fromToDate:moment(timeKeys[0], 'YYYYMMDD HH:mm:ss').format('HH:mm:ss') +'  ~  '+ moment(timeKeys[timeKeys.length-1] , 'YYYYMMDD HH:mm:ss').format('HH:mm:ss')\n            //fromToDate:timeKeys[0] +'  ~  '+ timeKeys[timeKeys.length-1]\n        })\n\n\n        this.setState({ revision: this.state.revision + 1 });\n    }\n\n    render() {\n        let {error} = this.props;\n        return (\n            <ContainerDimensions>\n                { ({ width, height }) =>\n                    <div className=\"plotContainer\" style={{width:width, height:height-2, display:'flex', flexDirection:'column', overflowY:'hidden', overflowX:'auto'}}>\n                        <div style={{width:'100%'}}>{`Range of date ::: ${this.state.fromToDate}`}</div>\n                        <Plot style={{backgroundColor:'transparent', overflow:'hidden', width:width, height:height}}\n                            data={this.state.chartData}\n                            layout={{\n                                barmode:'group',\n                                title: null,\n                                autosize: false,\n                                width:width-this.props.marginRight,\n                                height:height,\n                                margin:this.props.margin,\n                                paper_bgcolor: 'transparent',\n                                plot_bgcolor: 'transparent',\n                                legend: {\n                                    x: 1,\n                                    y: 1\n                                },\n                                xaxis: {\n                                    showgrid: false,\n                                    zeroline: true,\n                                    showline: true,\n                                    mirror: 'ticks',\n                                    gridcolor: 'rgba(255,255,255,.05)',\n                                    gridwidth: 1,\n                                    zerolinecolor: 'rgba(255,255,255,0)',\n                                    zerolinewidth: 1,\n                                    linecolor: 'rgba(255,255,255,.2)',\n                                    linewidth: 1,\n                                    color: 'rgba(255,255,255,.4)',\n                                    domain: [0, 0.94],\n                                    wrap: true,\n                                    tickangle: 13,\n\n                                    // domain: [0, 0.94]\n                                },\n                                yaxis: {\n                                    showgrid: true,\n                                    zeroline: false,\n                                    showline: true,\n                                    mirror: 'ticks',\n                                    ticklen: 3,\n                                    tickcolor: 'rgba(0,0,0,0)',\n                                    gridcolor: 'rgba(255,255,255,.05)',\n                                    gridwidth:1,\n                                    zerolinecolor: 'rgba(255,255,255,0)',\n                                    zerolinewidth: 1,\n                                    linecolor: 'rgba(255,255,255,.2)',\n                                    linewidth: 1,\n                                    color: 'rgba(255,255,255,.4)'\n                                },\n                                yaxis2:{\n                                    showgrid: true,\n                                    zeroline: false,\n                                    showline: true,\n                                    mirror: 'ticks',\n                                    ticklen: 3,\n                                    tickcolor: 'rgba(0,0,0,0)',\n                                    gridcolor: 'rgba(255,255,255,.05)',\n                                    gridwidth:1,\n                                    zerolinecolor: 'rgba(255,255,255,0)',\n                                    zerolinewidth: 1,\n                                    linecolor: 'rgba(255,255,255,.2)',\n                                    linewidth: 1,\n                                    color: 'rgba(255,255,255,.4)',\n                                    overlaying: 'y',\n                                    side: 'right',\n                                    position:this.props.y2Position,\n                                    range:this.props.y2Range\n                                },\n                                yaxis3:{\n                                    showgrid: true,\n                                    zeroline: false,\n                                    showline: true,\n                                    mirror: 'ticks',\n                                    ticklen: 3,\n                                    tickcolor: 'rgba(0,0,0,0)',\n                                    gridcolor: 'rgba(255,255,255,.05)',\n                                    gridwidth:1,\n                                    zerolinecolor: 'rgba(255,255,255,0)',\n                                    zerolinewidth: 1,\n                                    linecolor: 'rgba(255,255,255,.2)',\n                                    linewidth: 1,\n                                    color: 'rgba(255,255,255,.4)',\n                                    overlaying: 'y',\n                                    side: 'right',\n                                    position:this.props.y3Position,\n                                    range:this.props.y3Range\n                                },\n                                bargap: 0.2,\n                                bargroupgap: 0.1,\n                                showlegend: this.props.showLegend,\n                                points: {\n                                    width: 0.5\n                                },\n                                hoverlabel: {\n                                    bordercolor: 'rgba(255,255,255,.3)',\n                                    font: {color:'rgba(255,255,255,.7)'},\n                                },\n                                datarevision: this.state.datarevision + 1\n\n                            }}\n                              revision={this.state.revision}\n                        />\n                    </div>\n\n                }\n            </ContainerDimensions>\n\n\n\n        );\n    }\n}\nMethodCallChart.defaultProps = {\n    margin: {\n        l: 40,\n        r: 20,\n        b: 70,\n        t: 5,\n        pad: 0\n    },\n    marginRight:0,\n    showLegend:false,\n    y2Range:null,\n    y3Range:null,\n    y2Position:null,\n    y3Position:null\n}\n\n\n//\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        currentKey: state.cityChanger.city\n    };\n};\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleChangeCity: (data) => { dispatch(actions.changeCity(data)) },\n        handleInjectData: (data) => { dispatch(actions.injectNetworkData(data))},\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(MethodCallChart);\n"]},"metadata":{},"sourceType":"module"}