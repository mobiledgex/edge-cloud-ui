{"ast":null,"code":"import { geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, degrees, epsilon, pi, radians, sin } from \"../math\";\nimport { default as matrix, multiply, inverse } from \"./matrix\"; // Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for\n//    butterflies).\n\nexport default function (root, face, r) {\n  r = r == null ? -pi / 6 : r; // TODO automate\n\n  recurse(root, {\n    transform: [cos(r), sin(r), 0, -sin(r), cos(r), 0]\n  });\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face); // Find shared edge.\n\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m; // Replace shared edge in parent edges array.\n\n      var edges = parent.edges;\n\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n\n      edges = node.edges;\n\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n\n    if (node.children) {\n      node.children.forEach(function (child) {\n        recurse(child, node);\n      });\n    }\n\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n\n    if (t = node.transform) {\n      return [t[0] * point[0] + t[1] * point[1] + t[2], -(t[3] * point[0] + t[4] * point[1] + t[5])];\n    }\n\n    point[1] = -point[1];\n    return point;\n  } // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n\n\n  if (hasInverse(root)) forward.invert = function (x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n\n    if (t) {\n      t = inverse(t);\n      point = [t[0] * point[0] + t[1] * point[1] + t[2], t[3] * point[0] + t[4] * point[1] + t[5]];\n    }\n\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function (stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return proj;\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {\n    type: \"MultiPoint\",\n    coordinates: node.face\n  },\n      notPoles = node.face.filter(function (d) {\n    return abs(d[1]) !== 90;\n  }),\n      b = bounds({\n    type: \"MultiPoint\",\n    coordinates: notPoles\n  }),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0]; // TODO\n\n  var c = dx === 180 || dx === 360 ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2] : centroid(multiPoint); // First find the shared edgeâ€¦\n\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n} // Tests equality of two spherical points.\n\n\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n} // Finds a shared edge given two clockwise polygons.\n\n\nfunction sharedEdge(a, b) {\n  var x,\n      y,\n      n = a.length,\n      found = null;\n\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n} // Converts an array of n face vertices to an array of n + 1 edges.\n\n\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n\n  for (var a = face[n - 1], i = 0; i < n; ++i) {\n    edges.push([a, a = face[i]]);\n  }\n\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/react-simple-maps/node_modules/d3-geo-projection/src/polyhedral/index.js"],"names":["geoBounds","bounds","geoCentroid","centroid","geoInterpolate","interpolate","geoProjection","projection","abs","cos","degrees","epsilon","pi","radians","sin","default","matrix","multiply","inverse","root","face","r","recurse","transform","node","parent","edges","faceEdges","shared","sharedEdge","m","map","project","i","n","length","pointEqual","children","forEach","child","forward","lambda","phi","point","t","hasInverse","invert","x","y","coordinates","faceInvert","faceDegrees","p","proj","stream_","stream","rotate","rotateStream","sphereStream","sphere","polygonStart","lineStart","outline","lineEnd","polygonEnd","edge","multiPoint","type","notPoles","filter","d","b","inside","j","dx","c","Array","isArray","a","found","push","some"],"mappings":"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","sourcesContent":["import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, degrees, epsilon, pi, radians, sin} from \"../math\";\nimport {default as matrix, multiply, inverse} from \"./matrix\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for\n//    butterflies).\nexport default function(root, face, r) {\n\n  r = r == null ? -pi / 6 : r; // TODO automate\n\n  recurse(root, {transform: [\n    cos(r), sin(r), 0,\n    -sin(r), cos(r), 0\n  ]});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj;\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edgeâ€¦\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n"]},"metadata":{},"sourceType":"module"}