{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * FieldType is an enumeration of InfluxDB field data types.\n * @typedef {Number} FieldType\n * @example\n * import { FieldType } from 'influx'; // or const FieldType = require('influx').FieldType\n *\n * const schema = {\n *   measurement: 'my_measurement',\n *   fields: {\n *     my_int: FieldType.INTEGER,\n *     my_float: FieldType.FLOAT,\n *     my_string: FieldType.STRING,\n *     my_boolean: FieldType.BOOLEAN,\n *   }\n * }\n */\n\nvar FieldType;\n\n(function (FieldType) {\n  FieldType[FieldType[\"FLOAT\"] = 0] = \"FLOAT\";\n  FieldType[FieldType[\"INTEGER\"] = 1] = \"INTEGER\";\n  FieldType[FieldType[\"STRING\"] = 2] = \"STRING\";\n  FieldType[FieldType[\"BOOLEAN\"] = 3] = \"BOOLEAN\";\n})(FieldType = exports.FieldType || (exports.FieldType = {}));\n\nfunction isNumeric(value) {\n  return !Number.isNaN(Number(value));\n}\n\nexports.isNumeric = isNumeric;\n/**\n * You can provide Raw values to Influx methods to prevent it from escaping\n * your provided string.\n * @class\n * @example\n * influx.createDatabase(new Influx.Raw('This won\\'t be escaped!'));\n */\n\nvar Raw =\n/*#__PURE__*/\nfunction () {\n  /**\n  * Wraps a string so that it is not escaped in Influx queries.\n  * @param value\n  * @example\n  * influx.createDatabase(new Influx.Raw('This won\\'t be escaped!'));\n  */\n  function Raw(value) {\n    _classCallCheck(this, Raw);\n\n    this.value = value;\n  }\n  /**\n  * Returns the wrapped string.\n  * @return\n  */\n\n\n  _createClass(Raw, [{\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value;\n    }\n  }]);\n\n  return Raw;\n}();\n\nexports.Raw = Raw;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/influx/lib/src/grammar/ds.js"],"names":["Object","defineProperty","exports","value","FieldType","isNumeric","Number","isNaN","Raw"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;;;;;;;;;AAgBA,IAAIC,SAAJ;;AACA,CAAC,UAAUA,SAAV,EAAqB;AAClBA,EAAAA,SAAS,CAACA,SAAS,CAAC,OAAD,CAAT,GAAqB,CAAtB,CAAT,GAAoC,OAApC;AACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,SAAD,CAAT,GAAuB,CAAxB,CAAT,GAAsC,SAAtC;AACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,QAAD,CAAT,GAAsB,CAAvB,CAAT,GAAqC,QAArC;AACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,SAAD,CAAT,GAAuB,CAAxB,CAAT,GAAsC,SAAtC;AACH,CALD,EAKGA,SAAS,GAAGF,OAAO,CAACE,SAAR,KAAsBF,OAAO,CAACE,SAAR,GAAoB,EAA1C,CALf;;AAMA,SAASC,SAAT,CAAmBF,KAAnB,EAA0B;AACtB,SAAO,CAACG,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACH,KAAD,CAAnB,CAAR;AACH;;AACDD,OAAO,CAACG,SAAR,GAAoBA,SAApB;AACA;;;;;;;;IAOMG,G;;;AACF;;;;;;AAMA,eAAYL,KAAZ,EAAmB;AAAA;;AACf,SAAKA,KAAL,GAAaA,KAAb;AACH;AACD;;;;;;;;+BAIW;AACP,aAAO,KAAKA,KAAZ;AACH;;;;;;AAELD,OAAO,CAACM,GAAR,GAAcA,GAAd","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * FieldType is an enumeration of InfluxDB field data types.\n * @typedef {Number} FieldType\n * @example\n * import { FieldType } from 'influx'; // or const FieldType = require('influx').FieldType\n *\n * const schema = {\n *   measurement: 'my_measurement',\n *   fields: {\n *     my_int: FieldType.INTEGER,\n *     my_float: FieldType.FLOAT,\n *     my_string: FieldType.STRING,\n *     my_boolean: FieldType.BOOLEAN,\n *   }\n * }\n */\nvar FieldType;\n(function (FieldType) {\n    FieldType[FieldType[\"FLOAT\"] = 0] = \"FLOAT\";\n    FieldType[FieldType[\"INTEGER\"] = 1] = \"INTEGER\";\n    FieldType[FieldType[\"STRING\"] = 2] = \"STRING\";\n    FieldType[FieldType[\"BOOLEAN\"] = 3] = \"BOOLEAN\";\n})(FieldType = exports.FieldType || (exports.FieldType = {}));\nfunction isNumeric(value) {\n    return !Number.isNaN(Number(value));\n}\nexports.isNumeric = isNumeric;\n/**\n * You can provide Raw values to Influx methods to prevent it from escaping\n * your provided string.\n * @class\n * @example\n * influx.createDatabase(new Influx.Raw('This won\\'t be escaped!'));\n */\nclass Raw {\n    /**\n   * Wraps a string so that it is not escaped in Influx queries.\n   * @param value\n   * @example\n   * influx.createDatabase(new Influx.Raw('This won\\'t be escaped!'));\n   */\n    constructor(value) {\n        this.value = value;\n    }\n    /**\n   * Returns the wrapped string.\n   * @return\n   */\n    getValue() {\n        return this.value;\n    }\n}\nexports.Raw = Raw;\n"]},"metadata":{},"sourceType":"script"}