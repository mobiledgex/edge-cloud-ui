{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/sites/siteFour_page_clusterinst.js\";\nimport React from 'react';\nimport { Grid, Image, Header, Menu, Dropdown, Button } from 'semantic-ui-react';\nimport sizeMe from 'react-sizeme';\nimport InstanceListView from '../container/instanceListView';\nimport { withRouter } from 'react-router-dom';\nimport MaterialIcon from 'material-icons-react';\nimport PageDetailViewer from '../container/pageDetailViewer'; //redux\n\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport * as services from '../services/service_compute_service';\nimport './siteThree.css';\nimport MapWithListView from \"../container/mapWithListView\";\nimport Alert from \"react-s-alert\";\nimport * as reducer from '../utils';\nvar _self = null;\nvar rgn = [];\n\nvar SiteFourPageClusterInst =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SiteFourPageClusterInst, _React$Component);\n\n  function SiteFourPageClusterInst(props) {\n    var _this;\n\n    _classCallCheck(this, SiteFourPageClusterInst);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SiteFourPageClusterInst).call(this, props));\n\n    _this.handleItemClick = function (e, _ref) {\n      var name = _ref.name;\n      return _this.setState({\n        activeItem: name\n      });\n    };\n\n    _this.getDataDeveloper = function (region, regionArr) {\n      _self.props.handleLoadingSpinner(true);\n\n      _self.loadCount = 0;\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n      _self.clusterInstDummy = [];\n      _self.cloudletDummy = [];\n\n      _self.setState({\n        devData: []\n      }); //TODO: region에 대한 데이터를  DB에서 가져와야 함.\n\n\n      var serviceBody = {};\n\n      _self.setState({\n        devData: [],\n        cloudletData: [],\n        clusterInstData: []\n      });\n\n      if (region !== 'All') {\n        rgn = [region];\n      } else {\n        rgn = regionArr ? regionArr : _this.props.regionInfo.region;\n      }\n\n      if (localStorage.selectRole == 'AdminManager') {\n        rgn.map(function (item) {\n          // All show clusterInst\n          services.getMCService('ShowCloudlet', {\n            token: store ? store.userToken : 'null',\n            region: item\n          }, _self.receiveResultCloudlet);\n          services.getMCService('ShowClusterInst', {\n            token: store ? store.userToken : 'null',\n            region: item\n          }, _self.receiveResultClusterInst); // setTimeout(()=>services.getMCService('ShowCloudlet',{token:store.userToken, region:item}, _self.receiveResultCloudlet), 0);\n        });\n      } else {\n        rgn.map(function (item) {\n          serviceBody = {\n            \"token\": store ? store.userToken : 'null',\n            \"params\": {\n              \"region\": item,\n              \"clusterinst\": {\n                \"key\": {\n                  \"developer\": localStorage.selectOrg\n                }\n              }\n            }\n          }; // org별 show clusterInst\n\n          services.getMCService('ShowCloudlet', {\n            token: store ? store.userToken : 'null',\n            region: item\n          }, _self.receiveResultCloudlet);\n          services.getMCService('ShowClusterInsts', serviceBody, _self.receiveResultClusterInst); //setTimeout(()=>services.getMCService('ShowCloudlet',{token:store.userToken, region:item}, _self.receiveResultCloudlet), 0);\n        });\n      }\n    };\n\n    _this.getDataDeveloperSub = function (region) {\n      var _region = region ? region : 'All';\n\n      _this.getDataDeveloper(_region);\n    };\n\n    _self = _assertThisInitialized(_this);\n    _this.state = {\n      shouldShowBox: true,\n      shouldShowCircle: false,\n      contHeight: 0,\n      contWidth: 0,\n      bodyHeight: 0,\n      devData: [],\n      viewMode: 'listView',\n      detailData: null,\n      regionToggle: false,\n      dataSort: false\n    };\n    _this.clusterInstDummy = [];\n    _this.cloudletDummy = [];\n    _this.headerH = 70;\n    _this.hgap = 0;\n    _this.loadCount = 0;\n    _this.countObject = {};\n    _this.headerLayout = [1, 2, 2, 2, 2, 1, 2, 2, 1, 2];\n    _this.hiddenKeys = ['Status', 'Deployment'];\n    return _this;\n  }\n\n  _createClass(SiteFourPageClusterInst, [{\n    key: \"gotoUrl\",\n    value: function gotoUrl(site, subPath) {\n      var mainPath = site;\n\n      _self.props.history.push({\n        pathname: site,\n        search: subPath\n      });\n\n      _self.props.history.location.search = subPath;\n\n      _self.props.handleChangeSite({\n        mainPath: mainPath,\n        subPath: subPath\n      });\n    } //go to\n\n  }, {\n    key: \"gotoPreview\",\n    value: function gotoPreview(site) {\n      //브라우져 입력창에 주소 기록\n      var mainPath = site;\n      var subPath = 'pg=0';\n\n      _self.props.history.push({\n        pathname: mainPath,\n        search: subPath,\n        state: {\n          some: 'state'\n        }\n      });\n\n      _self.props.history.location.search = subPath;\n\n      _self.props.handleChangeSite({\n        mainPath: mainPath,\n        subPath: subPath\n      });\n    }\n  }, {\n    key: \"onHandleRegistry\",\n    value: function onHandleRegistry() {\n      this.props.handleInjectDeveloper('userInfo');\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this.setState({\n        bodyHeight: window.innerHeight - this.headerH\n      });\n      this.setState({\n        contHeight: (window.innerHeight - this.headerH) / 2 - this.hgap\n      });\n      rgn.map(function (region) {\n        _this2.countObject[region] = [];\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n      // if(store && store.userToken) {\n      //     this.getDataDeveloper(this.props.changeRegion);\n      // }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clusterInstDummy = [];\n      this.cloudletDummy = [];\n      this.setState({\n        devData: []\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this3 = this;\n\n      this.setState({\n        bodyHeight: window.innerHeight - this.headerH\n      });\n      this.setState({\n        contHeight: (nextProps.size.height - this.headerH) / 2 - this.hgap\n      });\n\n      if (nextProps.computeRefresh.compute) {\n        this.getDataDeveloper(nextProps.changeRegion);\n        this.props.handleComputeRefresh(false);\n        this.setState({\n          dataSort: true\n        });\n      }\n\n      if (this.props.changeRegion !== nextProps.changeRegion) {\n        this.getDataDeveloper(nextProps.changeRegion);\n      }\n\n      if (nextProps.regionInfo.region.length && !this.state.regionToggle) {\n        _self.setState({\n          regionToggle: true,\n          regions: nextProps.regionInfo.region\n        });\n\n        this.getDataDeveloper(nextProps.changeRegion, nextProps.regionInfo.region);\n      }\n\n      if (nextProps.viewMode) {\n        if (nextProps.viewMode === 'listView') {\n          this.setState({\n            viewMode: nextProps.viewMode\n          });\n        } else {\n          this.setState({\n            detailData: nextProps.detailData\n          });\n          this.forceUpdate();\n          setTimeout(function () {\n            return _this3.setState({\n              viewMode: nextProps.viewMode\n            });\n          }, 600);\n        }\n      } //make hidden key\n\n\n      var tbHeader = nextProps.headerFilter;\n\n      if (tbHeader) {\n        this.setHiddenKey(tbHeader);\n      }\n\n      setTimeout(function () {\n        return _this3.forceUpdate();\n      }, 1000);\n    }\n  }, {\n    key: \"receiveResult\",\n    value: function receiveResult(result) {\n      var join = null;\n\n      if (result[0]['Edit']) {\n        join = this.state.devData.concat(result);\n      } else {\n        join = this.state.devData;\n      }\n\n      if (result.error) {\n        this.props.handleAlertInfo('error', result.error);\n      } else {\n        _self.setState({\n          devData: join\n        });\n      }\n    }\n  }, {\n    key: \"receiveResultClusterInst\",\n    value: function receiveResultClusterInst(result) {\n      _self.props.handleLoadingSpinner(); // @inki if data has expired token\n\n\n      if (result.error && result.error.indexOf('Expired') > -1) {\n        _self.props.handleAlertInfo('error', result.error);\n\n        setTimeout(function () {\n          return _self.gotoUrl('/logout');\n        }, 4000);\n\n        _self.props.handleLoadingSpinner(false);\n\n        return;\n      } //_self.countObject[result[0]['Region']].push(result[0]['Region'])\n      // console.log('20191004 ', result)\n      // if(result.length) {\n      //     if(result[0]['Region'] === \"\") {\n      //         _self.props.handleLoadingSpinner(false);\n      //         //_self.props.handleAlertInfo('error', 'There is no data to display')\n      //     } else {\n      //     }\n      //     _self.groupJoin(result,'clusterInst', result[0]['Region'])\n      // }\n\n\n      _self.props.handleLoadingSpinner(false);\n\n      _self.groupJoin(result, 'clusterInst');\n    }\n  }, {\n    key: \"receiveResultCloudlet\",\n    value: function receiveResultCloudlet(result) {\n      // @inki if data has expired token\n      if (result.error && result.error.indexOf('Expired') > -1) {\n        _self.props.handleAlertInfo('error', result.error);\n\n        setTimeout(function () {\n          return _self.gotoUrl('/logout');\n        }, 4000);\n\n        _self.props.handleLoadingSpinner();\n\n        return;\n      } //_self.countObject[result[0]['Region']].push(result[0]['Region'])\n\n\n      _self.props.handleLoadingSpinner();\n\n      _self.groupJoin(result, 'cloudlet');\n    }\n  }, {\n    key: \"groupJoin\",\n    value: function groupJoin(result, cmpt) {\n      var regionGroup = !result.error ? reducer.groupBy(result, 'Region') : {};\n\n      if (Object.keys(regionGroup)[0]) {\n        if (cmpt == 'clusterInst') this.clusterInstDummy = _self.clusterInstDummy.concat(result);else if (cmpt == 'cloudlet') this.cloudletDummy = _self.cloudletDummy.concat(result);\n      }\n\n      _self.loadCount++;\n\n      if (rgn.length * 2 == this.loadCount) {\n        _self.countJoin();\n      }\n    }\n  }, {\n    key: \"countJoin\",\n    value: function countJoin() {\n      var clusterInst = this.clusterInstDummy;\n      var cloudlet = this.cloudletDummy;\n      this.props.handleLoadingSpinner(false);\n\n      if (clusterInst && clusterInst.length) {\n        try {\n          clusterInst.map(function (itemCinst, i) {\n            cloudlet.map(function (itemClet, j) {\n              if (itemCinst.Cloudlet === itemClet.CloudletName) {\n                itemCinst.CloudletLocation = itemClet.CloudletLocation;\n              }\n            });\n          });\n\n          _self.setState({\n            devData: clusterInst,\n            dataSort: false\n          });\n        } catch (e) {}\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          shouldShowBox = _this$state.shouldShowBox,\n          shouldShowCircle = _this$state.shouldShowCircle,\n          devData = _this$state.devData;\n      var _this$state2 = this.state,\n          activeItem = _this$state2.activeItem,\n          viewMode = _this$state2.viewMode;\n      var randomValue = Math.round(Math.random() * 100);\n      return (//<DeveloperListView devData={this.state.devData} headerLayout={this.headerLayout}></DeveloperListView>\n        viewMode === 'listView' ? React.createElement(MapWithListView, {\n          devData: devData,\n          randomValue: randomValue,\n          headerLayout: this.headerLayout,\n          hiddenKeys: this.hiddenKeys,\n          siteId: 'ClusterInst',\n          region: \"US\",\n          dataRefresh: this.getDataDeveloperSub,\n          dataSort: this.state.dataSort,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          },\n          __self: this\n        }) : React.createElement(PageDetailViewer, {\n          className: \"ttt\",\n          data: this.state.detailData,\n          page: \"clusterInst\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        })\n      );\n    }\n  }]);\n\n  return SiteFourPageClusterInst;\n}(React.Component);\n\n;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var viewMode = null;\n  var detailData = null;\n\n  if (state.changeViewMode.mode && state.changeViewMode.mode.viewMode) {\n    viewMode = state.changeViewMode.mode.viewMode;\n    detailData = state.changeViewMode.mode.data;\n  }\n\n  var regionInfo = state.regionInfo ? state.regionInfo : null;\n  return {\n    computeRefresh: state.computeRefresh ? state.computeRefresh : null,\n    changeRegion: state.changeRegion.region ? state.changeRegion.region : null,\n    selectOrg: state.selectOrg.org ? state.selectOrg.org : null,\n    userRole: state.showUserRole ? state.showUserRole.role : null,\n    viewMode: viewMode,\n    detailData: detailData,\n    regionInfo: regionInfo\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleChangeSite: function handleChangeSite(data) {\n      dispatch(actions.changeSite(data));\n    },\n    handleInjectData: function handleInjectData(data) {\n      dispatch(actions.injectData(data));\n    },\n    handleInjectDeveloper: function handleInjectDeveloper(data) {\n      dispatch(actions.registDeveloper(data));\n    },\n    handleComputeRefresh: function handleComputeRefresh(data) {\n      dispatch(actions.computeRefresh(data));\n    },\n    handleLoadingSpinner: function handleLoadingSpinner(data) {\n      dispatch(actions.loadingSpinner(data));\n    },\n    handleAlertInfo: function handleAlertInfo(mode, msg) {\n      dispatch(actions.alertInfo(mode, msg));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(sizeMe({\n  monitorHeight: true\n})(SiteFourPageClusterInst)));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/sites/siteFour_page_clusterinst.js"],"names":["React","Grid","Image","Header","Menu","Dropdown","Button","sizeMe","InstanceListView","withRouter","MaterialIcon","PageDetailViewer","connect","actions","services","MapWithListView","Alert","reducer","_self","rgn","SiteFourPageClusterInst","props","handleItemClick","e","name","setState","activeItem","getDataDeveloper","region","regionArr","handleLoadingSpinner","loadCount","store","localStorage","PROJECT_INIT","JSON","parse","clusterInstDummy","cloudletDummy","devData","serviceBody","cloudletData","clusterInstData","regionInfo","selectRole","map","item","getMCService","token","userToken","receiveResultCloudlet","receiveResultClusterInst","selectOrg","getDataDeveloperSub","_region","state","shouldShowBox","shouldShowCircle","contHeight","contWidth","bodyHeight","viewMode","detailData","regionToggle","dataSort","headerH","hgap","countObject","headerLayout","hiddenKeys","site","subPath","mainPath","history","push","pathname","search","location","handleChangeSite","some","handleInjectDeveloper","window","innerHeight","nextProps","size","height","computeRefresh","compute","changeRegion","handleComputeRefresh","length","regions","forceUpdate","setTimeout","tbHeader","headerFilter","setHiddenKey","result","join","concat","error","handleAlertInfo","indexOf","gotoUrl","groupJoin","cmpt","regionGroup","groupBy","Object","keys","countJoin","clusterInst","cloudlet","itemCinst","i","itemClet","j","Cloudlet","CloudletName","CloudletLocation","randomValue","Math","round","random","Component","mapStateToProps","changeViewMode","mode","data","org","userRole","showUserRole","role","mapDispatchProps","dispatch","changeSite","handleInjectData","injectData","registDeveloper","loadingSpinner","msg","alertInfo","monitorHeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Grid, Image, Header, Menu, Dropdown, Button } from 'semantic-ui-react';\nimport sizeMe from 'react-sizeme';\nimport InstanceListView from '../container/instanceListView';\nimport { withRouter } from 'react-router-dom';\nimport MaterialIcon from 'material-icons-react';\nimport PageDetailViewer from '../container/pageDetailViewer';\n//redux\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport * as services from '../services/service_compute_service';\nimport './siteThree.css';\nimport MapWithListView from \"../container/mapWithListView\";\nimport Alert from \"react-s-alert\";\nimport * as reducer from '../utils'\n\nlet _self = null;\nlet rgn = [];\nclass SiteFourPageClusterInst extends React.Component {\n    constructor(props) {\n        super(props);\n        _self = this;\n        this.state = {\n            shouldShowBox: true,\n            shouldShowCircle: false,\n            contHeight:0,\n            contWidth:0,\n            bodyHeight:0,\n            devData:[],\n            viewMode:'listView',\n            detailData:null,\n            regionToggle:false,\n            dataSort:false\n        };\n        this.clusterInstDummy = [];\n        this.cloudletDummy = [];\n        this.headerH = 70;\n        this.hgap = 0;\n        this.loadCount = 0;\n        this.countObject = {};\n        this.headerLayout = [1,2,2,2,2,1,2,2,1,2];\n        this.hiddenKeys = ['Status','Deployment']\n\n    }\n    gotoUrl(site, subPath) {\n        let mainPath = site;\n        _self.props.history.push({\n            pathname: site,\n            search: subPath\n        });\n        _self.props.history.location.search = subPath;\n        _self.props.handleChangeSite({mainPath:mainPath, subPath: subPath})\n    }\n    //go to\n    gotoPreview(site) {\n        //브라우져 입력창에 주소 기록\n        let mainPath = site;\n        let subPath = 'pg=0';\n        _self.props.history.push({\n            pathname: mainPath,\n            search: subPath,\n            state: { some: 'state' }\n        });\n        _self.props.history.location.search = subPath;\n        _self.props.handleChangeSite({mainPath:mainPath, subPath: subPath})\n\n    }\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n    onHandleRegistry() {\n        this.props.handleInjectDeveloper('userInfo');\n    }\n    componentWillMount() {\n        this.setState({bodyHeight : (window.innerHeight - this.headerH)})\n        this.setState({contHeight:(window.innerHeight-this.headerH)/2 - this.hgap})\n        rgn.map((region) => {\n            this.countObject[region] = []\n        })\n    }\n    componentDidMount() {\n        // let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        // if(store && store.userToken) {\n        //     this.getDataDeveloper(this.props.changeRegion);\n        // }\n    }\n    componentWillUnmount() {\n        this.clusterInstDummy = [];\n        this.cloudletDummy = [];\n        this.setState({devData:[]})\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({bodyHeight : (window.innerHeight - this.headerH)})\n        this.setState({contHeight:(nextProps.size.height-this.headerH)/2 - this.hgap})\n\n        if(nextProps.computeRefresh.compute) {\n            this.getDataDeveloper(nextProps.changeRegion);\n            this.props.handleComputeRefresh(false);\n            this.setState({dataSort:true});\n        }\n        if(this.props.changeRegion !== nextProps.changeRegion){\n            this.getDataDeveloper(nextProps.changeRegion);\n        }\n        if(nextProps.regionInfo.region.length && !this.state.regionToggle) {\n            _self.setState({regionToggle:true,regions:nextProps.regionInfo.region})\n            this.getDataDeveloper(nextProps.changeRegion,nextProps.regionInfo.region);\n        }\n        if(nextProps.viewMode) {\n            if(nextProps.viewMode === 'listView') {\n                this.setState({viewMode:nextProps.viewMode})\n            } else {\n                this.setState({detailData:nextProps.detailData})\n                this.forceUpdate()\n                setTimeout(() => this.setState({viewMode:nextProps.viewMode}), 600)\n            }\n\n        }\n        //make hidden key\n        let tbHeader = nextProps.headerFilter;\n        if(tbHeader) {\n            this.setHiddenKey(tbHeader)\n        }\n        setTimeout(() => this.forceUpdate(), 1000)\n    }\n    receiveResult(result) {\n        let join = null;\n        if(result[0]['Edit']) {\n            join = this.state.devData.concat(result);\n        } else {\n            join = this.state.devData;\n        }\n\n        if(result.error) {\n            this.props.handleAlertInfo('error',result.error)\n        } else {\n            _self.setState({devData:join})\n        }\n    }\n\n    receiveResultClusterInst(result) {\n        _self.props.handleLoadingSpinner();\n        // @inki if data has expired token\n        if(result.error && result.error.indexOf('Expired') > -1) {\n            _self.props.handleAlertInfo('error', result.error);\n            setTimeout(() => _self.gotoUrl('/logout'), 4000);\n            _self.props.handleLoadingSpinner(false);\n            return;\n        }\n\n        //_self.countObject[result[0]['Region']].push(result[0]['Region'])\n        // console.log('20191004 ', result)\n        // if(result.length) {\n        //     if(result[0]['Region'] === \"\") {\n        //         _self.props.handleLoadingSpinner(false);\n        //         //_self.props.handleAlertInfo('error', 'There is no data to display')\n        //     } else {\n\n        //     }\n        //     _self.groupJoin(result,'clusterInst', result[0]['Region'])\n        // }\n        _self.props.handleLoadingSpinner(false);\n        _self.groupJoin(result,'clusterInst')\n    }\n    receiveResultCloudlet(result) {\n\n        // @inki if data has expired token\n        if(result.error && result.error.indexOf('Expired') > -1) {\n            _self.props.handleAlertInfo('error', result.error);\n            setTimeout(() => _self.gotoUrl('/logout'), 4000);\n            _self.props.handleLoadingSpinner();\n            return;\n        }\n        //_self.countObject[result[0]['Region']].push(result[0]['Region'])\n        _self.props.handleLoadingSpinner();\n        _self.groupJoin(result,'cloudlet')\n    }\n\n    groupJoin(result,cmpt){\n        let regionGroup = (!result.error) ? reducer.groupBy(result, 'Region'):{};\n        if(Object.keys(regionGroup)[0]) {\n            if(cmpt == 'clusterInst') this.clusterInstDummy = _self.clusterInstDummy.concat(result)\n            else if(cmpt == 'cloudlet') this.cloudletDummy = _self.cloudletDummy.concat(result)\n        }\n        _self.loadCount ++;\n        if(rgn.length*2 == this.loadCount){\n            _self.countJoin()\n        }\n        \n\n    }\n    countJoin() {\n        let clusterInst = this.clusterInstDummy;\n        let cloudlet = this.cloudletDummy;\n        this.props.handleLoadingSpinner(false);\n        if(clusterInst && clusterInst.length) {\n            try{\n                clusterInst.map((itemCinst,i) => {\n                    cloudlet.map((itemClet,j) => {\n                        if(itemCinst.Cloudlet === itemClet.CloudletName) {\n                            itemCinst.CloudletLocation = itemClet.CloudletLocation;\n                        }\n                    })\n                })\n                _self.setState({devData:clusterInst,dataSort:false})\n            } catch(e) {\n\n            }\n\n        }\n\n\n    }\n    \n    getDataDeveloper = (region,regionArr) => {\n        _self.props.handleLoadingSpinner(true);\n        _self.loadCount = 0;\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        _self.clusterInstDummy = [];\n        _self.cloudletDummy = [];\n        _self.setState({devData:[]})\n        //TODO: region에 대한 데이터를  DB에서 가져와야 함.\n\n        let serviceBody = {}\n        _self.setState({devData:[], cloudletData:[], clusterInstData:[]})\n        if(region !== 'All'){\n            rgn = [region];\n        } else {\n            rgn = (regionArr)?regionArr:this.props.regionInfo.region;\n        }\n\n\n        if(localStorage.selectRole == 'AdminManager') {\n            rgn.map((item) => {\n                // All show clusterInst\n                services.getMCService('ShowCloudlet',{token:store ? store.userToken : 'null', region:item}, _self.receiveResultCloudlet)\n                services.getMCService('ShowClusterInst',{token:store ? store.userToken : 'null', region:item}, _self.receiveResultClusterInst)\n                // setTimeout(()=>services.getMCService('ShowCloudlet',{token:store.userToken, region:item}, _self.receiveResultCloudlet), 0);\n            })\n        } else {\n            rgn.map((item) => {\n                serviceBody = {\n                    \"token\":store ? store.userToken : 'null',\n                    \"params\": {\n                        \"region\":item,\n                        \"clusterinst\":{\n                            \"key\":{\n                                \"developer\": localStorage.selectOrg\n                            }\n                        }\n                    }\n                }\n                // org별 show clusterInst\n                services.getMCService('ShowCloudlet',{token:store ? store.userToken : 'null', region:item}, _self.receiveResultCloudlet)\n                services.getMCService('ShowClusterInsts',serviceBody, _self.receiveResultClusterInst)\n                //setTimeout(()=>services.getMCService('ShowCloudlet',{token:store.userToken, region:item}, _self.receiveResultCloudlet), 0);\n            })\n        }\n\n    }\n    getDataDeveloperSub = (region) => {\n        let _region = (region)?region:'All';\n        this.getDataDeveloper(_region);\n    }\n    render() {\n        const {shouldShowBox, shouldShowCircle, devData} = this.state;\n        const { activeItem, viewMode } = this.state;\n        let randomValue = Math.round(Math.random() * 100);\n        return (\n\n            //<DeveloperListView devData={this.state.devData} headerLayout={this.headerLayout}></DeveloperListView>\n            (viewMode === 'listView')?\n\n                <MapWithListView devData={devData} randomValue={randomValue} headerLayout={this.headerLayout} hiddenKeys={this.hiddenKeys} siteId={'ClusterInst'} region='US' dataRefresh={this.getDataDeveloperSub} dataSort={this.state.dataSort}></MapWithListView>\n                :\n                <PageDetailViewer className=\"ttt\" data={this.state.detailData} page='clusterInst'/>\n        );\n    }\n\n};\n\nconst mapStateToProps = (state) => {\n    let viewMode = null;\n    let detailData = null;\n    if(state.changeViewMode.mode && state.changeViewMode.mode.viewMode) {\n        viewMode = state.changeViewMode.mode.viewMode;\n        detailData = state.changeViewMode.mode.data;\n    }\n    let regionInfo = (state.regionInfo)?state.regionInfo:null;\n    return {\n        computeRefresh : (state.computeRefresh) ? state.computeRefresh: null,\n        changeRegion : state.changeRegion.region?state.changeRegion.region:null,\n        selectOrg : state.selectOrg.org?state.selectOrg.org:null,\n        userRole : state.showUserRole?state.showUserRole.role:null,\n        viewMode : viewMode, detailData:detailData,\n        regionInfo: regionInfo\n    }\n};\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleChangeSite: (data) => { dispatch(actions.changeSite(data))},\n        handleInjectData: (data) => { dispatch(actions.injectData(data))},\n        handleInjectDeveloper: (data) => { dispatch(actions.registDeveloper(data))},\n        handleComputeRefresh: (data) => { dispatch(actions.computeRefresh(data))},\n        handleLoadingSpinner: (data) => { dispatch(actions.loadingSpinner(data))},\n        handleAlertInfo: (mode,msg) => { dispatch(actions.alertInfo(mode,msg))}\n    };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(sizeMe({ monitorHeight: true })(SiteFourPageClusterInst)));\n"]},"metadata":{},"sourceType":"module"}