{"ast":null,"code":"import * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n\nvar generateData = function generateData(datas) {\n  var result = datas;\n  var values = [];\n\n  if (result.data) {\n    if (result.data.error) {\n      console.log(\"result error\");\n    } else {\n      result.data.map(function (data, i) {\n        var Index = i;\n        var Type = data.Type || '-';\n        var AdminUsername = data.AdminUsername || '-';\n        var Organization = data.Name || '-';\n        var Address = data.Address || '-';\n        var Phone = data.Phone || '-';\n        var newRegistKey = ['Organization', 'Type', 'Phone', 'Address'];\n        values.push({\n          Organization: Organization,\n          Type: Type,\n          Phone: Phone,\n          Address: Address,\n          Edit: newRegistKey\n        });\n      });\n    }\n  } else {\n    console.log('there is no result');\n  } //ascending or descending\n  //values.sort(numberDes);\n  //values.reverse();\n\n\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatComputeOrganization = function FormatComputeOrganization(props) {\n  return generateData(props);\n};\n\nexport default FormatComputeOrganization;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/services/formatter/formatComputeOrganization.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","generateData","result","values","data","error","console","log","map","i","Index","Type","AdminUsername","Organization","Name","Address","Phone","newRegistKey","push","Edit","retunDate","str","year","substring","month","day","hour","minute","date","Date","FormatComputeOrganization","props"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n\nlet generateData = (datas) => {\n    let result = datas;\n    let values = [];\n    if(result.data){\n        if(result.data.error){\n            console.log(\"result error\")\n        }else {\n            result.data.map((data, i) => {\n                let Index = i;\n                let Type = data.Type || '-';\n                let AdminUsername = data.AdminUsername || '-';\n                let Organization = data.Name || '-';\n                let Address = data.Address || '-';\n                let Phone = data.Phone || '-';\n                let newRegistKey = ['Organization', 'Type', 'Phone', 'Address'];\n    \n                values.push({Organization:Organization, Type:Type, Phone:Phone, Address:Address, Edit:newRegistKey})\n            })\n        }\n    } else {\n        console.log('there is no result')\n    }\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    //values.reverse();\n\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatComputeOrganization = (props) => (\n    generateData(props)\n)\n\nexport default FormatComputeOrganization;\n"]},"metadata":{},"sourceType":"module"}