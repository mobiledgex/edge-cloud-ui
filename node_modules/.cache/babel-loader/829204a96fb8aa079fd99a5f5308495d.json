{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/usage/cpumemoryListView.js\";\n\n/**\n * Created by inkikim on 19/12/2018.\n */\nimport React from 'react';\nimport { Button, Image, List, Grid } from 'semantic-ui-react';\nimport * as d3 from 'd3';\nimport CPUMEMUsage from './cupmemory';\nimport SparkLine from '../../charts/sparkline';\nimport ClusterIcon from '../../components/icon/clusterIcon';\nvar listData = [{\n  alarm: '3',\n  dName: 'Cluster-A',\n  values: {\n    cpu: 35,\n    mem: 55,\n    sys: 33,\n    net: [10, 15]\n  }\n}, {\n  alarm: '5',\n  dName: 'Cluster-B',\n  values: {\n    cpu: 78,\n    mem: 78,\n    sys: 12,\n    net: [10, 15]\n  }\n}, {\n  alarm: '1',\n  dName: 'Cluster-C',\n  values: {\n    cpu: 32,\n    mem: 33,\n    sys: 67,\n    net: [10, 15]\n  }\n}, {\n  alarm: '2',\n  dName: 'Cluster-D',\n  values: {\n    cpu: 23,\n    mem: 46,\n    sys: 41,\n    net: [10, 15]\n  }\n}, {\n  alarm: '4',\n  dName: 'Cluster-E',\n  values: {\n    cpu: 55,\n    mem: 67,\n    sys: 23,\n    net: [10, 15]\n  }\n}];\nvar icnt = 0;\nvar domId_old = null;\n\nfunction boxMullerRandom() {\n  var phase = false,\n      x1,\n      x2,\n      w,\n      z;\n  return function () {\n    if (phase = !phase) {\n      do {\n        x1 = 2.0 * Math.random() - 1.0;\n        x2 = 2.0 * Math.random() - 1.0;\n        w = x1 * x1 + x2 * x2;\n      } while (w >= 1.0);\n\n      w = Math.sqrt(-2.0 * Math.log(w) / w);\n      return x1 * w;\n    } else {\n      return x2 * w;\n    }\n  }();\n}\n\nfunction randomData() {\n  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  return Array.apply(0, Array(n)).map(boxMullerRandom);\n}\n\nvar sampleData = randomData(30);\nvar sampleData100 = randomData(100);\nvar dummy = [17.2, 7.4];\nvar testColor = ['yellow', 'green', 'blue', 'grey', 'sky'];\n\nvar getRow = function getRow(idx, uValues, clusterNm, state) {\n  return React.createElement(Grid.Row, {\n    key: idx,\n    columns: 3,\n    className: \"cluster_property\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 4,\n    className: \"cluster_health\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(ClusterIcon, {\n    idx: idx,\n    uValues: uValues['cpu'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, clusterNm)), React.createElement(Grid.Column, {\n    width: 7,\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(CPUMEMUsage, {\n    label: \"CPU\",\n    value: (uValues.cpu * 5).toFixed(2),\n    w: 60,\n    h: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(CPUMEMUsage, {\n    label: \"MEMORY\",\n    value: uValues.mem,\n    w: 60,\n    h: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(CPUMEMUsage, {\n    label: \"DISK\",\n    value: uValues.sys === '0.00' ? dummy[idx] : uValues.sys,\n    w: 60,\n    h: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 5,\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"transition_chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(SparkLine, {\n    sId: 'spchart_' + idx,\n    w: 240,\n    h: 60,\n    value: {\n      IN: uValues.net[0],\n      OUT: uValues.net[1]\n    },\n    label: ['recvBytes', 'sendBytes'],\n    series: uValues.time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"NETWORK I/O\"))));\n};\n\nvar getRowSample = function getRowSample(idx, data) {\n  return React.createElement(Grid.Row, {\n    key: idx,\n    columns: 3,\n    className: \"cluster_property\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 4,\n    className: \"cluster_health\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(ClusterIcon, {\n    idx: idx,\n    uValues: data.values['cpu'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, data.dName)), React.createElement(Grid.Column, {\n    width: 7,\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(CPUMEMUsage, {\n    label: \"CPU\",\n    value: (data.values.cpu * 5).toFixed(2),\n    w: 60,\n    h: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(CPUMEMUsage, {\n    label: \"MEMORY\",\n    value: data.values.mem,\n    w: 60,\n    h: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(CPUMEMUsage, {\n    label: \"DISK\",\n    value: data.values.sys === '0.00' ? dummy[idx] : data.values.sys,\n    w: 60,\n    h: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 5,\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"transition_chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(SparkLine, {\n    sId: 'spchart_' + idx,\n    w: 240,\n    h: 60,\n    value: {\n      IN: data.values.net[0],\n      OUT: data.values.net[1]\n    },\n    label: ['recvBytes', 'sendBytes'],\n    series: data.values.time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"NETWORK I/O\"))));\n};\n\nvar CPUMEMListView =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CPUMEMListView, _React$PureComponent);\n\n  function CPUMEMListView() {\n    var _this;\n\n    _classCallCheck(this, CPUMEMListView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CPUMEMListView).call(this));\n    _this.state = {\n      listCluster: ['ClusterA', 'ClusterB', 'ClusterC', 'ClusterD', 'ClusterE'],\n      listData: []\n    };\n    _this.count = 0;\n    return _this;\n  }\n\n  _createClass(CPUMEMListView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var idx = 0;\n      this.state.listCluster.map(function (clst, i) {//getIcon('#icon_'+i, 2);\n      });\n      this.setState({\n        listCluster: this.props.clusters\n      });\n\n      if (this.props.listData) {\n        this.setState({\n          listData: this.props.listData\n        });\n      } else {\n        this.setState({\n          listData: listData\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var list = [];\n\n      if (nextProps.listData.length) {\n        nextProps.listData.map(function (data, i) {\n          //if(data.dName === cluster){\n          //It's too long name of cluster, so that cut operator name....\n          //data.dName = data.dName.replace(nextProps.cloudlets[i], '')\n          list[i] = data; //}\n        });\n      } //순서 고정하기\n\n\n      this.setState({\n        listData: list\n      });\n    } //getRow(i, data.values, data.dName, this.state)\n\n    /*\n    {this.state.listData.map((data, i) =>\n                    getRow(i, data)\n                )}\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Grid, {\n        divided: true,\n        size: \"small\",\n        className: \"panel_contents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.state.listData ? this.state.listData.map(function (cInst, i) {\n        return getRowSample(i, cInst);\n      }) : null);\n    }\n  }]);\n\n  return CPUMEMListView;\n}(React.PureComponent);\n\nexport default CPUMEMListView;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/usage/cpumemoryListView.js"],"names":["React","Button","Image","List","Grid","d3","CPUMEMUsage","SparkLine","ClusterIcon","listData","alarm","dName","values","cpu","mem","sys","net","icnt","domId_old","boxMullerRandom","phase","x1","x2","w","z","Math","random","sqrt","log","randomData","n","Array","apply","map","sampleData","sampleData100","dummy","testColor","getRow","idx","uValues","clusterNm","state","display","justifyContent","toFixed","IN","OUT","time","getRowSample","data","CPUMEMListView","listCluster","count","clst","i","setState","props","clusters","nextProps","nextContext","list","length","cInst","PureComponent"],"mappings":"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","sourcesContent":["/**\n * Created by inkikim on 19/12/2018.\n */\n\nimport React from 'react'\nimport { Button, Image, List, Grid } from 'semantic-ui-react'\nimport * as d3 from 'd3';\nimport CPUMEMUsage from './cupmemory';\nimport SparkLine from '../../charts/sparkline';\nimport ClusterIcon from '../../components/icon/clusterIcon';\n\n\nlet listData = [\n    {alarm:'3', dName:'Cluster-A', values:{cpu:35, mem:55, sys:33, net:[10,15]}},\n    {alarm:'5', dName:'Cluster-B', values:{cpu:78, mem:78, sys:12, net:[10,15]}},\n    {alarm:'1', dName:'Cluster-C', values:{cpu:32, mem:33, sys:67, net:[10,15]}},\n    {alarm:'2', dName:'Cluster-D', values:{cpu:23, mem:46, sys:41, net:[10,15]}},\n    {alarm:'4', dName:'Cluster-E', values:{cpu:55, mem:67, sys:23, net:[10,15]}}\n]\nlet icnt = 0;\nlet domId_old = null;\nfunction boxMullerRandom () {\n    let phase = false,\n        x1, x2, w, z;\n\n    return (function() {\n\n        if (phase = !phase) {\n            do {\n                x1 = 2.0 * Math.random() - 1.0;\n                x2 = 2.0 * Math.random() - 1.0;\n                w = x1 * x1 + x2 * x2;\n            } while (w >= 1.0);\n\n            w = Math.sqrt((-2.0 * Math.log(w)) / w);\n            return x1 * w;\n        } else {\n            return x2 * w;\n        }\n    })();\n}\n\nfunction randomData(n = 30) {\n    return Array.apply(0, Array(n)).map(boxMullerRandom);\n}\n\nconst sampleData = randomData(30);\nconst sampleData100 = randomData(100);\nconst dummy=[17.2, 7.4]\nconst testColor = ['yellow', 'green', 'blue', 'grey', 'sky']\n\nconst getRow = (idx, uValues, clusterNm, state) => (\n    <Grid.Row key={idx} columns={3} className='cluster_property'>\n        <Grid.Column width={4} className='cluster_health'>\n            <ClusterIcon idx={idx} uValues={uValues['cpu']}></ClusterIcon>\n            <div className='label'>{clusterNm}</div>\n        </Grid.Column>\n        <Grid.Column width={7} style={{display:'flex', justifyContent:'space-between'}}>\n            <CPUMEMUsage label=\"CPU\" value={(uValues.cpu*5).toFixed(2)} w={60} h={60}></CPUMEMUsage>\n            <CPUMEMUsage label=\"MEMORY\" value={uValues.mem} w={60} h={60}></CPUMEMUsage>\n            <CPUMEMUsage label=\"DISK\" value={(uValues.sys === '0.00')?dummy[idx]:uValues.sys} w={60} h={60}></CPUMEMUsage>\n        </Grid.Column>\n        <Grid.Column width={5} style={{display:'flex', justifyContent:'center'}}>\n            <div className='transition_chart'>\n                <SparkLine sId={'spchart_'+idx} w={240} h={60} value={{IN:uValues.net[0], OUT:uValues.net[1]}} label={['recvBytes','sendBytes']} series={uValues.time}></SparkLine>\n                <div className='label'>NETWORK I/O</div>\n            </div>\n        </Grid.Column>\n    </Grid.Row>\n)\n\nconst getRowSample = (idx, data) => (\n    <Grid.Row key={idx} columns={3} className='cluster_property'>\n        <Grid.Column width={4} className='cluster_health'>\n            <ClusterIcon idx={idx} uValues={data.values['cpu']}></ClusterIcon>\n            <div className='label'>{data.dName}</div>\n        </Grid.Column>\n        <Grid.Column width={7} style={{display:'flex', justifyContent:'space-between'}}>\n            <CPUMEMUsage label=\"CPU\" value={(data.values.cpu*5).toFixed(2)} w={60} h={60}></CPUMEMUsage>\n            <CPUMEMUsage label=\"MEMORY\" value={data.values.mem} w={60} h={60}></CPUMEMUsage>\n            <CPUMEMUsage label=\"DISK\" value={(data.values.sys === '0.00')?dummy[idx]:data.values.sys} w={60} h={60}></CPUMEMUsage>\n        </Grid.Column>\n        <Grid.Column width={5} style={{display:'flex', justifyContent:'center'}}>\n            <div className='transition_chart'>\n                <SparkLine sId={'spchart_'+idx} w={240} h={60} value={{IN:data.values.net[0], OUT:data.values.net[1]}} label={['recvBytes','sendBytes']} series={data.values.time}></SparkLine>\n                <div className='label'>NETWORK I/O</div>\n            </div>\n        </Grid.Column>\n    </Grid.Row>\n)\nclass CPUMEMListView extends React.PureComponent {\n    constructor() {\n        super();\n        this.state = {\n            listCluster:['ClusterA', 'ClusterB', 'ClusterC', 'ClusterD', 'ClusterE'],\n            listData:[]\n        }\n        this.count = 0;\n    }\n\n    componentDidMount() {\n        let idx = 0;\n        this.state.listCluster.map((clst, i) => {\n            //getIcon('#icon_'+i, 2);\n        })\n        this.setState({listCluster: this.props.clusters})\n        if(this.props.listData) {\n            this.setState({listData:this.props.listData})\n        } else {\n            this.setState({listData:listData})\n        }\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        let list = [];\n        if(nextProps.listData.length) {\n            nextProps.listData.map((data,i) => {\n                //if(data.dName === cluster){\n                    //It's too long name of cluster, so that cut operator name....\n                    //data.dName = data.dName.replace(nextProps.cloudlets[i], '')\n                    list[i] = data;\n                //}\n            })\n        }\n        //순서 고정하기\n        this.setState({listData:list})\n\n    }\n//getRow(i, data.values, data.dName, this.state)\n    /*\n    {this.state.listData.map((data, i) =>\n                    getRow(i, data)\n                )}\n     */\n    render() {\n        return (\n            <Grid divided size=\"small\" className='panel_contents'>\n                {\n                    (this.state.listData)?this.state.listData.map((cInst, i) => (\n                        getRowSample( i, cInst)\n                    )) : null\n                }\n            </Grid>\n        )\n    }\n\n}\n\nexport default CPUMEMListView\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}