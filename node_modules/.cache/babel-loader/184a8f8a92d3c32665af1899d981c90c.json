{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _assertThisInitialized = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar exponential_1 = require(\"./backoff/exponential\");\n\nvar host_1 = require(\"./host\");\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar querystring = require(\"querystring\");\n/**\n * Status codes that will cause a host to be marked as 'failed' if we get\n * them from a request to Influx.\n * @type {Array}\n */\n\n\nvar resubmitErrorCodes = ['ETIMEDOUT', 'ESOCKETTIMEDOUT', 'ECONNRESET', 'ECONNREFUSED', 'EHOSTUNREACH'];\n/**\n * An ServiceNotAvailableError is returned as an error from requests that\n * result in a > 500 error code.\n */\n\nvar ServiceNotAvailableError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(ServiceNotAvailableError, _Error);\n\n  function ServiceNotAvailableError(message) {\n    var _this;\n\n    _classCallCheck(this, ServiceNotAvailableError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ServiceNotAvailableError).call(this));\n    _this.message = message;\n    Object.setPrototypeOf(_assertThisInitialized(_this), ServiceNotAvailableError.prototype);\n    return _this;\n  }\n\n  return ServiceNotAvailableError;\n}(_wrapNativeSuper(Error));\n\nexports.ServiceNotAvailableError = ServiceNotAvailableError;\n/**\n * An RequestError is returned as an error from requests that\n * result in a 300 <= error code <= 500.\n */\n\nvar RequestError =\n/*#__PURE__*/\nfunction (_Error2) {\n  _inherits(RequestError, _Error2);\n\n  function RequestError(req, res, body) {\n    var _this2;\n\n    _classCallCheck(this, RequestError);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(RequestError).call(this));\n    _this2.req = req;\n    _this2.res = res;\n    _this2.message = \"A \".concat(res.statusCode, \" \").concat(res.statusMessage, \" error occurred: \").concat(body);\n    Object.setPrototypeOf(_assertThisInitialized(_this2), RequestError.prototype);\n    return _this2;\n  }\n\n  _createClass(RequestError, null, [{\n    key: \"Create\",\n    value: function Create(req, res, callback) {\n      var body = '';\n      res.on('data', function (str) {\n        body += str.toString();\n      });\n      res.on('end', function () {\n        return callback(new RequestError(req, res, body));\n      });\n    }\n  }]);\n\n  return RequestError;\n}(_wrapNativeSuper(Error));\n\nexports.RequestError = RequestError;\n/**\n * Creates a function generation that returns a wrapper which only allows\n * through the first call of any function that it generated.\n */\n\nfunction doOnce() {\n  var handled = false;\n  return function (fn) {\n    return function (arg) {\n      if (handled) {\n        return;\n      }\n\n      handled = true;\n      fn(arg);\n    };\n  };\n}\n\nfunction setToArray(itemSet) {\n  var output = [];\n  itemSet.forEach(function (value) {\n    output.push(value);\n  });\n  return output;\n}\n\nvar request = function request(options, callback) {\n  if (options.protocol === 'https:') {\n    return https.request(options, callback);\n  }\n\n  return http.request(options, callback);\n};\n/**\n *\n * The Pool maintains a list available Influx hosts and dispatches requests\n * to them. If there are errors connecting to hosts, it will disable that\n * host for a period of time.\n */\n\n\nvar Pool =\n/*#__PURE__*/\nfunction () {\n  /**\n  * Creates a new Pool instance.\n  * @param {IPoolOptions} options\n  */\n  function Pool(options) {\n    _classCallCheck(this, Pool);\n\n    this._options = Object.assign({\n      backoff: new exponential_1.ExponentialBackoff({\n        initial: 300,\n        max: 10 * 1000,\n        random: 1\n      }),\n      maxRetries: 2,\n      requestTimeout: 30 * 1000\n    }, options);\n    this._index = 0;\n    this._hostsAvailable = new Set();\n    this._hostsDisabled = new Set();\n    this._timeout = this._options.requestTimeout;\n  }\n  /**\n  * Returns a list of currently active hosts.\n  * @return {Host[]}\n  */\n\n\n  _createClass(Pool, [{\n    key: \"getHostsAvailable\",\n    value: function getHostsAvailable() {\n      return setToArray(this._hostsAvailable);\n    }\n    /**\n    * Returns a list of hosts that are currently disabled due to network\n    * errors.\n    * @return {Host[]}\n    */\n\n  }, {\n    key: \"getHostsDisabled\",\n    value: function getHostsDisabled() {\n      return setToArray(this._hostsDisabled);\n    }\n    /**\n    * Inserts a new host to the pool.\n    */\n\n  }, {\n    key: \"addHost\",\n    value: function addHost(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var host = new host_1.Host(url, this._options.backoff.reset(), options);\n\n      this._hostsAvailable.add(host);\n\n      return host;\n    }\n    /**\n    * Returns true if there's any host available to by queried.\n    * @return {Boolean}\n    */\n\n  }, {\n    key: \"hostIsAvailable\",\n    value: function hostIsAvailable() {\n      return this._hostsAvailable.size > 0;\n    }\n    /**\n    * Makes a request and calls back with the response, parsed as JSON.\n    * An error is returned on a non-2xx status code or on a parsing exception.\n    */\n\n  }, {\n    key: \"json\",\n    value: function json(options) {\n      return this.text(options).then(function (res) {\n        return JSON.parse(res);\n      });\n    }\n    /**\n    * Makes a request and resolves with the plain text response,\n    * if possible. An error is raised on a non-2xx status code.\n    */\n\n  }, {\n    key: \"text\",\n    value: function text(options) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3.stream(options, function (err, res) {\n          if (err) {\n            return reject(err);\n          }\n\n          var output = '';\n          res.on('data', function (str) {\n            output += str.toString();\n          });\n          res.on('end', function () {\n            return resolve(output);\n          });\n        });\n      });\n    }\n    /**\n    * Makes a request and discards any response body it receives.\n    * An error is returned on a non-2xx status code.\n    */\n\n  }, {\n    key: \"discard\",\n    value: function discard(options) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this4.stream(options, function (err, res) {\n          if (err) {\n            return reject(err);\n          }\n\n          res.on('data', function () {\n            /* ignore */\n          });\n          res.on('end', function () {\n            return resolve();\n          });\n        });\n      });\n    }\n    /**\n    * Ping sends out a request to all available Influx servers, reporting on\n    * their response time and version number.\n    */\n\n  }, {\n    key: \"ping\",\n    value: function ping(timeout) {\n      var _arguments = arguments;\n      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/ping';\n      var todo = [];\n      setToArray(this._hostsAvailable).concat(setToArray(this._hostsDisabled)).forEach(function (host) {\n        var start = Date.now();\n        var url = host.url;\n        var once = doOnce();\n        return todo.push(new Promise(function (resolve) {\n          var req = request(Object.assign({\n            hostname: url.hostname,\n            method: 'GET',\n            path: path,\n            port: Number(url.port),\n            protocol: url.protocol,\n            timeout: timeout\n          }, host.options), once(function (res) {\n            resolve({\n              url: url,\n              res: res.resume(),\n              online: res.statusCode < 300,\n              rtt: Date.now() - start,\n              version: res.headers['x-influxdb-version']\n            });\n          }));\n          var fail = once(function () {\n            resolve({\n              online: false,\n              res: null,\n              rtt: Infinity,\n              url: url,\n              version: null\n            });\n          }); // Support older Nodes and polyfills which don't allow .timeout() in\n          // the request options, wrapped in a conditional for even worse\n          // polyfills. See: https://github.com/node-influx/node-influx/issues/221\n\n          if (typeof req.setTimeout === 'function') {\n            req.setTimeout(timeout, function () {\n              fail.call(fail, _arguments);\n            }); // Tslint:disable-line\n          }\n\n          req.on('timeout', fail);\n          req.on('error', fail);\n          req.end();\n        }));\n      });\n      return Promise.all(todo);\n    }\n    /**\n    * Makes a request and calls back with the IncomingMessage stream,\n    * if possible. An error is returned on a non-2xx status code.\n    */\n\n  }, {\n    key: \"stream\",\n    value: function stream(options, callback) {\n      var _this5 = this;\n\n      if (!this.hostIsAvailable()) {\n        return callback(new ServiceNotAvailableError('No host available'), null);\n      }\n\n      var once = doOnce();\n\n      var host = this._getHost();\n\n      var path = host.url.pathname === '/' ? '' : host.url.pathname;\n      path += options.path;\n\n      if (options.query) {\n        path += '?' + querystring.stringify(options.query);\n      }\n\n      var req = request(Object.assign({\n        headers: {\n          'content-length': options.body ? Buffer.from(options.body).length : 0\n        },\n        hostname: host.url.hostname,\n        method: options.method,\n        path: path,\n        port: Number(host.url.port),\n        protocol: host.url.protocol,\n        timeout: this._timeout\n      }, host.options), once(function (res) {\n        if (res.statusCode >= 500) {\n          return _this5._handleRequestError(new ServiceNotAvailableError(res.statusMessage), host, options, callback);\n        }\n\n        if (res.statusCode >= 300) {\n          return RequestError.Create(req, res, function (err) {\n            return callback(err, res);\n          }); // eslint-disable-line new-cap\n        }\n\n        host.success();\n        return callback(undefined, res);\n      })); // Handle network or HTTP parsing errors:\n\n      req.on('error', once(function (err) {\n        _this5._handleRequestError(err, host, options, callback);\n      })); // Handle timeouts:\n\n      req.on('timeout', once(function () {\n        _this5._handleRequestError(new ServiceNotAvailableError('Request timed out'), host, options, callback);\n      })); // Support older Nodes and polyfills which don't allow .timeout() in the\n      // request options, wrapped in a conditional for even worse polyfills. See:\n      // https://github.com/node-influx/node-influx/issues/221\n\n      if (typeof req.setTimeout === 'function') {\n        req.setTimeout(host.options.timeout || this._timeout); // Tslint:disable-line\n      } // Write out the body:\n\n\n      if (options.body) {\n        req.write(options.body);\n      }\n\n      req.end();\n    }\n    /**\n    * Returns the next available host for querying.\n    * @return {Host}\n    */\n\n  }, {\n    key: \"_getHost\",\n    value: function _getHost() {\n      var available = setToArray(this._hostsAvailable);\n      var host = available[this._index];\n      this._index = (this._index + 1) % available.length;\n      return host;\n    }\n    /**\n    * Re-enables the provided host, returning it to the pool to query.\n    * @param  {Host} host\n    */\n\n  }, {\n    key: \"_enableHost\",\n    value: function _enableHost(host) {\n      this._hostsDisabled.delete(host);\n\n      this._hostsAvailable.add(host);\n    }\n    /**\n    * Disables the provided host, removing it from the query pool. It will be\n    * re-enabled after a backoff interval\n    */\n\n  }, {\n    key: \"_disableHost\",\n    value: function _disableHost(host) {\n      var _this6 = this;\n\n      this._hostsAvailable.delete(host);\n\n      this._hostsDisabled.add(host);\n\n      this._index %= Math.max(1, this._hostsAvailable.size);\n      setTimeout(function () {\n        return _this6._enableHost(host);\n      }, host.fail());\n    }\n  }, {\n    key: \"_handleRequestError\",\n    value: function _handleRequestError(err, host, options, callback) {\n      if (!(err instanceof ServiceNotAvailableError) && !resubmitErrorCodes.includes(err.code)) {\n        return callback(err, null);\n      }\n\n      this._disableHost(host);\n\n      var retries = options.retries || 0;\n\n      if (retries < this._options.maxRetries && this.hostIsAvailable()) {\n        options.retries = retries + 1;\n        return this.stream(options, callback);\n      }\n\n      callback(err, null);\n    }\n  }]);\n\n  return Pool;\n}();\n\nexports.Pool = Pool;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/influx/lib/src/pool.js"],"names":["Object","defineProperty","exports","value","exponential_1","require","host_1","http","https","querystring","resubmitErrorCodes","ServiceNotAvailableError","message","setPrototypeOf","prototype","Error","RequestError","req","res","body","statusCode","statusMessage","callback","on","str","toString","doOnce","handled","fn","arg","setToArray","itemSet","output","forEach","push","request","options","protocol","Pool","_options","assign","backoff","ExponentialBackoff","initial","max","random","maxRetries","requestTimeout","_index","_hostsAvailable","Set","_hostsDisabled","_timeout","url","host","Host","reset","add","size","text","then","JSON","parse","Promise","resolve","reject","stream","err","timeout","path","todo","concat","start","Date","now","once","hostname","method","port","Number","resume","online","rtt","version","headers","fail","Infinity","setTimeout","call","arguments","end","all","hostIsAvailable","_getHost","pathname","query","stringify","Buffer","from","length","_handleRequestError","Create","success","undefined","write","available","delete","Math","_enableHost","includes","code","_disableHost","retries"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst exponential_1 = require(\"./backoff/exponential\");\nconst host_1 = require(\"./host\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst querystring = require(\"querystring\");\n/**\n * Status codes that will cause a host to be marked as 'failed' if we get\n * them from a request to Influx.\n * @type {Array}\n */\nconst resubmitErrorCodes = [\n    'ETIMEDOUT',\n    'ESOCKETTIMEDOUT',\n    'ECONNRESET',\n    'ECONNREFUSED',\n    'EHOSTUNREACH'\n];\n/**\n * An ServiceNotAvailableError is returned as an error from requests that\n * result in a > 500 error code.\n */\nclass ServiceNotAvailableError extends Error {\n    constructor(message) {\n        super();\n        this.message = message;\n        Object.setPrototypeOf(this, ServiceNotAvailableError.prototype);\n    }\n}\nexports.ServiceNotAvailableError = ServiceNotAvailableError;\n/**\n * An RequestError is returned as an error from requests that\n * result in a 300 <= error code <= 500.\n */\nclass RequestError extends Error {\n    constructor(req, res, body) {\n        super();\n        this.req = req;\n        this.res = res;\n        this.message = `A ${res.statusCode} ${res.statusMessage} error occurred: ${body}`;\n        Object.setPrototypeOf(this, RequestError.prototype);\n    }\n    static Create(req, res, callback) {\n        let body = '';\n        res.on('data', str => {\n            body += str.toString();\n        });\n        res.on('end', () => callback(new RequestError(req, res, body)));\n    }\n}\nexports.RequestError = RequestError;\n/**\n * Creates a function generation that returns a wrapper which only allows\n * through the first call of any function that it generated.\n */\nfunction doOnce() {\n    let handled = false;\n    return fn => {\n        return arg => {\n            if (handled) {\n                return;\n            }\n            handled = true;\n            fn(arg);\n        };\n    };\n}\nfunction setToArray(itemSet) {\n    const output = [];\n    itemSet.forEach(value => {\n        output.push(value);\n    });\n    return output;\n}\nconst request = (options, callback) => {\n    if (options.protocol === 'https:') {\n        return https.request(options, callback);\n    }\n    return http.request(options, callback);\n};\n/**\n *\n * The Pool maintains a list available Influx hosts and dispatches requests\n * to them. If there are errors connecting to hosts, it will disable that\n * host for a period of time.\n */\nclass Pool {\n    /**\n   * Creates a new Pool instance.\n   * @param {IPoolOptions} options\n   */\n    constructor(options) {\n        this._options = Object.assign({ backoff: new exponential_1.ExponentialBackoff({\n                initial: 300,\n                max: 10 * 1000,\n                random: 1\n            }), maxRetries: 2, requestTimeout: 30 * 1000 }, options);\n        this._index = 0;\n        this._hostsAvailable = new Set();\n        this._hostsDisabled = new Set();\n        this._timeout = this._options.requestTimeout;\n    }\n    /**\n   * Returns a list of currently active hosts.\n   * @return {Host[]}\n   */\n    getHostsAvailable() {\n        return setToArray(this._hostsAvailable);\n    }\n    /**\n   * Returns a list of hosts that are currently disabled due to network\n   * errors.\n   * @return {Host[]}\n   */\n    getHostsDisabled() {\n        return setToArray(this._hostsDisabled);\n    }\n    /**\n   * Inserts a new host to the pool.\n   */\n    addHost(url, options = {}) {\n        const host = new host_1.Host(url, this._options.backoff.reset(), options);\n        this._hostsAvailable.add(host);\n        return host;\n    }\n    /**\n   * Returns true if there's any host available to by queried.\n   * @return {Boolean}\n   */\n    hostIsAvailable() {\n        return this._hostsAvailable.size > 0;\n    }\n    /**\n   * Makes a request and calls back with the response, parsed as JSON.\n   * An error is returned on a non-2xx status code or on a parsing exception.\n   */\n    json(options) {\n        return this.text(options).then(res => JSON.parse(res));\n    }\n    /**\n   * Makes a request and resolves with the plain text response,\n   * if possible. An error is raised on a non-2xx status code.\n   */\n    text(options) {\n        return new Promise((resolve, reject) => {\n            this.stream(options, (err, res) => {\n                if (err) {\n                    return reject(err);\n                }\n                let output = '';\n                res.on('data', str => {\n                    output += str.toString();\n                });\n                res.on('end', () => resolve(output));\n            });\n        });\n    }\n    /**\n   * Makes a request and discards any response body it receives.\n   * An error is returned on a non-2xx status code.\n   */\n    discard(options) {\n        return new Promise((resolve, reject) => {\n            this.stream(options, (err, res) => {\n                if (err) {\n                    return reject(err);\n                }\n                res.on('data', () => {\n                    /* ignore */\n                });\n                res.on('end', () => resolve());\n            });\n        });\n    }\n    /**\n   * Ping sends out a request to all available Influx servers, reporting on\n   * their response time and version number.\n   */\n    ping(timeout, path = '/ping') {\n        const todo = [];\n        setToArray(this._hostsAvailable)\n            .concat(setToArray(this._hostsDisabled))\n            .forEach(host => {\n            const start = Date.now();\n            const url = host.url;\n            const once = doOnce();\n            return todo.push(new Promise(resolve => {\n                const req = request(Object.assign({ hostname: url.hostname, method: 'GET', path, port: Number(url.port), protocol: url.protocol, timeout }, host.options), once((res) => {\n                    resolve({\n                        url,\n                        res: res.resume(),\n                        online: res.statusCode < 300,\n                        rtt: Date.now() - start,\n                        version: res.headers['x-influxdb-version']\n                    });\n                }));\n                const fail = once(() => {\n                    resolve({\n                        online: false,\n                        res: null,\n                        rtt: Infinity,\n                        url,\n                        version: null\n                    });\n                });\n                // Support older Nodes and polyfills which don't allow .timeout() in\n                // the request options, wrapped in a conditional for even worse\n                // polyfills. See: https://github.com/node-influx/node-influx/issues/221\n                if (typeof req.setTimeout === 'function') {\n                    req.setTimeout(timeout, () => {\n                        fail.call(fail, arguments);\n                    }); // Tslint:disable-line\n                }\n                req.on('timeout', fail);\n                req.on('error', fail);\n                req.end();\n            }));\n        });\n        return Promise.all(todo);\n    }\n    /**\n   * Makes a request and calls back with the IncomingMessage stream,\n   * if possible. An error is returned on a non-2xx status code.\n   */\n    stream(options, callback) {\n        if (!this.hostIsAvailable()) {\n            return callback(new ServiceNotAvailableError('No host available'), null);\n        }\n        const once = doOnce();\n        const host = this._getHost();\n        let path = host.url.pathname === '/' ? '' : host.url.pathname;\n        path += options.path;\n        if (options.query) {\n            path += '?' + querystring.stringify(options.query);\n        }\n        const req = request(Object.assign({ headers: { 'content-length': options.body ? Buffer.from(options.body).length : 0 }, hostname: host.url.hostname, method: options.method, path, port: Number(host.url.port), protocol: host.url.protocol, timeout: this._timeout }, host.options), once((res) => {\n            if (res.statusCode >= 500) {\n                return this._handleRequestError(new ServiceNotAvailableError(res.statusMessage), host, options, callback);\n            }\n            if (res.statusCode >= 300) {\n                return RequestError.Create(req, res, err => callback(err, res)); // eslint-disable-line new-cap\n            }\n            host.success();\n            return callback(undefined, res);\n        }));\n        // Handle network or HTTP parsing errors:\n        req.on('error', once((err) => {\n            this._handleRequestError(err, host, options, callback);\n        }));\n        // Handle timeouts:\n        req.on('timeout', once(() => {\n            this._handleRequestError(new ServiceNotAvailableError('Request timed out'), host, options, callback);\n        }));\n        // Support older Nodes and polyfills which don't allow .timeout() in the\n        // request options, wrapped in a conditional for even worse polyfills. See:\n        // https://github.com/node-influx/node-influx/issues/221\n        if (typeof req.setTimeout === 'function') {\n            req.setTimeout(host.options.timeout || this._timeout); // Tslint:disable-line\n        }\n        // Write out the body:\n        if (options.body) {\n            req.write(options.body);\n        }\n        req.end();\n    }\n    /**\n   * Returns the next available host for querying.\n   * @return {Host}\n   */\n    _getHost() {\n        const available = setToArray(this._hostsAvailable);\n        const host = available[this._index];\n        this._index = (this._index + 1) % available.length;\n        return host;\n    }\n    /**\n   * Re-enables the provided host, returning it to the pool to query.\n   * @param  {Host} host\n   */\n    _enableHost(host) {\n        this._hostsDisabled.delete(host);\n        this._hostsAvailable.add(host);\n    }\n    /**\n   * Disables the provided host, removing it from the query pool. It will be\n   * re-enabled after a backoff interval\n   */\n    _disableHost(host) {\n        this._hostsAvailable.delete(host);\n        this._hostsDisabled.add(host);\n        this._index %= Math.max(1, this._hostsAvailable.size);\n        setTimeout(() => this._enableHost(host), host.fail());\n    }\n    _handleRequestError(err, host, options, callback) {\n        if (!(err instanceof ServiceNotAvailableError) && !resubmitErrorCodes.includes(err.code)) {\n            return callback(err, null);\n        }\n        this._disableHost(host);\n        const retries = options.retries || 0;\n        if (retries < this._options.maxRetries && this.hostIsAvailable()) {\n            options.retries = retries + 1;\n            return this.stream(options, callback);\n        }\n        callback(err, null);\n    }\n}\nexports.Pool = Pool;\n"]},"metadata":{},"sourceType":"script"}