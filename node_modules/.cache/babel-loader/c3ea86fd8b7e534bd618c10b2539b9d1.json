{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toDate;\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [/^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [/^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n  ],\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  // timezone tokens\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument is null, it is treated as an invalid date.\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {*} argument - the value to convert\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nfunction toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  if (argument === null) {\n    return new Date(NaN);\n  }\n\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits === undefined ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  } // Clone the date\n\n\n  if (argument instanceof Date) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument !== 'string') {\n    return new Date(argument);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n  var date = parseDate(restDateString, year);\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone);\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset();\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset();\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE);\n  } else {\n    return new Date(argument);\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimeter);\n  var timeString;\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits];\n  var patternYYYYY = patterns.YYYYY[additionalDigits];\n  var token; // YYYY or ±YYYYY\n\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  } // YY or ±YYY\n\n\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  } // Invalid ISO-formatted year\n\n\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week; // YYYY\n\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  } // YYYY-MM\n\n\n  token = patterns.MM.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    date.setUTCFullYear(year, month);\n    return date;\n  } // YYYY-DDD or YYYYDDD\n\n\n  token = patterns.DDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  } // YYYY-MM-DD or YYYYMMDD\n\n\n  token = patterns.MMDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n    date.setUTCFullYear(year, month, day);\n    return date;\n  } // YYYY-Www or YYYYWww\n\n\n  token = patterns.Www.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    return dayOfISOYear(year, week);\n  } // YYYY-Www-D or YYYYWwwD\n\n\n  token = patterns.WwwD.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n    return dayOfISOYear(year, week, dayOfWeek);\n  } // Invalid ISO-formatted date\n\n\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes; // hh\n\n  token = patterns.HH.exec(timeString);\n\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR;\n  } // hh:mm or hhmm\n\n\n  token = patterns.HHMM.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n  } // hh:mm:ss or hhmmss\n\n\n  token = patterns.HHMMSS.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n  } // Invalid ISO-formatted time\n\n\n  return null;\n}\n\nfunction parseTimezone(timezoneString) {\n  var token;\n  var absoluteOffset; // Z\n\n  token = patterns.timezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  } // ±hh\n\n\n  token = patterns.timezoneHH.exec(timezoneString);\n\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // ±hh:mm or ±hhmm\n\n\n  token = patterns.timezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10);\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  }\n\n  return 0;\n}\n\nfunction dayOfISOYear(isoYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/react-date-range/node_modules/date-fns/toDate/index.js"],"names":["Object","defineProperty","exports","value","default","toDate","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","patterns","dateTimeDelimeter","plainTime","YY","YYY","YYYY","YYYYY","MM","DDD","MMDD","Www","WwwD","HH","HHMM","HHMMSS","timezone","timezoneZ","timezoneHH","timezoneHHMM","argument","dirtyOptions","arguments","length","TypeError","Date","NaN","options","additionalDigits","undefined","Number","RangeError","getTime","dateStrings","splitDateString","parseYearResult","parseYear","date","year","restDateString","parseDate","timestamp","time","offset","parseTime","parseTimezone","getTimezoneOffset","dateString","array","split","timeString","test","token","exec","replace","patternYYY","patternYYYYY","yearString","parseInt","slice","centuryString","month","week","setUTCFullYear","dayOfYear","day","dayOfISOYear","dayOfWeek","hours","minutes","parseFloat","seconds","timezoneString","absoluteOffset","isoYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toDate;\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\n\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [/^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [/^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n  ],\n\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n\n  // timezone tokens\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\n};\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument is null, it is treated as an invalid date.\n *\n * If all above fails, the function passes the given argument to Date constructor.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {*} argument - the value to convert\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  if (argument === null) {\n    return new Date(NaN);\n  }\n\n  var options = dirtyOptions || {};\n\n  var additionalDigits = options.additionalDigits === undefined ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  // Clone the date\n  if (argument instanceof Date) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument !== 'string') {\n    return new Date(argument);\n  }\n\n  var dateStrings = splitDateString(argument);\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n\n  var date = parseDate(restDateString, year);\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone);\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = new Date(timestamp + time).getTimezoneOffset();\n      offset = new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE).getTimezoneOffset();\n    }\n\n    return new Date(timestamp + time + offset * MILLISECONDS_IN_MINUTE);\n  } else {\n    return new Date(argument);\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimeter);\n  var timeString;\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits];\n  var patternYYYYY = patterns.YYYYY[additionalDigits];\n\n  var token;\n\n  // YYYY or ±YYYYY\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  }\n\n  // YY or ±YYY\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week;\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  }\n\n  // YYYY-MM\n  token = patterns.MM.exec(dateString);\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    date.setUTCFullYear(year, month);\n    return date;\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = patterns.DDD.exec(dateString);\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = patterns.MMDD.exec(dateString);\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n    date.setUTCFullYear(year, month, day);\n    return date;\n  }\n\n  // YYYY-Www or YYYYWww\n  token = patterns.Www.exec(dateString);\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    return dayOfISOYear(year, week);\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = patterns.WwwD.exec(dateString);\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n    return dayOfISOYear(year, week, dayOfWeek);\n  }\n\n  // Invalid ISO-formatted date\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes;\n\n  // hh\n  token = patterns.HH.exec(timeString);\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR;\n  }\n\n  // hh:mm or hhmm\n  token = patterns.HHMM.exec(timeString);\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n  }\n\n  // hh:mm:ss or hhmmss\n  token = patterns.HHMMSS.exec(timeString);\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n  }\n\n  // Invalid ISO-formatted time\n  return null;\n}\n\nfunction parseTimezone(timezoneString) {\n  var token;\n  var absoluteOffset;\n\n  // Z\n  token = patterns.timezoneZ.exec(timezoneString);\n  if (token) {\n    return 0;\n  }\n\n  // ±hh\n  token = patterns.timezoneHH.exec(timezoneString);\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  }\n\n  // ±hh:mm or ±hhmm\n  token = patterns.timezoneHHMM.exec(timezoneString);\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10);\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  }\n\n  return 0;\n}\n\nfunction dayOfISOYear(isoYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}