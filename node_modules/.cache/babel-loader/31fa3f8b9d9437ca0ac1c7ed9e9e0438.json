{"ast":null,"code":"import _toConsumableArray from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/registNewItem.js\";\nimport React from 'react';\nimport { Button, Divider, Modal, Grid, Input, TextArea, Dropdown } from \"semantic-ui-react\";\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport RegistNewInput from \"./registNewInput\"; //http://react-s-alert.jsdemo.be/\n\nimport Alert from 'react-s-alert';\nimport * as service from \"../services/service_compute_service\";\nimport * as aggregate from \"../utils\";\nvar _self = null;\n\nvar RegistNewItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RegistNewItem, _React$Component);\n\n  function RegistNewItem() {\n    var _this;\n\n    _classCallCheck(this, RegistNewItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegistNewItem).call(this));\n\n    _this.handleChangeOne = function (e, _ref) {\n      var value = _ref.value;\n\n      _this.setState({\n        dropdownValueOne: value\n      }); //reset list of sub dropwDown\n\n\n      _this.setCloudletList(value);\n    };\n\n    _this.handleChangeTwo = function (e, _ref2) {\n      var value = _ref2.value;\n\n      _this.setState({\n        dropdownValueTwo: value\n      });\n\n      _this.setAppList(value);\n    };\n\n    _this.handleChangeThree = function (e, _ref3) {\n      var value = _ref3.value;\n\n      _this.setState({\n        dropdownValueThree: value\n      });\n    };\n\n    _this.handleChangeFour = function (e, _ref4) {\n      var value = _ref4.value;\n\n      _this.setState({\n        dropdownValueFour: value\n      });\n    };\n\n    _this.handleChangeFive = function (e, _ref5) {\n      var value = _ref5.value;\n\n      _this.setState({\n        dropdownValueFive: value\n      });\n    };\n\n    _this.handleChangeSix = function (e, _ref6) {\n      var value = _ref6.value;\n\n      _this.setState({\n        dropdownValueSix: value\n      });\n    };\n\n    _this.handleChangeOrgType = function (e, _ref7) {\n      var value = _ref7.value;\n\n      _this.setState({\n        dropdownValueOrgType: value\n      });\n    };\n\n    _this.handleChangeOrgRole = function (e, _ref8) {\n      var value = _ref8.value;\n\n      _this.setState({\n        dropdownValueOrgRole: value\n      });\n    };\n\n    _this.handleChangeLong = function (e, _ref9) {\n      var value = _ref9.value;\n\n      if (value == '-') {\n        _this.setState({\n          locationLong: value\n        });\n\n        return;\n      }\n\n      var onlyNum = value;\n\n      if (onlyNum > 180 || onlyNum < -180) {\n        _this.props.handleAlertInfo('error', \"-180 ~ 180\");\n\n        e.target.value = null;\n        return;\n      }\n\n      _this.setState({\n        locationLong: onlyNum\n      });\n\n      _this.locationValue(onlyNum, _this.state.locationLat);\n    };\n\n    _this.handleChangeLat = function (e, _ref10) {\n      var value = _ref10.value;\n\n      if (value == '-') {\n        _this.setState({\n          locationLat: value\n        });\n\n        return;\n      }\n\n      var onlyNum = value;\n\n      if (onlyNum > 90 || onlyNum < -90) {\n        _this.props.handleAlertInfo('error', \"-90 ~ 90\");\n\n        e.target.value = null;\n        return;\n      }\n\n      _this.setState({\n        locationLat: onlyNum\n      });\n\n      _this.locationValue(_this.state.locationLong, onlyNum);\n    };\n\n    _this.locationValue = function (long, lat) {\n      if (long && lat) {\n        _this.setState({\n          locationLongLat: [Number(long), Number(lat)]\n        });\n      } else {\n        _this.setState({\n          locationLongLat: null\n        });\n      } //this.setState({ locationLongLat: [Number(long),Number(lat)] })\n\n    };\n\n    _this.handleChangeLocate = function (e, _ref11) {\n      var value = _ref11.value;\n    };\n\n    _this.resetLoc = function () {\n      _this.setState({\n        locationLat: null,\n        locationLong: null,\n        toggle: false\n      });\n    };\n\n    _this.setCloudletList = function (list) {\n      var cl = [];\n      list.map(function (item, i) {\n        if (i === 0) _self.setState({\n          dropdownValueThree: item\n        });\n        cl.push({\n          key: i,\n          value: item,\n          text: item\n        });\n      });\n\n      _self.setState({\n        devOptionsCloudlet: cl\n      });\n    };\n\n    _this.setOrgList = function (list) {\n      var cl = [];\n      list.map(function (item, i) {\n        if (i === 0) _self.setState({\n          dropdownValueOne: item\n        });\n        cl.push({\n          key: i,\n          value: item,\n          text: item\n        });\n      });\n\n      _self.setState({\n        devOptionsOperator: cl\n      });\n    };\n\n    _this.setAppList = function (devNm) {\n      var cl = [];\n      var vr = [];\n\n      _self.state.appResult[devNm].map(function (oper, i) {\n        if (i === 0) _self.setState({\n          dropdownValueFour: oper.AppName\n        });\n        cl.push({\n          key: i,\n          value: oper.AppName,\n          text: oper.AppName\n        });\n        vr.push({\n          key: i,\n          value: oper.Version,\n          text: oper.Version\n        });\n      });\n\n      _self.setState({\n        devOptionsFour: cl,\n        devOptionsFive: vr\n      });\n    };\n\n    _this.receiveSubmitCloudlet = function (result, body) {\n      _this.props.refresh('All');\n\n      if (result.data.error) {\n        _this.props.handleAlertInfo('error', result.data.error);\n\n        return;\n      } else {\n        _this.props.handleAlertInfo('success', 'Cloudlet ' + body.params.cloudlet.key.name + ' created successfully');\n      }\n\n      _this.props.handleLoadingSpinner(false);\n    };\n\n    _this.onSubmit = function () {\n      var serviceBody = {};\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null; //this.props.handleLoadingSpinner(true);\n      // setTimeout(() => {\n      //     this.props.handleLoadingSpinner(false);\n      // },3000);\n      //TODO: 20190410 메뉴 별 구분 필요\n\n      if (localStorage.selectMenu === 'Cluster Instances') {\n        var _this$props$submitDat = _this.props.submitData.registNewInput.values,\n            Cloudlet = _this$props$submitDat.Cloudlet,\n            Flavor = _this$props$submitDat.Flavor,\n            ClusterName = _this$props$submitDat.ClusterName,\n            OrganizationName = _this$props$submitDat.OrganizationName,\n            Operator = _this$props$submitDat.Operator,\n            Region = _this$props$submitDat.Region,\n            IpAccess = _this$props$submitDat.IpAccess,\n            Number_of_Master = _this$props$submitDat.Number_of_Master,\n            Number_of_Node = _this$props$submitDat.Number_of_Node; // this.props.handleCreatingSpinner(true);\n\n        serviceBody = {\n          \"token\": store ? store.userToken : 'null',\n          \"params\": {\n            \"region\": Region,\n            \"clusterinst\": {\n              \"key\": {\n                \"cluster_key\": {\n                  \"name\": ClusterName\n                },\n                \"cloudlet_key\": {\n                  \"operator_key\": {\n                    \"name\": Operator\n                  },\n                  \"name\": Cloudlet\n                },\n                \"developer\": OrganizationName\n              },\n              \"flavor\": {\n                \"name\": Flavor\n              },\n              \"ip_access\": Number(IpAccess),\n              \"num_masters\": Number(Number_of_Master),\n              \"num_nodes\": Number(Number_of_Node)\n            }\n          }\n        }; //this.props.handleLoadingSpinner(true);\n\n        service.createNewClusterInst('CreateClusterInst', serviceBody, _this.receiveSubmit);\n      } else if (localStorage.selectMenu === 'Cloudlets') {\n        var cloudlet = ['Region', 'CloudletName', 'OperatorName', 'Latitude', 'Longitude', 'Num_dynamic_ips'];\n        var error = [];\n        cloudlet.map(function (item) {\n          if (!_this.props.cloudletValue.values[item]) {\n            error.push(item);\n          }\n        });\n        var _this$props$submitDat2 = _this.props.submitData.registNewInput.values,\n            CloudletName = _this$props$submitDat2.CloudletName,\n            OperatorName = _this$props$submitDat2.OperatorName,\n            Latitude = _this$props$submitDat2.Latitude,\n            Longitude = _this$props$submitDat2.Longitude,\n            IpSupport = _this$props$submitDat2.IpSupport,\n            Num_dynamic_ips = _this$props$submitDat2.Num_dynamic_ips,\n            _Region = _this$props$submitDat2.Region;\n        serviceBody = {\n          \"token\": store ? store.userToken : 'null',\n          \"params\": {\n            \"region\": _Region,\n            \"cloudlet\": {\n              \"key\": {\n                \"operator_key\": {\n                  \"name\": OperatorName\n                },\n                \"name\": CloudletName\n              },\n              \"location\": {\n                \"latitude\": Number(Latitude),\n                \"longitude\": Number(Longitude),\n                \"timestamp\": {}\n              },\n              \"ip_support\": IpSupport,\n              \"num_dynamic_ips\": Number(Num_dynamic_ips)\n            }\n          }\n        };\n\n        if (error.length == 0) {\n          _this.close();\n\n          _this.props.handleLoadingSpinner(true);\n\n          service.createNewCloudlet('CreateCloudlet', serviceBody, _this.receiveSubmitCloudlet);\n        }\n\n        _this.setState({\n          validateError: error\n        });\n      } //close\n      //this.close();\n\n    };\n\n    _this.close = function () {\n      _this.setState({\n        open: false,\n        validateError: []\n      });\n\n      _this.props.close();\n    };\n\n    _this.longLocProps = function (refVal) {\n      if (refVal) _this.props.handleMapLong(refVal);\n    };\n\n    _this.latLocProps = function (refVal) {\n      if (refVal) _this.props.handleMapLat(refVal);\n    };\n\n    _this.getOptionData = function (region) {\n      if (localStorage.selectMenu == \"Cluster Instances\") {\n        var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null; // operator, cloudlet\n\n        service.getMCService('ShowCloudlet', {\n          token: store ? store.userToken : 'null',\n          region: region\n        }, _self.receiveOper); // Flavor\n\n        setTimeout(function () {\n          return service.getMCService('ShowFlavor', {\n            token: store.userToken,\n            region: region\n          }, _self.receiveCF);\n        }, 500);\n      }\n    };\n\n    _this.getOrgData = function () {\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null; // Organization\n\n      service.getMCService('showOrg', {\n        token: store ? store.userToken : 'null'\n      }, _this.receiveOrg);\n    };\n\n    _this.state = {\n      dummyData: [],\n      selected: {},\n      open: false,\n      dimmer: '',\n      locationLong: null,\n      locationLat: null,\n      locationLongLat: [],\n      toggle: false,\n      operList: [],\n      cloudletList: [],\n      devOptionsOperator: [],\n      devOptionsDeveloper: [],\n      devOptionsCloudlet: [],\n      devOptionsFour: [],\n      devOptionsFive: [],\n      devOptionsSix: [],\n      devOptionsCF: [],\n      dropdownValueOne: '',\n      dropdownValueTwo: '',\n      dropdownValueThree: '',\n      dropdownValueFour: '',\n      dropdownValueFive: '',\n      dropdownValueSix: '',\n      dropdownValueOrgType: '',\n      dropdownValueOrgRole: '',\n      cloudletResult: null,\n      cloudlets: null,\n      appResult: null,\n      validateError: [],\n      devOptionsOrgType: [{\n        key: 'Developer',\n        value: 'Developer',\n        text: 'Developer'\n      }, {\n        key: 'Operator',\n        value: 'Operator',\n        text: 'Operator'\n      }],\n      devOptionsOrgRole: [{\n        key: 'Manager',\n        value: 'Manager',\n        text: 'Manager'\n      }, {\n        key: 'Contributor',\n        value: 'Contributor',\n        text: 'Contributor'\n      }, {\n        key: 'Viewer',\n        value: 'Viewer',\n        text: 'Viewer'\n      }]\n    };\n    _self = _assertThisInitialized(_this);\n    return _this;\n  }\n\n  _createClass(RegistNewItem, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// developer(Organization)\n      //service.getMCService('showOrg',{token:store.userToken}, _self.receiveDev)\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      if (nextProps.open) {\n        this.setState({\n          open: nextProps.open,\n          dimmer: nextProps.dimmer\n        });\n      }\n\n      if (nextProps.submitData.registNewInput) {\n        var cnArr = [];\n        var locObj = null;\n        var operValue = nextProps.submitData.registNewInput.values ? nextProps.submitData.registNewInput.values.Operator : null;\n\n        if (operValue) {\n          this.state.operList.map(function (item, i) {\n            if (item.Operator == operValue) {\n              cnArr.push(item.CloudletName);\n            }\n          });\n          this.setState({\n            cloudletList: cnArr.map(function (item, i) {\n              return {\n                key: i,\n                value: item,\n                text: item\n              };\n            })\n          });\n        }\n\n        var cloudletValue = nextProps.submitData.registNewInput.values ? nextProps.submitData.registNewInput.values.Cloudlet : null;\n\n        if (cloudletValue) {\n          this.state.operList.map(function (item, i) {\n            if (item.CloudletName == cloudletValue) {\n              locObj = item.CloudletLocation;\n            }\n          });\n          this.setState({\n            locationLong: locObj.longitude,\n            locationLat: locObj.latitude,\n            locationLongLat: [Number(locObj.longitude), Number(locObj.latitude)]\n          });\n        }\n      }\n\n      if (nextProps.data) {\n        var groupByOper = aggregate.groupBy(nextProps.data, 'CloudletName');\n        this.setCloudletList(Object.keys(groupByOper));\n      }\n\n      if (this.state.open && !this.state.toggle) {\n        var long = nextProps.locLong.loc ? nextProps.locLong.loc.props.placeholder : null;\n        var lat = nextProps.locLat.loc ? nextProps.locLat.loc.props.placeholder : null;\n\n        if (long && lat) {\n          this.locationValue(long, lat);\n        }\n\n        this.setState({\n          toggle: true\n        });\n      }\n    }\n  }, {\n    key: \"receiveOper\",\n    //Show Option Operator(19.04.25)\n    value: function receiveOper(result) {\n      var operArr = [];\n      var CloudArr = [];\n      result.map(function (item, i) {\n        operArr.push(item.Operator);\n      });\n\n      _self.setState({\n        devOptionsOperator: _toConsumableArray(new Set(operArr)).map(function (item, i) {\n          return {\n            key: i,\n            value: item,\n            text: item\n          };\n        }),\n        operList: result\n      });\n    } //Show Option Organization(19.04.25)\n    // receiveDev(result) {\n    //     _self.setState({devOptionsDeveloper: result.map((item, i) => (\n    //             { key: i, value: item.Organization, text: item.Organization }\n    //         ))})\n    // }\n    //Show Option clusterFlavor(19.04.25)\n\n  }, {\n    key: \"receiveCF\",\n    value: function receiveCF(result) {\n      _self.setState({\n        devOptionsCF: result.map(function (item, i) {\n          return {\n            key: i,\n            value: item.FlavorName,\n            text: item.FlavorName\n          };\n        })\n      });\n    }\n  }, {\n    key: \"receiveCloudlet\",\n    value: function receiveCloudlet(result) {\n      var groupByOper = aggregate.groupBy(result, 'Operator');\n\n      _self.setState({\n        cloudletResult: groupByOper\n      });\n    }\n  }, {\n    key: \"receiveApp\",\n    value: function receiveApp(result) {\n      var groupByOper = aggregate.groupBy(result, 'DeveloperName');\n\n      _self.setState({\n        appResult: groupByOper\n      });\n    }\n  }, {\n    key: \"receiveOrg\",\n    value: function receiveOrg(result) {\n      _self.setState({\n        devOptionsDeveloper: result.map(function (item, i) {\n          return {\n            key: i,\n            value: item.Organization,\n            text: item.Organization\n          };\n        })\n      });\n    }\n  }, {\n    key: \"receiveSubmit\",\n    value: function receiveSubmit(result) {// if(result.data.error) {\n      //     // _self.props.handleCreatingSpinner(false);\n      //     Alert.error(result.data.error, {\n      //         position: 'top-right',\n      //         effect: 'slide',\n      //         onShow: function () {\n      //             console.log('error!')\n      //         },\n      //         beep: true,\n      //         timeout: 5000,\n      //         offset: 100\n      //     });\n      //     return;\n      // }\n      //_self.props.handleLoadingSpinner(false);\n      //_self.props.refresh()\n      //데모용 잠시 막아놓음_190513\n      // if(result.data.error) {\n      //     Alert.error(result.data.error, {\n      //         position: 'top-right',\n      //         effect: 'slide',\n      //         onShow: function () {\n      //             console.log('error!')\n      //         },\n      //         beep: true,\n      //         timeout: 5000,\n      //         offset: 100\n      //     });\n      //     return;\n      // } else {\n      //     Alert.success('SUCCESS', {\n      //         position: 'top-right',\n      //         effect: 'slide',\n      //         onShow: function () {\n      //             console.log('aye!')\n      //         },\n      //         beep: true,\n      //         timeout: 5000,\n      //         offset: 100\n      //     });\n      // }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          dimmer = _this$props.dimmer,\n          selected = _this$props.selected;\n      var cloudletArr = ['Region', 'CloudletName', 'OperatorName', 'CloudletLocation', 'Ip_support', 'Num_dynamic_ips'];\n      var regKeys = data[0] ? data[0]['Edit'] : this.props.siteId == 'Cloudlet' ? cloudletArr : [];\n      var optionArr = [this.state.devOptionsOperator, this.state.devOptionsDeveloper, this.state.devOptionsCloudlet, this.state.devOptionsFour, this.state.devOptionsSix, this.state.devOptionsFive, this.state.devOptionsOrgType, this.state.devOptionsOrgRole, this.state.devOptionsCF];\n      var valueArr = [this.state.dropdownValueOne, this.state.dropdownValueTwo, this.state.dropdownValueThree, this.state.dropdownValueFour, this.state.dropdownValueSix, this.state.dropdownValueFive, this.state.handleChangeOrgType, this.state.handleChangeOrgRole, this.state.handleChangeCF];\n      var changeArr = [this.handleChangeOne, this.handleChangeTwo, this.handleChangeThree, this.handleChangeFour, this.handleChangeSix, this.handleChangeFive, this.handleChangeOrgType, this.handleChangeOrgRole];\n      return React.createElement(RegistNewInput, {\n        handleSubmit: this.onSubmit,\n        data: data,\n        dimmer: dimmer,\n        selected: selected,\n        regKeys: regKeys,\n        open: this.state.open,\n        close: this.close,\n        option: optionArr,\n        value: valueArr,\n        change: changeArr,\n        longLoc: this.longLocProps,\n        latLoc: this.latLocProps,\n        zoomIn: this.props.zoomIn,\n        zoomOut: this.props.zoomOut,\n        resetMap: this.props.resetMap,\n        locationLongLat: this.state.locationLongLat,\n        resetLocation: this.resetLoc,\n        handleChangeLong: this.handleChangeLong,\n        handleChangeLat: this.handleChangeLat,\n        locationLong: this.state.locationLong,\n        locationLat: this.state.locationLat,\n        cloudArr: this.state.cloudletList,\n        getOptionData: this.getOptionData,\n        validError: this.state.validateError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return RegistNewItem;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var formCloudlet = state.form.registNewInput ? {\n    values: state.form.registNewInput.values\n  } : {};\n  return {\n    locLong: state.mapCoordinatesLong ? state.mapCoordinatesLong : null,\n    locLat: state.mapCoordinatesLat ? state.mapCoordinatesLat : null,\n    submitData: state.form ? state.form : null,\n    computeItem: state.computeItem ? state.computeItem.item : null,\n    selectOrg: state.selectOrg.org ? state.selectOrg.org : null,\n    userRole: state.showUserRole ? state.showUserRole.role : null,\n    cloudletValue: formCloudlet\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleMapLong: function handleMapLong(data) {\n      dispatch(actions.mapCoordinatesLong(data));\n    },\n    handleMapLat: function handleMapLat(data) {\n      dispatch(actions.mapCoordinatesLat(data));\n    },\n    handleLoadingSpinner: function handleLoadingSpinner(data) {\n      dispatch(actions.loadingSpinner(data));\n    },\n    handleAlertInfo: function handleAlertInfo(mode, msg) {\n      dispatch(actions.alertInfo(mode, msg));\n    } // handleCreatingSpinner: (data) => { dispatch(actions.creatingSpinner(data))}\n\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(RegistNewItem));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/registNewItem.js"],"names":["React","Button","Divider","Modal","Grid","Input","TextArea","Dropdown","withRouter","connect","actions","RegistNewInput","Alert","service","aggregate","_self","RegistNewItem","handleChangeOne","e","value","setState","dropdownValueOne","setCloudletList","handleChangeTwo","dropdownValueTwo","setAppList","handleChangeThree","dropdownValueThree","handleChangeFour","dropdownValueFour","handleChangeFive","dropdownValueFive","handleChangeSix","dropdownValueSix","handleChangeOrgType","dropdownValueOrgType","handleChangeOrgRole","dropdownValueOrgRole","handleChangeLong","locationLong","onlyNum","props","handleAlertInfo","target","locationValue","state","locationLat","handleChangeLat","long","lat","locationLongLat","Number","handleChangeLocate","resetLoc","toggle","list","cl","map","item","i","push","key","text","devOptionsCloudlet","setOrgList","devOptionsOperator","devNm","vr","appResult","oper","AppName","Version","devOptionsFour","devOptionsFive","receiveSubmitCloudlet","result","body","refresh","data","error","params","cloudlet","name","handleLoadingSpinner","onSubmit","serviceBody","store","localStorage","PROJECT_INIT","JSON","parse","selectMenu","submitData","registNewInput","values","Cloudlet","Flavor","ClusterName","OrganizationName","Operator","Region","IpAccess","Number_of_Master","Number_of_Node","userToken","createNewClusterInst","receiveSubmit","cloudletValue","CloudletName","OperatorName","Latitude","Longitude","IpSupport","Num_dynamic_ips","length","close","createNewCloudlet","validateError","open","longLocProps","refVal","handleMapLong","latLocProps","handleMapLat","getOptionData","region","getMCService","token","receiveOper","setTimeout","receiveCF","getOrgData","receiveOrg","dummyData","selected","dimmer","operList","cloudletList","devOptionsDeveloper","devOptionsSix","devOptionsCF","cloudletResult","cloudlets","devOptionsOrgType","devOptionsOrgRole","nextProps","nextContext","cnArr","locObj","operValue","CloudletLocation","longitude","latitude","groupByOper","groupBy","Object","keys","locLong","loc","placeholder","locLat","operArr","CloudArr","Set","FlavorName","Organization","cloudletArr","regKeys","siteId","optionArr","valueArr","handleChangeCF","changeArr","zoomIn","zoomOut","resetMap","Component","mapStateToProps","formCloudlet","form","mapCoordinatesLong","mapCoordinatesLat","computeItem","selectOrg","org","userRole","showUserRole","role","mapDispatchProps","dispatch","loadingSpinner","mode","msg","alertInfo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, Divider, Modal, Grid, Input, TextArea, Dropdown} from \"semantic-ui-react\";\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport RegistNewInput from \"./registNewInput\";\n\n//http://react-s-alert.jsdemo.be/\nimport Alert from 'react-s-alert';\n\nimport * as service from \"../services/service_compute_service\";\nimport * as aggregate from \"../utils\";\n\nlet _self = null;\nclass RegistNewItem extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            dummyData:[],\n            selected:{},\n            open:false,\n            dimmer:'',\n            locationLong:null,\n            locationLat:null,\n            locationLongLat:[],\n            toggle:false,\n            operList:[],\n            cloudletList:[],\n            devOptionsOperator:[],\n            devOptionsDeveloper:[],\n            devOptionsCloudlet:[],\n            devOptionsFour:[],\n            devOptionsFive:[],\n            devOptionsSix:[],\n            devOptionsCF:[],\n            dropdownValueOne:'',\n            dropdownValueTwo:'',\n            dropdownValueThree:'',\n            dropdownValueFour:'',\n            dropdownValueFive:'',\n            dropdownValueSix:'',\n            dropdownValueOrgType:'',\n            dropdownValueOrgRole:'',\n            cloudletResult:null,\n            cloudlets:null,\n            appResult:null,\n            validateError:[],\n            devOptionsOrgType:[\n                {\n                    key:'Developer',\n                    value:'Developer',\n                    text:'Developer',\n                },\n                {\n                    key:'Operator',\n                    value:'Operator',\n                    text:'Operator',\n                }\n            ],\n            devOptionsOrgRole:[\n                {\n                    key:'Manager',\n                    value:'Manager',\n                    text:'Manager',\n                },\n                {\n                    key:'Contributor',\n                    value:'Contributor',\n                    text:'Contributor',\n                },\n                {\n                    key:'Viewer',\n                    value:'Viewer',\n                    text:'Viewer',\n                },\n            ],\n        }\n        \n        _self = this;\n    }\n\n    componentDidMount() {\n        \n\n        // developer(Organization)\n        //service.getMCService('showOrg',{token:store.userToken}, _self.receiveDev)\n        \n    }\n    componentDidUpdate(){\n        \n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.open) {\n            this.setState({open:nextProps.open, dimmer:nextProps.dimmer});\n        }\n        \n        if(nextProps.submitData.registNewInput) {\n            \n            let cnArr = [];\n            let locObj = null;\n            const operValue = (nextProps.submitData.registNewInput.values)?nextProps.submitData.registNewInput.values.Operator:null;\n            if(operValue) {\n                this.state.operList.map((item,i) => {\n                    if(item.Operator == operValue) {\n                        cnArr.push(item.CloudletName);\n                    }\n                })\n\n                this.setState({cloudletList: cnArr.map((item, i) => (\n                    { key: i, value: item, text: item }\n                ))})\n            }\n            const cloudletValue = (nextProps.submitData.registNewInput.values)?nextProps.submitData.registNewInput.values.Cloudlet:null;\n            if(cloudletValue) {\n                this.state.operList.map((item,i) => {\n                    if(item.CloudletName == cloudletValue) {\n                        locObj = item.CloudletLocation;\n                    }\n                })\n                this.setState({locationLong:locObj.longitude,locationLat:locObj.latitude,locationLongLat:[Number(locObj.longitude),Number(locObj.latitude)]});\n            }\n        }\n        if(nextProps.data) {\n            let groupByOper = aggregate.groupBy(nextProps.data, 'CloudletName')\n            this.setCloudletList(Object.keys(groupByOper))\n        }\n        if(this.state.open && !this.state.toggle){\n            let long = (nextProps.locLong.loc) ? nextProps.locLong.loc.props.placeholder : null;\n            let lat = (nextProps.locLat.loc) ? nextProps.locLat.loc.props.placeholder : null;\n            if(long && lat) {\n                this.locationValue(long,lat)\n            }\n            this.setState({toggle:true});\n        }\n    }\n    handleChangeOne = (e, {value}) => {\n        this.setState({ dropdownValueOne: value })\n        //reset list of sub dropwDown\n        this.setCloudletList(value)\n    }\n    handleChangeTwo = (e, {value}) => {\n        this.setState({ dropdownValueTwo: value })\n        this.setAppList(value)\n    }\n    handleChangeThree = (e, {value}) => {\n        this.setState({ dropdownValueThree: value })\n    }\n    handleChangeFour = (e, {value}) => {\n        this.setState({ dropdownValueFour: value })\n    }\n    handleChangeFive = (e, {value}) => {\n        this.setState({ dropdownValueFive: value })\n    }\n    handleChangeSix = (e, {value}) => {\n        this.setState({ dropdownValueSix: value })\n    }\n    handleChangeOrgType = (e, {value}) => {\n        this.setState({ dropdownValueOrgType: value })\n    }\n    handleChangeOrgRole = (e, {value}) => {\n        this.setState({ dropdownValueOrgRole: value })\n    }\n    handleChangeLong = (e, {value}) => {\n        if(value == '-') {\n            this.setState({ locationLong: value })\n            return\n        }\n        let onlyNum = value;\n        if(onlyNum > 180 || onlyNum < -180) {\n            this.props.handleAlertInfo('error',\"-180 ~ 180\")\n            e.target.value=null;\n            return\n        }\n        this.setState({ locationLong: onlyNum })\n        this.locationValue(onlyNum,this.state.locationLat)\n    }\n    handleChangeLat = (e, {value}) => {\n        if(value == '-') {\n            this.setState({ locationLat: value })\n            return\n        }\n        let onlyNum = value;\n        if(onlyNum > 90 || onlyNum < -90) {\n            this.props.handleAlertInfo('error',\"-90 ~ 90\")\n            e.target.value=null;\n            return\n        }\n        this.setState({ locationLat: onlyNum })\n        this.locationValue(this.state.locationLong,onlyNum)\n    }\n    locationValue = (long,lat) => {\n        if(long && lat){\n            this.setState({ locationLongLat: [Number(long),Number(lat)] })\n        } else {\n            this.setState({ locationLongLat: null })\n        }\n        //this.setState({ locationLongLat: [Number(long),Number(lat)] })\n    }\n\n    handleChangeLocate = (e, {value}) => {\n\n    }\n    resetLoc = () => {\n        this.setState({ locationLat: null,locationLong:null,toggle:false })\n    }\n    /*\n    setCloudletList = (operNm) => {\n        let cl = [];\n        if(!_self.state.cloudletResult) return;\n        _self.state.cloudletResult[operNm].map((oper, i) => {\n            if(i === 0) _self.setState({dropdownValueThree: oper.CloudletName})\n            cl.push({ key: i, value: oper.CloudletName, text: oper.CloudletName })\n        })\n\n        _self.setState({devOptionsCloudlet: cl})\n    }\n    */\n    setCloudletList = (list) => {\n        let cl = [];\n\n        list.map((item, i) => {\n            if(i === 0) _self.setState({dropdownValueThree: item})\n            cl.push({ key: i, value: item, text: item })\n        })\n\n        _self.setState({devOptionsCloudlet: cl})\n    }\n    setOrgList = (list) => {\n        let cl = [];\n\n        list.map((item, i) => {\n            if(i === 0) _self.setState({dropdownValueOne: item})\n            cl.push({ key: i, value: item, text: item })\n        })\n\n        _self.setState({devOptionsOperator: cl})\n    }\n    setAppList = (devNm) => {\n        let cl = [];\n        let vr = [];\n        _self.state.appResult[devNm].map((oper, i) => {\n            if(i === 0) _self.setState({dropdownValueFour: oper.AppName})\n            cl.push({ key: i, value: oper.AppName, text: oper.AppName })\n            vr.push({ key: i, value: oper.Version, text: oper.Version })\n\n        })\n\n        _self.setState({devOptionsFour: cl, devOptionsFive: vr})\n    }\n    //Show Option Operator(19.04.25)\n    receiveOper(result) {\n        let operArr = [];\n        let CloudArr = [];\n        result.map((item,i) => {\n            operArr.push(item.Operator)\n        })\n        _self.setState({devOptionsOperator: [...new Set(operArr)].map((item, i) => (\n            { key: i, value: item, text: item }\n        )),operList:result})\n        \n    }\n    //Show Option Organization(19.04.25)\n    // receiveDev(result) {\n    //     _self.setState({devOptionsDeveloper: result.map((item, i) => (\n//             { key: i, value: item.Organization, text: item.Organization }\n//         ))})\n    // }\n\n    //Show Option clusterFlavor(19.04.25)\n    receiveCF(result) {\n        _self.setState({devOptionsCF: result.map((item, i) => (\n            { key: i, value: item.FlavorName, text: item.FlavorName }\n        ))})\n    }\n\n    receiveCloudlet(result) {\n        let groupByOper = aggregate.groupBy(result, 'Operator')\n        _self.setState({cloudletResult:groupByOper})\n    }\n    receiveApp(result) {\n        let groupByOper = aggregate.groupBy(result, 'DeveloperName')\n        _self.setState({appResult:groupByOper})\n    }\n    receiveOrg(result) {\n        _self.setState({devOptionsDeveloper: result.map((item, i) => (\n            { key: i, value: item.Organization, text: item.Organization }\n        ))})\n    }\n    receiveSubmit(result) {\n        // if(result.data.error) {\n        //     // _self.props.handleCreatingSpinner(false);\n        //     Alert.error(result.data.error, {\n        //         position: 'top-right',\n        //         effect: 'slide',\n        //         onShow: function () {\n        //             console.log('error!')\n        //         },\n        //         beep: true,\n        //         timeout: 5000,\n        //         offset: 100\n        //     });\n        //     return;\n        // }\n        //_self.props.handleLoadingSpinner(false);\n        //_self.props.refresh()\n        //데모용 잠시 막아놓음_190513\n        // if(result.data.error) {\n        //     Alert.error(result.data.error, {\n        //         position: 'top-right',\n        //         effect: 'slide',\n        //         onShow: function () {\n        //             console.log('error!')\n        //         },\n        //         beep: true,\n        //         timeout: 5000,\n        //         offset: 100\n        //     });\n        //     return;\n        // } else {\n        //     Alert.success('SUCCESS', {\n        //         position: 'top-right',\n        //         effect: 'slide',\n        //         onShow: function () {\n        //             console.log('aye!')\n        //         },\n        //         beep: true,\n        //         timeout: 5000,\n        //         offset: 100\n        //     });\n        // }\n    }\n\n    receiveSubmitCloudlet = (result, body) => {\n        this.props.refresh('All')\n        if(result.data.error) {\n            this.props.handleAlertInfo('error',result.data.error)\n            return;\n        } else {\n            this.props.handleAlertInfo('success','Cloudlet '+body.params.cloudlet.key.name+' created successfully')\n        }\n        this.props.handleLoadingSpinner(false);\n    }\n\n    onSubmit = () => {\n        let serviceBody = {}\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        //this.props.handleLoadingSpinner(true);\n        // setTimeout(() => {\n        //     this.props.handleLoadingSpinner(false);\n        // },3000);\n        //TODO: 20190410 메뉴 별 구분 필요\n        if(localStorage.selectMenu === 'Cluster Instances'){\n            const {Cloudlet, Flavor, ClusterName, OrganizationName, Operator, Region, IpAccess, Number_of_Master, Number_of_Node} = this.props.submitData.registNewInput.values\n            // this.props.handleCreatingSpinner(true);\n            serviceBody = {\n                \"token\":store ? store.userToken : 'null',\n                \"params\": {\n                    \"region\":Region,\n                    \"clusterinst\":{\n                        \"key\":{\n                            \"cluster_key\":{\"name\":ClusterName},\n                            \"cloudlet_key\":{\"operator_key\":{\"name\":Operator},\"name\":Cloudlet},\n                            \"developer\":OrganizationName\n                        },\n                        \"flavor\":{\"name\":Flavor},\n                        \"ip_access\":Number(IpAccess),\n                        \"num_masters\":Number(Number_of_Master),\n                        \"num_nodes\":Number(Number_of_Node)\n                    }\n                }\n            }\n            //this.props.handleLoadingSpinner(true);\n            service.createNewClusterInst('CreateClusterInst', serviceBody, this.receiveSubmit)\n        } else if(localStorage.selectMenu === 'Cloudlets') {\n            const cloudlet = ['Region','CloudletName','OperatorName','Latitude','Longitude','Num_dynamic_ips']\n            let error = [];\n            cloudlet.map((item) => {\n                if(!this.props.cloudletValue.values[item]) {\n                    error.push(item)\n                }\n            })\n\n            const {CloudletName, OperatorName, Latitude, Longitude, IpSupport, Num_dynamic_ips, Region} = this.props.submitData.registNewInput.values\n            \n            serviceBody = {\n                \"token\":store ? store.userToken : 'null',\n                \"params\": {\n                    \"region\":Region,\n                    \"cloudlet\":{\n                        \"key\":{\n                            \"operator_key\":{\"name\":OperatorName},\n                            \"name\":CloudletName\n                        },\n                        \"location\":{\n                            \"latitude\":Number(Latitude),\n                            \"longitude\":Number(Longitude),\n                            \"timestamp\":{}\n                        },\n                        \"ip_support\":IpSupport,\n                        \"num_dynamic_ips\":Number(Num_dynamic_ips)\n                    }\n                }\n            }\n            if(error.length == 0) {\n                this.close();\n                this.props.handleLoadingSpinner(true);\n                service.createNewCloudlet('CreateCloudlet', serviceBody, this.receiveSubmitCloudlet)\n            }\n            this.setState({validateError:error})\n\n        }\n        //close\n        //this.close();\n        \n    }\n    close = () => {\n        this.setState({ open: false, validateError:[] })\n        this.props.close()\n    }\n\n    longLocProps = (refVal) => {\n        if(refVal) this.props.handleMapLong(refVal);\n    }\n    latLocProps = (refVal) => {\n        if(refVal) this.props.handleMapLat(refVal);\n    }\n    getOptionData = (region) => {\n        if(localStorage.selectMenu == \"Cluster Instances\") {\n            let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n            // operator, cloudlet\n            service.getMCService('ShowCloudlet',{token:store ? store.userToken : 'null',region:region}, _self.receiveOper)\n            // Flavor\n            setTimeout(() => service.getMCService('ShowFlavor',{token:store.userToken,region:region}, _self.receiveCF), 500);\n        }\n    }\n\n    getOrgData = () => {\n            let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n            // Organization\n            service.getMCService('showOrg',{token:store ? store.userToken : 'null'}, this.receiveOrg)\n        \n    }\n    \n\n    render() {\n        let {data, dimmer, selected} = this.props;\n        const cloudletArr = ['Region','CloudletName','OperatorName','CloudletLocation','Ip_support','Num_dynamic_ips'];\n        let regKeys = (data[0])?data[0]['Edit']:(this.props.siteId=='Cloudlet')?cloudletArr:[];\n        let optionArr = [this.state.devOptionsOperator, this.state.devOptionsDeveloper, this.state.devOptionsCloudlet, this.state.devOptionsFour, this.state.devOptionsSix, this.state.devOptionsFive, this.state.devOptionsOrgType, this.state.devOptionsOrgRole, this.state.devOptionsCF]\n        let valueArr = [this.state.dropdownValueOne, this.state.dropdownValueTwo, this.state.dropdownValueThree, this.state.dropdownValueFour, this.state.dropdownValueSix, this.state.dropdownValueFive, this.state.handleChangeOrgType, this.state.handleChangeOrgRole, this.state.handleChangeCF]\n        let changeArr = [this.handleChangeOne, this.handleChangeTwo, this.handleChangeThree, this.handleChangeFour, this.handleChangeSix, this.handleChangeFive, this.handleChangeOrgType, this.handleChangeOrgRole]\n        return (\n            <RegistNewInput\n                handleSubmit={this.onSubmit}\n                data={data}\n                dimmer={dimmer}\n                selected={selected}\n                regKeys={regKeys}\n                open={this.state.open}\n                close={this.close}\n                option={optionArr}\n                value={valueArr}\n                change={changeArr}\n                longLoc={this.longLocProps}\n                latLoc={this.latLocProps}\n                zoomIn={this.props.zoomIn}\n                zoomOut={this.props.zoomOut}\n                resetMap={this.props.resetMap}\n                locationLongLat={this.state.locationLongLat}\n                resetLocation={this.resetLoc}\n                handleChangeLong={this.handleChangeLong}\n                handleChangeLat={this.handleChangeLat}\n                locationLong={this.state.locationLong}\n                locationLat={this.state.locationLat}\n                cloudArr={this.state.cloudletList}\n                getOptionData={this.getOptionData}\n                validError={this.state.validateError}\n            >\n            </RegistNewInput>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    let formCloudlet= state.form.registNewInput\n    ? {\n        values: state.form.registNewInput.values\n    }\n    : {};\n    return {\n        locLong : state.mapCoordinatesLong?state.mapCoordinatesLong:null,\n        locLat : state.mapCoordinatesLat?state.mapCoordinatesLat:null,\n        submitData : state.form?state.form : null,\n        computeItem : state.computeItem?state.computeItem.item:null,\n        selectOrg : state.selectOrg.org?state.selectOrg.org:null,\n        userRole : state.showUserRole?state.showUserRole.role:null,\n        cloudletValue:formCloudlet\n    }\n};\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleMapLong: (data) => { dispatch(actions.mapCoordinatesLong(data))},\n        handleMapLat: (data) => { dispatch(actions.mapCoordinatesLat(data))},\n        handleLoadingSpinner: (data) => { dispatch(actions.loadingSpinner(data))},\n        handleAlertInfo: (mode,msg) => { dispatch(actions.alertInfo(mode,msg))},\n\n        // handleCreatingSpinner: (data) => { dispatch(actions.creatingSpinner(data))}\n    };\n};\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(RegistNewItem));\n\n"]},"metadata":{},"sourceType":"module"}