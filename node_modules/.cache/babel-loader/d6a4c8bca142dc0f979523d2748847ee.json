{"ast":null,"code":"var _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/components/horizontal_timeline_kj/Components/EventLine.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Motion, spring } from 'react-motion';\n/**\n * The markup Information for an event Line. You can stack multiple lines on top of eachother\n *\n * @param  {object} props The props from parent, styling and positioning\n * @return {StatelessFunctionalReactComponent} Markup Information for the event line.\n */\n\nvar EventLine = function EventLine(_ref) {\n  var left = _ref.left,\n      width = _ref.width,\n      fillingMotion = _ref.fillingMotion,\n      backgroundColor = _ref.backgroundColor;\n  return React.createElement(Motion, {\n    style: {\n      tWidth: spring(width, fillingMotion),\n      tLeft: spring(left, fillingMotion)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, function (_ref2) {\n    var tWidth = _ref2.tWidth,\n        tLeft = _ref2.tLeft;\n    return React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: \"timeline-eventline\",\n      style: {\n        position: 'absolute',\n        left: \"\".concat(tLeft, \"px\"),\n        top: 0,\n        height: '100%',\n        width: \"\".concat(tWidth, \"px\"),\n        transformOrigin: 'left center',\n        backgroundColor: backgroundColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  });\n};\n\nEventLine.propTypes = {\n  // Location and dimension\n  left: PropTypes.number,\n  width: PropTypes.number,\n  // how the filling motion will look like when in action\n  fillingMotion: PropTypes.shape({\n    stiffness: PropTypes.number,\n    damping: PropTypes.number\n  }),\n  // What color the line should have\n  backgroundColor: PropTypes.string\n};\nexport default EventLine;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/components/horizontal_timeline_kj/Components/EventLine.jsx"],"names":["React","PropTypes","Motion","spring","EventLine","left","width","fillingMotion","backgroundColor","tWidth","tLeft","position","top","height","transformOrigin","propTypes","number","shape","stiffness","damping","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,MAAR,EAAgBC,MAAhB,QAA6B,cAA7B;AAGA;;;;;;;AAMA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,MAAQC,KAAR,QAAQA,KAAR;AAAA,MAAeC,aAAf,QAAeA,aAAf;AAAA,MAA8BC,eAA9B,QAA8BA,eAA9B;AAAA,SACd,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE;AACXC,MAAAA,MAAM,EAAEN,MAAM,CAACG,KAAD,EAAQC,aAAR,CADH;AAEXG,MAAAA,KAAK,EAAEP,MAAM,CAACE,IAAD,EAAOE,aAAP;AAFF,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI;AAAA,QAAEE,MAAF,SAAEA,MAAF;AAAA,QAAUC,KAAV,SAAUA,KAAV;AAAA,WACA;AACI,qBAAY,MADhB;AAEI,MAAA,SAAS,EAAC,oBAFd;AAGI,MAAA,KAAK,EAAE;AACHC,QAAAA,QAAQ,EAAE,UADP;AAEHN,QAAAA,IAAI,YAAKK,KAAL,OAFD;AAGHE,QAAAA,GAAG,EAAE,CAHF;AAIHC,QAAAA,MAAM,EAAE,MAJL;AAKHP,QAAAA,KAAK,YAAKG,MAAL,OALF;AAMHK,QAAAA,eAAe,EAAE,aANd;AAOHN,QAAAA,eAAe,EAAfA;AAPG,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA;AAAA,GAHJ,CADc;AAAA,CAAlB;;AAsBAJ,SAAS,CAACW,SAAV,GAAsB;AAClB;AACAV,EAAAA,IAAI,EAAEJ,SAAS,CAACe,MAFE;AAGlBV,EAAAA,KAAK,EAAEL,SAAS,CAACe,MAHC;AAIlB;AACAT,EAAAA,aAAa,EAAEN,SAAS,CAACgB,KAAV,CAAgB;AAC3BC,IAAAA,SAAS,EAAEjB,SAAS,CAACe,MADM;AAE3BG,IAAAA,OAAO,EAAElB,SAAS,CAACe;AAFQ,GAAhB,CALG;AASlB;AACAR,EAAAA,eAAe,EAAEP,SAAS,CAACmB;AAVT,CAAtB;AAcA,eAAehB,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Motion, spring} from 'react-motion';\n\n\n/**\n * The markup Information for an event Line. You can stack multiple lines on top of eachother\n *\n * @param  {object} props The props from parent, styling and positioning\n * @return {StatelessFunctionalReactComponent} Markup Information for the event line.\n */\nconst EventLine = ({left, width, fillingMotion, backgroundColor}) => (\n    <Motion style={{\n        tWidth: spring(width, fillingMotion),\n        tLeft: spring(left, fillingMotion),\n    }}>{({tWidth, tLeft}) =>\n        <span\n            aria-hidden='true'\n            className='timeline-eventline'\n            style={{\n                position: 'absolute',\n                left: `${tLeft}px`,\n                top: 0,\n                height: '100%',\n                width: `${tWidth}px`,\n                transformOrigin: 'left center',\n                backgroundColor\n            }}\n        />\n    }</Motion>\n);\n\n\nEventLine.propTypes = {\n    // Location and dimension\n    left: PropTypes.number,\n    width: PropTypes.number,\n    // how the filling motion will look like when in action\n    fillingMotion: PropTypes.shape({\n        stiffness: PropTypes.number,\n        damping: PropTypes.number,\n    }),\n    // What color the line should have\n    backgroundColor: PropTypes.string,\n}\n\n\nexport default EventLine;\n"]},"metadata":{},"sourceType":"module"}