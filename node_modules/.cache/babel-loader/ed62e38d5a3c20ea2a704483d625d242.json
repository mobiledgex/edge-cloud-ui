{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/components/networkTcpUdpComposeView.js\";\nimport React from 'react';\nimport { Grid, Dropdown } from 'semantic-ui-react';\nimport NetworkInoutLegend from './network/networkInoutLegend';\nimport TimeSeries from '../charts/plotly/timeseries';\nimport sizeMe from 'react-sizeme';\nimport SelectRangeTcpudp from '../components/selectRangeTcpudp';\nimport NetworkInOutSimple from \"../container/developerSideInfo\";\nimport { connect } from \"react-redux\";\nimport * as utils from '../utils';\nimport * as serviceCluster from \"../services/service_instance_service\";\nvar customMargin = {\n  l: 50,\n  r: 15,\n  b: 35,\n  t: 5,\n  pad: 0\n};\nvar data = [{\n  x: ['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'],\n  y: [1, 3, 6],\n  type: 'scatter'\n}];\nvar _self = null;\n\nvar NetworkTcpUdpComposeView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NetworkTcpUdpComposeView, _React$Component);\n\n  function NetworkTcpUdpComposeView() {\n    var _this;\n\n    _classCallCheck(this, NetworkTcpUdpComposeView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NetworkTcpUdpComposeView).call(this));\n    _self = _assertThisInitialized(_this);\n    _this.state = {\n      optionOne: [{\n        key: 'ca',\n        value: 'ca',\n        text: 'Cluster-A'\n      }, {\n        key: 'cb',\n        value: 'cb',\n        text: 'Cluster-B'\n      }, {\n        key: 'cc',\n        value: 'cc',\n        text: 'Cluster-C'\n      }],\n      optionTwo: [{\n        key: 'g1',\n        value: '',\n        text: 'neon2'\n      }],\n      optionThree: [{\n        key: 'd1',\n        value: 'd1',\n        text: 'CPU/MEM'\n      }, {\n        key: 'd2',\n        value: 'd2',\n        text: 'NetworkIO'\n      }],\n      optionFour: [{\n        key: 't1',\n        value: 't1',\n        text: 'Last Hour'\n      }, {\n        key: 't2',\n        value: 't2',\n        text: 'Last 3 Hours'\n      }, {\n        key: 't3',\n        value: 't3',\n        text: 'Last 6 Hours'\n      }, {\n        key: 't4',\n        value: 't4',\n        text: 'Last 12 Hours'\n      }, {\n        key: 't5',\n        value: 't5',\n        text: 'Last 24 Hours'\n      }],\n      timeseriesData: [[0, 1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]],\n      timeseriesSeries: [[\"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]],\n      dataLabel: ['TCP conns', 'TCP retransmit'],\n      timeseriesDataNET: [[0, 1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]],\n      timeseriesNET: [[\"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]],\n      dataLabelNet: ['UDP send', 'UDP receive error', 'UDP receive'],\n      avgCpu: 0.00,\n      avgMem: 0.00,\n      avgNetIn: 0.00,\n      avgNetOut: 0.00,\n      applications: [],\n      dropdownValueOne: 'tdg-barcelona-niantic',\n      dropdownValueTwo: null\n    };\n    _this.selectedCloudlet = 'barcelona-mexdemo';\n    _this.selectedCluster = 'tdg-barcelona-niantic';\n    _this.selectedApp = '';\n    _this.selectedStatic = '';\n    _this.selectedPeriod = '';\n    _this.interval = null;\n    _this.intervalTime = null;\n    return _this;\n  }\n\n  _createClass(NetworkTcpUdpComposeView, [{\n    key: \"handleChange\",\n    value: function handleChange(obj) {\n      console.log('**************************');\n      console.log('obj. ', obj.id, obj.key, obj.value, obj.key.indexOf('0'));\n      console.log('**************************');\n\n      if (obj.key.indexOf('0') > -1) {\n        _self.selectedCluster = obj.value;\n\n        _self.setState({\n          dropdownValueOne: obj.value\n        });\n      }\n    }\n  }, {\n    key: \"receiveAppCluster\",\n    value: function receiveAppCluster(result, self) {\n      var tDatas = [[], []];\n      var uDatas = [[], [], []];\n      var series = [];\n      var netName = self.state.netName;\n\n      if (result.results) {\n        result.results.map(function (clstData, i) {\n          //console.log('clstdata..', clstData)\n          clstData.series.map(function (data) {\n            //console.log('data..', data)\n            try {\n              data.values.map(function (values) {\n                //console.log('value..', values)\n                if (netName === 'TCP') {\n                  tDatas.map(function (d, j) {\n                    tDatas[j].push(values[7 + j]);\n                    if (j === 0) series.push(values[0]);\n                  });\n                } else {\n                  uDatas.map(function (d, j) {\n                    uDatas[j].push(values[9 + j]);\n                    if (j === 0) series.push(values[0]);\n                  });\n                }\n              });\n            } catch (e) {\n              console.log('error ----- database not found: clusterstats');\n            }\n          });\n        });\n      }\n\n      var sData = netName === 'TCP' || netName === 'tcp' ? tDatas : uDatas; //console.log('t data..',netName, 'data===', sData, series)\n\n      self.setState({\n        timeseriesData: sData,\n        timeseriesSeries: [series],\n        netName: self.state.netName\n      });\n    }\n  }, {\n    key: \"getStatisticsData\",\n    value: function getStatisticsData(self, props) {\n      // 클러스터 이름으로 해당 앱의 리소스 정보 - 3Pg 우측상단 Application Statistics\n      //if_self.selectedApp !== '') serviceCluster.getAppClusterInfo(this.selectedCluster,this.selectedApp, this.receiveAppCluster);\n      if (self.state.dropdownValueTwo !== '') serviceCluster.getTcpUdpClusterInfo(self.selectedCluster, self.state.dropdownValueTwo, self.receiveAppCluster, self);\n    }\n  }, {\n    key: \"setDropdownApp\",\n    value: function setDropdownApp(_applications, _self) {\n      // 클러스터 / 어플리케이션\n      var _optionTwo = [];\n\n      if (_applications) {\n        _applications.map(function (cld, i) {\n          if (cld.cloudlet === _self.selectedCloudlet) {\n            cld.clusters.map(function (clst, j) {\n              if (clst.cluster === _self.selectedCluster) {\n                clst.shortApps.map(function (app, i) {\n                  var itemOne = {\n                    key: '',\n                    value: '',\n                    text: ''\n                  };\n                  itemOne.key = app;\n                  itemOne.value = clst.apps[i];\n                  itemOne.text = app;\n\n                  _optionTwo.push(itemOne);\n                });\n              }\n            });\n          }\n        });\n\n        _self.setState({\n          optionTwo: _optionTwo\n        });\n\n        _self.selectedApp = _optionTwo[0].value;\n        setTimeout(function () {\n          return _self.setState({\n            dropdownValueTwo: _optionTwo[0].value\n          });\n        }, 3000);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      this.neterval = setInterval(function () {\n        //console.log('re start ==>==>==>', _self.selectedCluster)\n        if (self.state.dropdownValueTwo) self.getStatisticsData(self, self.props);\n      }, 3000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n      clearInterval(this.neterval);\n      clearTimeout(this.intervalTime);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this2 = this;\n\n      if (nextProps.selectedCluster) {\n        this.setState({\n          selectedCluster: nextProps.selectedCluster\n        });\n      } //\n\n\n      var _optionOne = []; // 클러스터 리스트\n\n      if (nextProps.applications) {\n        nextProps.applications.map(function (cld, i) {\n          if (cld.cloudlet === _this2.selectedCloudlet) {\n            cld.clusters.map(function (clst, j) {\n              var itemOne = {\n                key: '',\n                value: '',\n                text: ''\n              };\n              itemOne.key = clst.cluster;\n              itemOne.value = clst.cluster;\n              itemOne.text = clst.cluster;\n\n              _optionOne.push(itemOne); //this.selectedApp = clst.apps[0];\n\n            }); //this.selectedCluster = cld.clusters[0].cluster; // default cluster\n            //this.setState({dropdownValueOne:cld.clusters[0].cluster})\n          }\n        });\n        this.setState({\n          optionOne: _optionOne\n        });\n        this.setState({\n          applications: nextProps.applications,\n          netName: nextProps.netName\n        });\n      } //console.log('===>>>>>>next props cluster app data ..', nextProps.tcpudpClusterData, nextProps.activeIndex, nextProps.netName)\n      //TODO:\n\n\n      this.setDropdownApp(nextProps.applications, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$size = this.props.size,\n          width = _this$props$size.width,\n          height = _this$props$size.height;\n      return React.createElement(Grid, {\n        divided: \"vertically\",\n        className: \"panel_contents\",\n        style: {\n          width: width,\n          height: '94%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(SelectRangeTcpudp, {\n        sid: \"rangeOne\",\n        optionOne: this.state.optionOne,\n        optionTwo: this.state.optionTwo,\n        optionThree: this.state.optionThree,\n        optionFour: this.state.optionFour,\n        handleChange: this.handleChange,\n        dropdownValueOne: this.state.dropdownValueOne,\n        dropdownValueTwo: this.state.dropdownValueTwo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(Grid.Row, {\n        className: \"panel_charts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(TimeSeries, {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        chartData: this.state.timeseriesData,\n        series: this.state.timeseriesSeries,\n        margin: customMargin,\n        marginRight: 15,\n        label: this.state.netName === 'TCP' ? this.state.dataLabel : this.state.dataLabelNet,\n        error: this.state.netName === 'TCP' ? false : true,\n        showLegend: true,\n        y3Position: 0.85,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return NetworkTcpUdpComposeView;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log('state.receiveDataReduce.data-->', state);\n  return state.receiveDataReduce && state.receiveDataReduce.data ? {\n    tcpudpClusterData: state.receiveDataReduce.data.tcpudpClusterData\n  } : null;\n};\n\nexport default connect(mapStateToProps, null)(sizeMe({\n  monitorHeight: true\n})(NetworkTcpUdpComposeView));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/components/networkTcpUdpComposeView.js"],"names":["React","Grid","Dropdown","NetworkInoutLegend","TimeSeries","sizeMe","SelectRangeTcpudp","NetworkInOutSimple","connect","utils","serviceCluster","customMargin","l","r","b","t","pad","data","x","y","type","_self","NetworkTcpUdpComposeView","state","optionOne","key","value","text","optionTwo","optionThree","optionFour","timeseriesData","timeseriesSeries","dataLabel","timeseriesDataNET","timeseriesNET","dataLabelNet","avgCpu","avgMem","avgNetIn","avgNetOut","applications","dropdownValueOne","dropdownValueTwo","selectedCloudlet","selectedCluster","selectedApp","selectedStatic","selectedPeriod","interval","intervalTime","obj","console","log","id","indexOf","setState","result","self","tDatas","uDatas","series","netName","results","map","clstData","i","values","d","j","push","e","sData","props","getTcpUdpClusterInfo","receiveAppCluster","_applications","_optionTwo","cld","cloudlet","clusters","clst","cluster","shortApps","app","itemOne","apps","setTimeout","neterval","setInterval","getStatisticsData","clearInterval","clearTimeout","nextProps","nextContext","_optionOne","setDropdownApp","size","width","height","handleChange","Component","mapStateToProps","receiveDataReduce","tcpudpClusterData","monitorHeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Grid, Dropdown } from 'semantic-ui-react'\nimport NetworkInoutLegend from './network/networkInoutLegend';\nimport TimeSeries from '../charts/plotly/timeseries';\nimport sizeMe from 'react-sizeme'\nimport SelectRangeTcpudp from '../components/selectRangeTcpudp';\nimport NetworkInOutSimple from \"../container/developerSideInfo\";\nimport {connect} from \"react-redux\";\nimport * as utils from '../utils';\nimport * as serviceCluster from \"../services/service_instance_service\";\n\nlet customMargin = {\n    l: 50,\n    r: 15,\n    b: 35,\n    t: 5,\n    pad: 0\n}\nvar data = [\n    {\n        x: ['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'],\n        y: [1, 3, 6],\n        type: 'scatter'\n    }\n];\nlet _self = null;\nclass NetworkTcpUdpComposeView extends React.Component {\n    constructor() {\n        super()\n        _self = this;\n        this.state = {\n            optionOne : [\n                { key: 'ca', value: 'ca', text: 'Cluster-A' },\n                { key: 'cb', value: 'cb', text: 'Cluster-B' },\n                { key: 'cc', value: 'cc', text: 'Cluster-C' },\n                ],\n            optionTwo : [\n                { key: 'g1', value: '', text: 'neon2' },\n                ],\n            optionThree : [\n                { key: 'd1', value: 'd1', text: 'CPU/MEM' },\n                { key: 'd2', value: 'd2', text: 'NetworkIO' }\n                ],\n            optionFour : [\n                { key: 't1', value: 't1', text: 'Last Hour' },\n                { key: 't2', value: 't2', text: 'Last 3 Hours' },\n                { key: 't3', value: 't3', text: 'Last 6 Hours' },\n                { key: 't4', value: 't4', text: 'Last 12 Hours' },\n                { key: 't5', value: 't5', text: 'Last 24 Hours' }\n            ],\n            timeseriesData:[\n                [0,1,2,3,4,5],[2,3,4,5,6,7]\n            ],\n            timeseriesSeries:[\n                [\"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]\n            ],\n            dataLabel:['TCP conns', 'TCP retransmit'],\n            timeseriesDataNET:[\n                [0,1,2,3,4,5],[2,3,4,5,6,7]\n            ],\n            timeseriesNET:[\n                [\"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]\n            ],\n            dataLabelNet:['UDP send','UDP receive error', 'UDP receive'],\n            avgCpu:0.00,\n            avgMem:0.00,\n            avgNetIn:0.00,\n            avgNetOut:0.00,\n            applications:[],\n            dropdownValueOne:'tdg-barcelona-niantic',\n            dropdownValueTwo:null,\n        }\n        this.selectedCloudlet = 'barcelona-mexdemo';\n        this.selectedCluster = 'tdg-barcelona-niantic';\n        this.selectedApp = '';\n        this.selectedStatic = '';\n        this.selectedPeriod = '';\n        this.interval = null;\n        this.intervalTime = null;\n\n    }\n    handleChange(obj) {\n        console.log('**************************')\n        console.log('obj. ', obj.id, obj.key, obj.value, obj.key.indexOf('0'))\n        console.log('**************************')\n        if(obj.key.indexOf('0')>-1){\n            _self.selectedCluster = obj.value;\n            _self.setState({dropdownValueOne:obj.value})\n\n        }\n    }\n\n\n    receiveAppCluster(result, self) {\n\n        let tDatas = [[],[]];\n        let uDatas = [[],[],[]];\n        let series = [];\n        let netName = self.state.netName;\n\n\n        if(result.results) {\n            result.results.map((clstData, i) => {\n                //console.log('clstdata..', clstData)\n                clstData.series.map((data) => {\n                    //console.log('data..', data)\n                    try{\n                        data.values.map((values) => {\n                            //console.log('value..', values)\n                            if(netName === 'TCP') {\n                                tDatas.map((d, j) => {\n                                        tDatas[j].push(values[7+j]);\n                                        if(j === 0) series.push(values[0])\n\n                                })\n                            } else {\n                                uDatas.map((d, j) => {\n\n                                        uDatas[j].push(values[9+j]);\n                                        if(j === 0) series.push(values[0])\n\n                                })\n                            }\n\n\n                        })\n                    }catch(e){\n                        console.log('error ----- database not found: clusterstats')\n                    }\n\n                })\n            })\n        }\n        let sData = (netName ===  'TCP' || netName === 'tcp') ? tDatas : uDatas;\n        //console.log('t data..',netName, 'data===', sData, series)\n        self.setState({timeseriesData:sData,timeseriesSeries:[series], netName:self.state.netName})\n\n    }\n\n    getStatisticsData(self, props) {\n        // 클러스터 이름으로 해당 앱의 리소스 정보 - 3Pg 우측상단 Application Statistics\n        //if_self.selectedApp !== '') serviceCluster.getAppClusterInfo(this.selectedCluster,this.selectedApp, this.receiveAppCluster);\n        if(self.state.dropdownValueTwo !== '') serviceCluster.getTcpUdpClusterInfo(self.selectedCluster,self.state.dropdownValueTwo, self.receiveAppCluster, self);\n    }\n    setDropdownApp(_applications, _self) {\n        // 클러스터 / 어플리케이션\n        let _optionTwo = [];\n        if(_applications) {\n            _applications.map((cld, i) => {\n                if(cld.cloudlet === _self.selectedCloudlet) {\n                    cld.clusters.map((clst, j) => {\n                        if(clst.cluster === _self.selectedCluster) {\n                            clst.shortApps.map((app, i) => {\n                                let itemOne = { key: '', value: '', text: '' };\n                                itemOne.key = app;\n                                itemOne.value = clst.apps[i];\n                                itemOne.text = app;\n                                _optionTwo.push(itemOne);\n                            })\n                        }\n                    })\n                }\n            })\n            _self.setState({optionTwo:_optionTwo})\n            _self.selectedApp = _optionTwo[0].value\n            setTimeout(()=>_self.setState({dropdownValueTwo:_optionTwo[0].value}), 3000)\n        }\n    }\n    componentDidMount() {\n        let self = this;\n        this.neterval = setInterval(()=> {\n            //console.log('re start ==>==>==>', _self.selectedCluster)\n            if(self.state.dropdownValueTwo) self.getStatisticsData(self, self.props);\n        }, 3000)\n    }\n    componentWillUnmount() {\n        clearInterval(this.interval)\n        clearInterval(this.neterval)\n        clearTimeout(this.intervalTime);\n\n    }\n\n\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.selectedCluster) {\n            this.setState({selectedCluster:nextProps.selectedCluster})\n        }\n        //\n        let _optionOne = [];\n        // 클러스터 리스트\n        if(nextProps.applications) {\n            nextProps.applications.map((cld, i) => {\n                if(cld.cloudlet === this.selectedCloudlet) {\n                    cld.clusters.map((clst, j) => {\n                        let itemOne = { key: '', value: '', text: '' };\n                        itemOne.key = clst.cluster;\n                        itemOne.value = clst.cluster;\n                        itemOne.text = clst.cluster;\n                        _optionOne.push(itemOne);\n                        //this.selectedApp = clst.apps[0];\n                    })\n                    //this.selectedCluster = cld.clusters[0].cluster; // default cluster\n                    //this.setState({dropdownValueOne:cld.clusters[0].cluster})\n                }\n            })\n            this.setState({optionOne:_optionOne})\n\n            this.setState({applications:nextProps.applications, netName:nextProps.netName})\n        }\n\n\n        //console.log('===>>>>>>next props cluster app data ..', nextProps.tcpudpClusterData, nextProps.activeIndex, nextProps.netName)\n        //TODO:\n\n\n        this.setDropdownApp(nextProps.applications, this)\n    }\n\n    render() {\n        const { width, height } = this.props.size\n        return (\n            <Grid divided='vertically' className='panel_contents' style={{width:width, height:'94%'}}>\n                <SelectRangeTcpudp sid='rangeOne' optionOne={this.state.optionOne} optionTwo={this.state.optionTwo} optionThree={this.state.optionThree} optionFour={this.state.optionFour}\n                             handleChange={this.handleChange} dropdownValueOne={this.state.dropdownValueOne} dropdownValueTwo={this.state.dropdownValueTwo}/>\n                <Grid.Row className='panel_charts'>\n                    <Grid.Column>\n                        <TimeSeries style={{width:'100%', height:'100%'}} chartData={this.state.timeseriesData} series={this.state.timeseriesSeries} margin={customMargin} marginRight={15}\n                                    label={(this.state.netName === 'TCP')?this.state.dataLabel:this.state.dataLabelNet} error={(this.state.netName === 'TCP')?false:true}\n                                    showLegend={true} y3Position={0.85}\n                                    ></TimeSeries>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n                    console.log('state.receiveDataReduce.data-->',state)\n    return (state.receiveDataReduce && state.receiveDataReduce.data)?{\n        tcpudpClusterData:state.receiveDataReduce.data.tcpudpClusterData\n    }:null;\n};\n\n\nexport default connect(mapStateToProps, null)(sizeMe({ monitorHeight: true })(NetworkTcpUdpComposeView));\n"]},"metadata":{},"sourceType":"module"}