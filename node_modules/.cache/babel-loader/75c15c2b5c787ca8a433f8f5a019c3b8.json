{"ast":null,"code":"//Grouping objects by a property\nexport var groupBy = function groupBy(objectArray, property) {\n  return objectArray.reduce(function (accumulator, obj) {\n    var key = obj[property];\n\n    if (!accumulator[key]) {\n      accumulator[key] = [];\n    }\n\n    accumulator[key].push(obj);\n    return accumulator;\n  }, {});\n};\nexport var groupByCompare = function groupByCompare(objectArray, properties) {\n  return objectArray.reduce(function (accumulator, obj) {\n    var key1 = obj[properties[0]];\n    var key2 = obj[properties[1]];\n    var key = [properties[0]] + ':' + key1 + [properties[1]] + ':' + key2; // console.log('reduce key-', key)\n\n    if (!accumulator[key]) {\n      accumulator[key] = [];\n    }\n\n    accumulator[key].push(obj);\n    return accumulator;\n  }, {});\n}; //Counting instances of values in an object\n\nexport var countedNames = function countedNames(objectArray) {\n  return objectArray.reduce(function (allNames, name) {\n    if (name in allNames) {\n      allNames[name]++;\n    } else {\n      allNames[name] = 1;\n    }\n\n    return allNames;\n  }, {});\n}; //Remove duplicate items in array\n//let orderedArray = Array.from(new Set(myArray));\n\nexport var removeDuplicate = function removeDuplicate(objectArray) {\n  return objectArray.reduce(function (accumulator, currentValue) {\n    if (accumulator.indexOf(currentValue) === -1) {\n      accumulator.push(currentValue);\n    }\n\n    return accumulator;\n  }, []);\n};\n/*\nvar sum, avg = 0;\n\n// dividing by 0 will return Infinity\n// arr must contain at least 1 element to use reduce\nif (arr.length)\n{\n    sum = arr.reduce(function(a, b) { return a + b; });\n    avg = sum / arr.length;\n}\n* */\n\nexport var avg = function avg(objectArray) {\n  return objectArray.reduce(function (accumulator, currentValue) {\n    return accumulator + currentValue;\n  }) / objectArray.length;\n};\n/*\nvar arr = [1,2,'xxx','yyy']\narr = arr.filter(function(e){ return e != 'xxx' });\narr  // [1, 2, \"yyy\"]\n */\n\nexport var filterDefine = function filterDefine(objectArray, values) {\n  values.map(function (filter) {\n    objectArray = objectArray.filter(function (e) {\n      return e != filter;\n    });\n  });\n  return objectArray;\n};\nexport var filterDeleteKey = function filterDeleteKey(object, prop) {\n  var newObj = Object.keys(object).reduce(function (obj, key) {\n    if (key !== prop) {\n      obj[key] = object[key];\n    }\n\n    return obj;\n  }, {});\n  return newObj;\n};\nexport var filterArrayDeleteKey = function filterArrayDeleteKey(object, prop) {\n  var newObj = Object.keys(object).reduce(function (obj, key) {\n    if (key !== prop) {\n      obj[key] = object[key];\n    }\n\n    return obj;\n  }, []);\n  return newObj;\n};\nexport var filterDefineKey = function filterDefineKey(object, values) {\n  object.map(function (obj) {\n    values.map(function (filter) {\n      delete obj[filter];\n    });\n  });\n  return object;\n};\nexport var filterSearch = function filterSearch(data, searchValue, searchType) {\n  var searchArr = [];\n  data.filter(function (item) {\n    var itemCheck = item[searchType].toLowerCase();\n    var searchValueCheck = searchValue.toLowerCase();\n\n    if (itemCheck.indexOf(searchValueCheck) !== -1) {\n      searchArr.push(item);\n    }\n  });\n  return searchArr;\n};","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/utils/index.js"],"names":["groupBy","objectArray","property","reduce","accumulator","obj","key","push","groupByCompare","properties","key1","key2","countedNames","allNames","name","removeDuplicate","currentValue","indexOf","avg","length","filterDefine","values","map","filter","e","filterDeleteKey","object","prop","newObj","Object","keys","filterArrayDeleteKey","filterDefineKey","filterSearch","data","searchValue","searchType","searchArr","item","itemCheck","toLowerCase","searchValueCheck"],"mappings":"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","sourcesContent":["\n//Grouping objects by a property\nexport const groupBy = (objectArray, property) => (\n    objectArray.reduce((accumulator, obj) => {\n        let key = obj[property];\n        if(!accumulator[key]) {\n            accumulator[key] = [];\n        }\n        accumulator[key].push(obj);\n        return accumulator;\n    },{})\n)\n\nexport const groupByCompare = (objectArray, properties) => (\n    objectArray.reduce((accumulator, obj) => {\n        let key1 = obj[properties[0]];\n        let key2 = obj[properties[1]];\n        let key = [properties[0]]+':'+key1 + [properties[1]]+':'+key2\n        // console.log('reduce key-', key)\n        if(!accumulator[key]) {\n            accumulator[key] = [];\n        }\n        accumulator[key].push(obj);\n        return accumulator;\n    },{})\n)\n\n//Counting instances of values in an object\nexport const countedNames = (objectArray) => (\n    objectArray.reduce((allNames, name) => {\n        if (name in allNames) {\n            allNames[name]++;\n        }\n        else {\n            allNames[name] = 1;\n        }\n        return allNames;\n    },{})\n)\n\n\n//Remove duplicate items in array\n//let orderedArray = Array.from(new Set(myArray));\nexport const removeDuplicate = (objectArray) => (\n    objectArray.reduce((accumulator, currentValue) => {\n        if (accumulator.indexOf(currentValue) === -1) {\n            accumulator.push(currentValue);\n        }\n        return accumulator\n    }, [])\n)\n\n/*\nvar sum, avg = 0;\n\n// dividing by 0 will return Infinity\n// arr must contain at least 1 element to use reduce\nif (arr.length)\n{\n    sum = arr.reduce(function(a, b) { return a + b; });\n    avg = sum / arr.length;\n}\n* */\nexport const avg = (objectArray) => (\n    (objectArray.reduce((accumulator, currentValue) => {\n        return accumulator + currentValue;\n    })) / objectArray.length\n)\n\n\n/*\nvar arr = [1,2,'xxx','yyy']\narr = arr.filter(function(e){ return e != 'xxx' });\narr  // [1, 2, \"yyy\"]\n */\nexport const filterDefine = (objectArray, values) => {\n    values.map((filter) => {\n        objectArray = objectArray.filter(function (e) {\n            return e != filter\n        })\n    })\n    return objectArray;\n\n}\nexport const filterDeleteKey = (object, prop) => {\n    const newObj = Object.keys(object).reduce((obj, key) => {\n        if (key !== prop) {\n            obj[key] = object[key]\n        }\n        return obj\n    }, {})\n    return newObj;\n}\nexport const filterArrayDeleteKey = (object, prop) => {\n    const newObj = Object.keys(object).reduce((obj, key) => {\n        if (key !== prop) {\n            obj[key] = object[key]\n        }\n        return obj\n    }, [])\n    return newObj;\n}\nexport const filterDefineKey = (object, values) => {\n\n    object.map((obj) => {\n        values.map((filter) => {\n            delete obj[filter]\n        })\n    })\n\n    return object;\n\n}\nexport const filterSearch = (data, searchValue, searchType) => {\n    let searchArr = []\n    \n    data.filter((item) => {\n\n        let itemCheck = item[searchType].toLowerCase();\n        let searchValueCheck = searchValue.toLowerCase();\n\n        if(itemCheck.indexOf(searchValueCheck)!==-1){\n\n            searchArr.push(item);\n        }\n    })\n    return searchArr;\n\n}\n\n"]},"metadata":{},"sourceType":"module"}