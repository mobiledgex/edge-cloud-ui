{"ast":null,"code":"import * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n/*\n{\n  \"data\": {\n    \"key\": {\n      \"app_key\": {\n        \"developer_key\": {\n          \"name\": \"MobiledgeX\"\n        },\n        \"name\": \"MEXPrometheusAppName\",\n        \"version\": \"1.0\"\n      },\n      \"cluster_inst_key\": {\n        \"cluster_key\": {\n          \"name\": \"bickh123\"\n        },\n        \"cloudlet_key\": {\n          \"operator_key\": {\n            \"name\": \"TDG\"\n          },\n          \"name\": \"mexplat-stage-hamburg-cloudlet\"\n        },\n        \"developer\": \"MobiledgeX\"\n      }\n    },\n    \"cloudlet_loc\": {\n      \"latitude\": 55,\n      \"longitude\": 44,\n      \"timestamp\": {}\n    },\n    \"uri\": \"bickh123.mexplat-stage-hamburg-cloudlet.tdg.mobiledgex.net\",\n    \"liveness\": \"LivenessStatic\",\n    \"mapped_ports\": null,\n    \"flavor\": {\n      \"name\": \"x1.medium\"\n    },\n    \"state\": \"DeleteError\",\n    \"errors\": [\n      \"Delete App Inst failed: error deleting helm chart, KUBECONFIG=bickh123.TDG.kubeconfig helm delete --purge mexprometheusappname, Error: release: \\\"mexprometheusappname\\\" not found, Process exited with status 1\"\n    ],\n    \"runtime_info\": {},\n    \"created_at\": {\n      \"seconds\": 1558940545,\n      \"nanos\": 950911983\n    }\n  }\n}\n */\n\n\nvar generateData = function generateData(datas, body) {\n  var result = datas;\n  var values = []; //20190409 transition string to json\n\n  var toArray = null;\n  var toJson = null;\n\n  if (typeof datas.data === 'object') {} else {\n    toArray = datas.data.split('\\n');\n    toArray.pop();\n  }\n\n  if (toArray) {\n    toJson = toArray.map(function (str) {\n      return JSON.parse(str);\n    });\n  } else {\n    toJson = [];\n    toJson.push(datas.data ? datas.data : {});\n  }\n\n  var newRegistKey = ['Region', 'DeveloperName', 'AppName', 'Version', 'Operator', 'Cloudlet', 'ClusterInst', 'CloudletLocation', 'State', 'Editable'];\n\n  if (toJson && toJson.length) {\n    toJson.map(function (dataResult, i) {\n      if (dataResult.error || dataResult.message || !dataResult.data) {\n        values.push({\n          Region: '',\n          OrganizationName: '',\n          AppName: '',\n          Version: '',\n          Operator: '',\n          Cloudlet: '',\n          ClusterInst: '',\n          CloudletLocation: '',\n          URI: '',\n          Liveness: '',\n          Mapped_port: '',\n          Flavor: '',\n          State: '',\n          Error: '',\n          Runtime: '',\n          Created: '',\n          Progress: '',\n          Edit: null,\n          Status: '',\n          Revision: ''\n        });\n      } else {\n        var Index = i;\n        var Region = body.region || body.params.region || '-';\n        var DeveloperName = dataResult.data.key.app_key.developer_key.name || '-';\n        var AppName = dataResult.data.key.app_key.name || '-';\n        var Version = dataResult.data.key.app_key.version || '-';\n        var Operator = dataResult.data.key.cluster_inst_key.cloudlet_key.operator_key.name || '-';\n        var Cloudlet = dataResult.data.key.cluster_inst_key.cloudlet_key.name || '-';\n        var CloudletLocation = dataResult.data.cloudlet_loc || '-';\n        var ClusterInst = dataResult.data.key.cluster_inst_key.cluster_key.name || '-';\n        var URI = dataResult.data.uri || '-';\n        var liveness = dataResult.data.liveness || '-';\n        var mapped_ports = dataResult.data.mapped_ports || '-';\n        var flavor = dataResult.data.flavor.name || '-';\n        var state = dataResult.data.state || '-';\n        var error = dataResult.data.errors || '-';\n        var runtime = dataResult.data.runtime_info || '-';\n        var created = \"seconds : \" + dataResult.data.created_at.seconds || '-' + \"     nanos : \" + dataResult.data.created_at.nanos || '-';\n        var Status = dataResult.data.status;\n        var Revision = dataResult.data.revision || '-';\n        values.push({\n          Region: Region,\n          OrganizationName: DeveloperName,\n          AppName: AppName,\n          Version: Version,\n          Operator: Operator,\n          Cloudlet: Cloudlet,\n          ClusterInst: ClusterInst,\n          CloudletLocation: CloudletLocation,\n          URI: URI,\n          Liveness: liveness,\n          Mapped_port: mapped_ports,\n          Flavor: flavor,\n          State: state,\n          Error: error,\n          Runtime: runtime,\n          Created: created,\n          Progress: '',\n          Edit: newRegistKey,\n          Status: Status,\n          Revision: Revision\n        });\n      }\n    });\n  } else {\n    var _newRegistKey = ['Region', 'DeveloperName', 'AppName', 'Version', 'Operator', 'Cloudlet', 'ClusterInst', 'CloudletLocation'];\n    values.push({\n      Region: '',\n      OrganizationName: '',\n      AppName: '',\n      Version: '',\n      Operator: '',\n      Cloudlet: '',\n      ClusterInst: '',\n      CloudletLocation: '',\n      Edit: _newRegistKey\n    });\n  } //ascending or descending\n  //values.sort(numberDes);\n  //values.reverse();\n\n\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatComputeInst = function FormatComputeInst(props, body) {\n  return generateData(props, body);\n};\n\nexport default FormatComputeInst;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/services/formatter/formatComputeInstance.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","generateData","body","result","values","toArray","toJson","data","split","pop","map","str","JSON","parse","push","newRegistKey","length","dataResult","i","error","message","Region","OrganizationName","AppName","Version","Operator","Cloudlet","ClusterInst","CloudletLocation","URI","Liveness","Mapped_port","Flavor","State","Error","Runtime","Created","Progress","Edit","Status","Revision","Index","region","params","DeveloperName","key","app_key","developer_key","name","version","cluster_inst_key","cloudlet_key","operator_key","cloudlet_loc","cluster_key","uri","liveness","mapped_ports","flavor","state","errors","runtime","runtime_info","created","created_at","seconds","nanos","status","revision","retunDate","year","substring","month","day","hour","minute","date","Date","FormatComputeInst","props"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n\n/*\n{\n  \"data\": {\n    \"key\": {\n      \"app_key\": {\n        \"developer_key\": {\n          \"name\": \"MobiledgeX\"\n        },\n        \"name\": \"MEXPrometheusAppName\",\n        \"version\": \"1.0\"\n      },\n      \"cluster_inst_key\": {\n        \"cluster_key\": {\n          \"name\": \"bickh123\"\n        },\n        \"cloudlet_key\": {\n          \"operator_key\": {\n            \"name\": \"TDG\"\n          },\n          \"name\": \"mexplat-stage-hamburg-cloudlet\"\n        },\n        \"developer\": \"MobiledgeX\"\n      }\n    },\n    \"cloudlet_loc\": {\n      \"latitude\": 55,\n      \"longitude\": 44,\n      \"timestamp\": {}\n    },\n    \"uri\": \"bickh123.mexplat-stage-hamburg-cloudlet.tdg.mobiledgex.net\",\n    \"liveness\": \"LivenessStatic\",\n    \"mapped_ports\": null,\n    \"flavor\": {\n      \"name\": \"x1.medium\"\n    },\n    \"state\": \"DeleteError\",\n    \"errors\": [\n      \"Delete App Inst failed: error deleting helm chart, KUBECONFIG=bickh123.TDG.kubeconfig helm delete --purge mexprometheusappname, Error: release: \\\"mexprometheusappname\\\" not found, Process exited with status 1\"\n    ],\n    \"runtime_info\": {},\n    \"created_at\": {\n      \"seconds\": 1558940545,\n      \"nanos\": 950911983\n    }\n  }\n}\n */\n\nlet generateData = (datas,body) => {\n    let result = datas;\n    let values = [];\n    //20190409 transition string to json\n    let toArray = null;\n    let toJson = null;\n    if(typeof datas.data === 'object'){\n\n    } else {\n        toArray = datas.data.split('\\n')\n        toArray.pop();\n    }\n    if(toArray) {\n        toJson = toArray.map((str)=>(JSON.parse(str)))\n    } else {\n        toJson = [];\n        toJson.push((datas.data)?datas.data:{})\n    }\n\n    let newRegistKey = [\n        'Region',\n        'DeveloperName',\n        'AppName',\n        'Version',\n        'Operator',\n        'Cloudlet',\n        'ClusterInst',\n        'CloudletLocation',\n        'State',\n        'Editable'\n    ];\n    if(toJson && toJson.length){\n        toJson.map((dataResult, i) => {\n\n            if(dataResult.error || dataResult.message || !dataResult.data) {\n                values.push({\n                    Region:'',\n                    OrganizationName:'',\n                    AppName:'',\n                    Version:'',\n                    Operator:'',\n                    Cloudlet:'',\n                    ClusterInst:'',\n                    CloudletLocation:'',\n                    URI:'',\n                    Liveness:'',\n                    Mapped_port:'',\n                    Flavor:'',\n                    State:'',\n                    Error:'',\n                    Runtime:'',\n                    Created:'',\n                    Progress:'',\n                    Edit:null,\n                    Status:'',\n                    Revision:''\n                })\n            } else {\n                let Index = i;\n                let Region = body.region || body.params.region || '-';\n                let DeveloperName = dataResult.data.key.app_key.developer_key.name  || '-';\n                let AppName = dataResult.data.key.app_key.name  || '-';\n                let Version = dataResult.data.key.app_key.version  || '-';\n                let Operator = dataResult.data.key.cluster_inst_key.cloudlet_key.operator_key.name  || '-';\n                let Cloudlet = dataResult.data.key.cluster_inst_key.cloudlet_key.name  || '-';\n                let CloudletLocation = dataResult.data.cloudlet_loc || '-';\n                let ClusterInst = dataResult.data.key.cluster_inst_key.cluster_key.name || '-';\n                let URI = dataResult.data.uri || '-';\n                let liveness = dataResult.data.liveness || '-';\n                let mapped_ports= dataResult.data.mapped_ports || '-';\n                let flavor = dataResult.data.flavor.name || '-';\n                let state = dataResult.data.state || '-';\n                let error = dataResult.data.errors || '-';\n                let runtime = dataResult.data.runtime_info || '-';\n                let created = \"seconds : \"+dataResult.data.created_at.seconds  || '-' + \"     nanos : \"+dataResult.data.created_at.nanos || '-';\n                let Status = dataResult.data.status\n                let Revision = dataResult.data.revision || '-';\n\n\n\n\n                values.push({\n                    Region:Region,\n                    OrganizationName:DeveloperName,\n                    AppName:AppName,\n                    Version:Version,\n                    Operator:Operator,\n                    Cloudlet:Cloudlet,\n                    ClusterInst:ClusterInst,\n                    CloudletLocation:CloudletLocation,\n                    URI:URI,\n                    Liveness:liveness,\n                    Mapped_port:mapped_ports,\n                    Flavor:flavor,\n                    State:state,\n                    Error:error,\n                    Runtime:runtime,\n                    Created:created,\n                    Progress:'',\n                    Edit:newRegistKey,\n                    Status:Status,\n                    Revision:Revision\n                })\n            }\n        })\n    } else {\n        let newRegistKey = [\n            'Region',\n            'DeveloperName',\n            'AppName',\n            'Version',\n            'Operator',\n            'Cloudlet',\n            'ClusterInst',\n            'CloudletLocation'\n        ];\n        values.push({\n            Region:'',\n            OrganizationName:'',\n            AppName:'',\n            Version:'',\n            Operator:'',\n            Cloudlet:'',\n            ClusterInst:'',\n            CloudletLocation:'',\n            Edit:newRegistKey\n        })\n    }\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    //values.reverse();\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatComputeInst = (props,body) => (\n    generateData(props,body)\n)\n\nexport default FormatComputeInst;\n"]},"metadata":{},"sourceType":"module"}