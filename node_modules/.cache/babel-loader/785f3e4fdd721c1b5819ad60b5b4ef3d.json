{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/popAddUserViewer.js\";\nimport React from 'react';\nimport { Button, Divider, Modal, Grid, Input, TextArea, Dropdown, Image } from \"semantic-ui-react\";\nimport SiteFourOrgaAddUser from \"./siteFourOrgaAdduser\";\nimport * as serviceOrganiz from \"../services/service_organiz_api\";\nimport Alert from 'react-s-alert';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { GridLoader } from \"react-spinners\";\nimport './styles.css';\nvar _self = null;\n\nvar PopAddUserViewer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PopAddUserViewer, _React$Component);\n\n  function PopAddUserViewer() {\n    var _this;\n\n    _classCallCheck(this, PopAddUserViewer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PopAddUserViewer).call(this));\n\n    _this.resultGiveToRole = function (result, resource, self, body) {\n      _self.props.handleLoadingSpinner(false);\n\n      _this.setState({\n        toggleSubmit: false\n      });\n\n      if (result.data.error) {\n        _this.props.handleAlertInfo('error', String(result.data.error));\n\n        _this.setState({\n          successReset: true\n        }); //setTimeout(()=>_self.gotoPreview('/logout'), 2000)\n\n      } else {\n        _this.props.handleAlertInfo('success', 'User ' + body.username + ' added to organization ' + body.org + ' successfully'); //popup close\n\n      }\n    };\n\n    _this.setCloudletList = function (operNm) {\n      var cl = [];\n\n      _self.state.cloudletResult[operNm].map(function (oper, i) {\n        if (i === 0) _self.setState({\n          dropdownValueThree: oper.CloudletName\n        });\n        cl.push({\n          key: i,\n          value: oper.CloudletName,\n          text: oper.CloudletName\n        });\n      });\n\n      _self.setState({\n        devOptionsThree: cl\n      });\n    };\n\n    _this.setForms = function () {\n      return React.createElement(SiteFourOrgaAddUser, {\n        onSubmit: function onSubmit() {\n          return console.log('Form was submitted');\n        },\n        org: _this.state.organization,\n        type: _this.state.typeOperator,\n        successReset: _this.state.successReset,\n        toggleSubmit: _this.state.toggleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    };\n\n    _this.state = {\n      open: false,\n      dimmer: '',\n      cloudletResult: null,\n      listOfDetail: null,\n      userImage: null,\n      userName: null,\n      typeOperator: '',\n      organization: '',\n      successReset: false,\n      toggleSubmit: false\n    };\n    _self = _assertThisInitialized(_this);\n    return _this;\n  }\n\n  _createClass(PopAddUserViewer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {//nextProps.data['Type'].substring(0,1).toUpperCase() + nextProps.data['Type'].substring(1)\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n\n      if (nextProps.open) {\n        this.setState({\n          open: nextProps.open,\n          dimmer: nextProps.dimmer,\n          typeOperator: nextProps.data['Type'].substring(0, 1).toUpperCase() + nextProps.data['Type'].substring(1),\n          organization: nextProps.data['Organization']\n        });\n      }\n\n      if (nextProps.stepTwo && nextProps.stepTwo.submitSucceeded && !this.state.toggleSubmit) {\n        this.props.handleLoadingSpinner(true);\n        this.setState({\n          toggleSubmit: true\n        }); //{username: \"inkikim\", orgName: \"bicinkiOrg\", orgType: \"Developer\", selectRole: \"Manager\"}\n\n        var _username = nextProps.stepTwo.values && nextProps.stepTwo.values.username || '';\n\n        var _org = nextProps.stepTwo.values && nextProps.stepTwo.values.orgName || '';\n\n        var _role = nextProps.stepTwo.values && nextProps.stepTwo.values.orgType + nextProps.stepTwo.values.selectRole || '';\n\n        serviceOrganiz.organize('addUserRole', {\n          username: _username,\n          org: _org,\n          role: _role,\n          token: store ? store.userToken : 'null'\n        }, this.resultGiveToRole, this);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.setState({\n        open: false\n      });\n      this.props.close();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Modal, {\n        open: this.state.open,\n        dimmer: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Add User\"), React.createElement(Modal.Content, {\n        scrolling: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        className: \"popup_user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.setForms()), this.props.loadingSpinner == true ? React.createElement(\"div\", {\n        className: \"loadingBox\",\n        style: {\n          zIndex: 99999\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(GridLoader, {\n        sizeUnit: \"px\",\n        size: 30,\n        color: '#70b2bc',\n        loading: this.props.loadingSpinner //loading={true}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: this.props.loadingSpinner ? '' : 'loading',\n        style: {\n          fontSize: '22px',\n          color: '#70b2bc'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Loading...\")) : null), React.createElement(Modal.Actions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.close();\n        },\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Close\")));\n    }\n  }]);\n\n  return PopAddUserViewer;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var formStepAdduser = state.form.orgaStepAddUser ? {\n    values: state.form.orgaStepAddUser.values,\n    submitSucceeded: state.form.orgaStepAddUser.submitSucceeded\n  } : {};\n  return {\n    stepTwo: formStepAdduser,\n    loadingSpinner: state.loadingSpinner.loading ? state.loadingSpinner.loading : null\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleLoadingSpinner: function handleLoadingSpinner(data) {\n      dispatch(actions.loadingSpinner(data));\n    },\n    handleAlertInfo: function handleAlertInfo(mode, msg) {\n      dispatch(actions.alertInfo(mode, msg));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(PopAddUserViewer));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/popAddUserViewer.js"],"names":["React","Button","Divider","Modal","Grid","Input","TextArea","Dropdown","Image","SiteFourOrgaAddUser","serviceOrganiz","Alert","withRouter","connect","actions","GridLoader","_self","PopAddUserViewer","resultGiveToRole","result","resource","self","body","props","handleLoadingSpinner","setState","toggleSubmit","data","error","handleAlertInfo","String","successReset","username","org","setCloudletList","operNm","cl","state","cloudletResult","map","oper","i","dropdownValueThree","CloudletName","push","key","value","text","devOptionsThree","setForms","console","log","organization","typeOperator","open","dimmer","listOfDetail","userImage","userName","nextProps","nextContext","store","localStorage","PROJECT_INIT","JSON","parse","substring","toUpperCase","stepTwo","submitSucceeded","_username","values","_org","orgName","_role","orgType","selectRole","organize","role","token","userToken","close","loadingSpinner","zIndex","fontSize","color","Component","mapStateToProps","formStepAdduser","form","orgaStepAddUser","loading","mapDispatchProps","dispatch","mode","msg","alertInfo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, Divider, Modal, Grid, Input, TextArea, Dropdown, Image} from \"semantic-ui-react\";\nimport SiteFourOrgaAddUser from \"./siteFourOrgaAdduser\";\nimport * as serviceOrganiz from \"../services/service_organiz_api\";\nimport Alert from 'react-s-alert';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport {GridLoader} from \"react-spinners\";\nimport './styles.css';\n\nlet _self = null;\nclass PopAddUserViewer extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            open:false,\n            dimmer:'',\n            cloudletResult:null,\n            listOfDetail:null,\n            userImage:null,\n            userName:null,\n            typeOperator:'',\n            organization:'',\n            successReset:false,\n            toggleSubmit:false\n        }\n        _self = this;\n    }\n\n    componentDidMount() {\n        //nextProps.data['Type'].substring(0,1).toUpperCase() + nextProps.data['Type'].substring(1)\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        if(nextProps.open) {\n            this.setState({open:nextProps.open, dimmer:nextProps.dimmer, typeOperator:(nextProps.data['Type'].substring(0,1).toUpperCase() + nextProps.data['Type'].substring(1)), organization:nextProps.data['Organization']});\n        }\n        if(nextProps.stepTwo && nextProps.stepTwo.submitSucceeded && !this.state.toggleSubmit) {\n            this.props.handleLoadingSpinner(true);\n            this.setState({toggleSubmit:true});\n            //{username: \"inkikim\", orgName: \"bicinkiOrg\", orgType: \"Developer\", selectRole: \"Manager\"}\n            let _username = nextProps.stepTwo.values && nextProps.stepTwo.values.username || '';\n            let _org = nextProps.stepTwo.values && nextProps.stepTwo.values.orgName || '';\n            let _role = nextProps.stepTwo.values && nextProps.stepTwo.values.orgType+nextProps.stepTwo.values.selectRole || '';\n            serviceOrganiz.organize('addUserRole',\n                {\n                        username:_username,\n                        org:_org,\n                        role:_role,\n                        token:store ? store.userToken : 'null'\n                }, this.resultGiveToRole, this)\n            \n        }\n    }\n\n    resultGiveToRole = (result,resource, self, body) => {\n        _self.props.handleLoadingSpinner(false);\n        this.setState({toggleSubmit:false})\n        if(result.data.error) {\n            this.props.handleAlertInfo('error',String(result.data.error))\n            this.setState({successReset:true});\n            //setTimeout(()=>_self.gotoPreview('/logout'), 2000)\n        } else {\n            this.props.handleAlertInfo('success','User '+body.username+' added to organization '+body.org+' successfully')\n            //popup close\n        }\n    }\n\n    setCloudletList = (operNm) => {\n        let cl = [];\n        _self.state.cloudletResult[operNm].map((oper, i) => {\n            if(i === 0) _self.setState({dropdownValueThree: oper.CloudletName})\n            cl.push({ key: i, value: oper.CloudletName, text: oper.CloudletName })\n        })\n\n        _self.setState({devOptionsThree: cl})\n    }\n\n    setForms = () => (\n        <SiteFourOrgaAddUser onSubmit={() => console.log('Form was submitted')} org={this.state.organization} type={this.state.typeOperator} successReset={this.state.successReset} toggleSubmit={this.state.toggleSubmit}></SiteFourOrgaAddUser>\n    )\n\n\n    close() {\n        this.setState({ open: false })\n        this.props.close()\n    }\n\n\n    render() {\n\n        return (\n            <Modal open={this.state.open} dimmer={false}>\n                <Modal.Header>Add User</Modal.Header>\n                <Modal.Content scrolling>\n                    <Grid className='popup_user'>\n                        {/*<Grid.Row>*/}\n                        {/*    <Grid.Column>*/}\n                        {/*        <Image src='/assets/matthew.png' size=\"tiny\" centered bordered/>*/}\n                        {/*    </Grid.Column>*/}\n                        {/*</Grid.Row>*/}\n                        {this.setForms()}\n                    </Grid>\n                    {(this.props.loadingSpinner==true)?\n                    <div className=\"loadingBox\" style={{zIndex:99999}}>\n                        <GridLoader\n                            sizeUnit={\"px\"}\n                            size={30}\n                            color={'#70b2bc'}\n                            loading={this.props.loadingSpinner}\n                            //loading={true}\n                        />\n                        <span className={this.props.loadingSpinner ? '' : 'loading'} style={{fontSize:'22px', color:'#70b2bc'}}>Loading...</span>\n                    </div>:null}\n                </Modal.Content>\n                <Modal.Actions>\n                {/*<Modal.Actions  className='adduser-close'>*/}\n                    <Button onClick={() => this.close()} style={{}}>\n                        Close\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    let formStepAdduser= state.form.orgaStepAddUser\n    ? {\n        values: state.form.orgaStepAddUser.values,\n        submitSucceeded: state.form.orgaStepAddUser.submitSucceeded\n    }\n    : {};\n    return {\n        stepTwo:formStepAdduser,\n        loadingSpinner : state.loadingSpinner.loading?state.loadingSpinner.loading:null,\n    }\n};\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleLoadingSpinner: (data) => { dispatch(actions.loadingSpinner(data))},\n        handleAlertInfo: (mode,msg) => { dispatch(actions.alertInfo(mode,msg))}\n    };\n};\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(PopAddUserViewer));\n\n\n"]},"metadata":{},"sourceType":"module"}