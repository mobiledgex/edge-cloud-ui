{"ast":null,"code":"import _defineProperty from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/popSettingViewer.js\";\nimport React, { Fragment } from 'react';\nimport { Button, Divider, Modal, Grid, Form, TextArea } from \"semantic-ui-react\";\nimport { Field, reduxForm, initialize, change, reset } from \"redux-form\";\n\nvar renderInput = function renderInput(field) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(Form.Input, Object.assign({}, field.input, {\n    type: field.type,\n    placeholder: field.placeholder,\n    disabled: field.disabled,\n    fluid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  })));\n};\n\nvar renderTextArea = function renderTextArea(field) {\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(TextArea, Object.assign({\n    rows: 3\n  }, field.input, {\n    label: field.label,\n    placeholder: field.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })));\n};\n\nvar _self = null;\nvar hostname = window.location.hostname;\n\nvar PopSettingViewer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PopSettingViewer, _React$Component);\n\n  function PopSettingViewer() {\n    var _this;\n\n    _classCallCheck(this, PopSettingViewer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PopSettingViewer).call(this));\n\n    _this.handleChange = function (e, _ref) {\n      var name = _ref.name,\n          value = _ref.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.onHandleSubmit = function (a, b) {\n      console.log('+++++++++on handle submit popSettingViewer+++++', _self.props.userURL, a, b);\n      localStorage.setItem('domainData', JSON.stringify({\n        \"mcDomain\": _self.props.userURL\n      }));\n\n      _self.props.handleSubmit();\n\n      setTimeout(function () {\n        _self.props.dispatch(initialize('registUserSetting', {\n          submitSucceeded: false\n        })); //_self.handleInitialize();\n\n      }, 1000);\n    };\n\n    _this.makeForm = function (regKeys) {\n      return React.createElement(Form.Group, {\n        style: {\n          margin: 0,\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        style: {\n          width: '100%',\n          margin: '-1rem 0 -1rem 0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, regKeys.map(function (key, i) {\n        return React.createElement(Grid.Row, {\n          columns: 2,\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(Grid.Column, {\n          width: 5,\n          className: \"detail_item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, key)), React.createElement(Grid.Column, {\n          width: 11,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(Field, {\n          component: renderInput,\n          type: \"input\",\n          name: \"userURL\",\n          value: _self.getDomain(),\n          onChange: _this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        })), React.createElement(Divider, {\n          vertical: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }));\n      })));\n    };\n\n    _this.makebutton = function (regKeys) {\n      return React.createElement(Form.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick() {\n          return _this.close();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        primary: true,\n        positive: true,\n        icon: \"checkmark\",\n        labelPosition: \"right\",\n        content: \"Save\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }));\n    };\n\n    _this.state = {\n      open: false,\n      opened: false,\n      dimmer: '',\n      listOfDetail: null,\n      regKeys: [],\n      defaultUrl: _this.getDomain()\n    };\n    _self = _assertThisInitialized(_this);\n    return _this;\n  }\n\n  _createClass(PopSettingViewer, [{\n    key: \"getDomain\",\n    value: function getDomain() {\n      if (hostname.indexOf('stage') > 0) {\n        return 'https://mc-stage.mobiledgex.com:9900';\n      } else if (hostname.indexOf('dev') > 0) {\n        return 'https://mc-dev.mobiledgex.com:9900';\n      } else if (hostname === 'localhost') {\n        return 'https://mc-stage.mobiledgex.com:9900';\n      } else {\n        return 'https://mc.mobiledgex.com:9900';\n      }\n    }\n  }, {\n    key: \"handleInitialize\",\n    value: function handleInitialize() {\n      var initData = {\n        \"userURL\": this.state.defaultUrl\n      };\n      this.props.initialize(initData);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.setState({\n        open: false\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {//this.handleInitialize();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      console.log('regist new item -- ', nextProps); // if(nextProps.open) {\n      //     this.setState({open:nextProps.open, dimmer:nextProps.dimmer});\n      //     if(nextProps.data){\n      //         this.setState({regKeys:Object.keys(nextProps.data)})\n      //     }\n      //     this.forceUpdate()\n      // }\n\n      if (nextProps.data) {\n        this.setState({\n          regKeys: Object.keys(nextProps.data),\n          open: nextProps.open\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          reset = _this$props.reset,\n          dimmer = _this$props.dimmer;\n      return React.createElement(Modal, {\n        size: 'small',\n        open: this.state.open,\n        dimmer: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Settings\"), React.createElement(Modal.Content, {\n        style: {\n          padding: '1.5rem 0.5rem 1.5rem 0.5rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onHandleSubmit,\n        className: \"fieldForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, this.makeForm(this.state.regKeys), this.makebutton(this.state.regKeys))));\n    }\n  }]);\n\n  return PopSettingViewer;\n}(React.Component);\n\nexport default reduxForm({\n  form: \"registUserSetting\",\n  enableReinitialize: false\n})(PopSettingViewer);","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/popSettingViewer.js"],"names":["React","Fragment","Button","Divider","Modal","Grid","Form","TextArea","Field","reduxForm","initialize","change","reset","renderInput","field","input","type","placeholder","disabled","renderTextArea","label","_self","hostname","window","location","PopSettingViewer","handleChange","e","name","value","setState","onHandleSubmit","a","b","console","log","props","userURL","localStorage","setItem","JSON","stringify","handleSubmit","setTimeout","dispatch","submitSucceeded","makeForm","regKeys","margin","width","map","key","i","getDomain","makebutton","close","state","open","opened","dimmer","listOfDetail","defaultUrl","indexOf","initData","nextProps","nextContext","data","Object","keys","padding","Component","form","enableReinitialize"],"mappings":"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","sourcesContent":["import React, {Fragment} from 'react';\nimport {Button, Divider, Modal, Grid, Form, TextArea} from \"semantic-ui-react\";\nimport {Field, reduxForm, initialize, change, reset} from \"redux-form\";\n\n\nconst renderInput = field => (\n    <div>\n        <Form.Input\n            {...field.input}\n            type={field.type}\n            placeholder={field.placeholder}\n            disabled={field.disabled}\n            fluid\n        />\n    </div>\n\n);\nconst renderTextArea = field => (\n    <Form>\n        <TextArea\n            rows={3}\n            {...field.input}\n            label={field.label}\n            placeholder={field.placeholder} />\n    </Form>\n);\n\n\nlet _self = null;\nconst hostname = window.location.hostname;\nclass PopSettingViewer extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            open:false,\n            opened:false,\n            dimmer:'',\n            listOfDetail:null,\n            regKeys:[],\n            defaultUrl:this.getDomain()\n        }\n        _self = this;\n    }\n    getDomain() {\n        if (hostname.indexOf('stage') > 0) {\n            return 'https://mc-stage.mobiledgex.com:9900'\n        } else if (hostname.indexOf('dev') > 0) {\n            return 'https://mc-dev.mobiledgex.com:9900'\n        } else if (hostname === 'localhost' ){\n            return 'https://mc-stage.mobiledgex.com:9900'\n            }\n        else {\n            return 'https://mc.mobiledgex.com:9900'\n        }\n\n    }\n\n\n    handleInitialize() {\n\n        const initData = {\n            \"userURL\": this.state.defaultUrl,\n        };\n\n        this.props.initialize(initData);\n    }\n    handleChange = (e, { name, value }) => {\n        this.setState({ [name]: value })\n    }\n    onHandleSubmit =(a,b)=> {\n\n        console.log('+++++++++on handle submit popSettingViewer+++++', _self.props.userURL, a, b)\n        localStorage.setItem('domainData', JSON.stringify({\"mcDomain\":_self.props.userURL}));\n        _self.props.handleSubmit();\n        setTimeout(() => {\n            _self.props.dispatch(initialize('registUserSetting', {\n                submitSucceeded: false\n            }))\n            //_self.handleInitialize();\n        },1000);\n\n    }\n    close() {\n        this.setState({open:false})\n    }\n\n    componentDidMount() {\n        //this.handleInitialize();\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        console.log('regist new item -- ', nextProps)\n        // if(nextProps.open) {\n        //     this.setState({open:nextProps.open, dimmer:nextProps.dimmer});\n        //     if(nextProps.data){\n        //         this.setState({regKeys:Object.keys(nextProps.data)})\n        //     }\n        //     this.forceUpdate()\n        // }\n\n        if(nextProps.data){\n            this.setState({regKeys:Object.keys(nextProps.data), open:nextProps.open})\n        }\n\n    }\n\n\n    makeForm = (regKeys) => (\n            <Form.Group  style={{margin:0, width: '100%'}}>\n                <Grid style={{width:'100%', margin:'-1rem 0 -1rem 0'}}>\n                {\n                    regKeys.map((key, i) => (\n                        <Grid.Row columns={2} key={i}>\n                            <Grid.Column width={5} className='detail_item'>\n                                <div>{key}</div>\n                            </Grid.Column>\n                            <Grid.Column width={11}>\n                                <Field\n                                    component={renderInput}\n                                    type=\"input\"\n                                    name=\"userURL\"\n                                    value={_self.getDomain()}\n                                    onChange={this.handleChange}\n                                />\n                            </Grid.Column>\n                            <Divider vertical></Divider>\n                        </Grid.Row>\n                    ))\n                }\n                </Grid>\n            </Form.Group>\n    )\n\n    makebutton = (regKeys) => (\n            <Form.Group>\n                <Button onClick={() => this.close()}>\n                    Cancel\n                </Button>\n                <Button\n                    primary\n                    positive\n                    icon='checkmark'\n                    labelPosition='right'\n                    content=\"Save\"\n                    type=\"submit\"\n                />\n            </Form.Group>\n    )\n\n\n    render() {\n        const { handleSubmit, reset, dimmer } = this.props;\n        return (\n\n            <Modal size={'small'} open={this.state.open} dimmer={false}>\n                <Modal.Header>Settings</Modal.Header>\n                <Modal.Content style={{padding:'1.5rem 0.5rem 1.5rem 0.5rem'}}>\n                    <Form onSubmit={this.onHandleSubmit} className={\"fieldForm\"}>\n                    {\n                        this.makeForm(this.state.regKeys)\n                    }\n                    {\n                        this.makebutton(this.state.regKeys)\n                    }\n                    </Form>\n                </Modal.Content>\n            </Modal>\n\n        )\n    }\n}\n\n\nexport default reduxForm({\n    form: \"registUserSetting\",\n    enableReinitialize: false\n})(PopSettingViewer);\n\n"]},"metadata":{},"sourceType":"module"}