{"ast":null,"code":"import socketIOClient from 'socket.io-client'; //redux\n\nimport * as actions from '../actions';\nimport store from '../store';\nimport * as utile from '../utils';\nvar hostname = window.location.hostname;\n\nvar _serverUrl = 'ws://' + hostname + ':3030';\n\nif (process.env.REACT_APP_API_USE_SERVER_SUFFIX === 'true') {\n  _serverUrl = 'ws://' + hostname + '/server';\n}\n\nvar stackStates = [];\nexport function serviceStreaming(stId, callback, body) {\n  var socket = socketIOClient(_serverUrl);\n  console.log('20191119 socket connection...', socket, \":\", stId); // 서버로 자신의 정보를 전송한다.\n\n  socket.emit(stId, {\n    name: stId\n  }); // 서버로부터의 메시지가 수신되면\n\n  socket.on(stId, function (data) {\n    // stack income message to list array\n    if (socket.disconnected) {\n      console.log('20191119 disconnected socket'); //stackStates = [];\n    } //let _data = data['stackData'] ? JSON.parse(data['stackData']) : null;\n\n\n    console.log('20191119 has data in stacked statues   ', data);\n\n    if (data) {\n      if (data.name) console.log('connection stream');else if (data.data.message !== 'startSteam' && data.clId) {\n        console.log('20191119 message success..', data.clId, \":\", data.data.message, \":\");\n        callback(data, body); //store.dispatch(actions.alertInfo('info', data.clId +\" : \"+data.data.message))\n        // refresh\n        //store.dispatch(actions.computeRefresh(false))\n      }\n    }\n    /*\n    if(_data && _data.length) {\n        _data.map((dtd, i) => {\n            let keys = Object.keys(JSON.parse(dtd[stId]));\n            let parseData = JSON.parse(dtd[stId])\n            console.log('20191119 key..', keys, \":\",keys[0], \":\", parseData,\":clId ===>>>>>>>\",dtd['clId'])\n             let clId = dtd['clId'];\n            let _dtd = null\n            if(dtd[stId] && keys[0] === 'data') {\n                 _dtd = parseData.data ? parseData.data : null;\n                console.log('20191119 login -- ', _dtd,\":\", stackStates)\n                if(_dtd) {\n                    //let message = _dtd.message;\n                    //stackStates.push(message)\n                    _dtd['clId'] = clId;\n                    if(stackStates.length == 0) stackStates.push(_dtd)\n                    let sameItem = false;\n                    stackStates.map((sItem) => {\n                        if(sItem === _dtd) sameItem = true;\n                    })\n                    if(!sameItem) {\n                        stackStates.push(_dtd)\n                    }\n                     if(_dtd.message.indexOf('successfully') > -1) {\n                        store.dispatch(actions.alertInfo('info',_dtd.message))\n                        // refresh\n                        stackStates = [];\n                        store.dispatch(actions.computeRefresh(false))\n                     }\n                 }\n             } else if(dtd[stId] && keys[0] === 'result') {\n                _dtd = parseData.result ? parseData.result.message : null;\n                console.log('20191119 login result -- ', _dtd)\n                if(_dtd) {\n                    if(_dtd.indexOf('Failed') > -1 || _dtd.indexOf('failed') > -1) {\n                        store.dispatch(actions.alertInfo('error',_dtd))\n                    } else {\n                        store.dispatch(actions.alertInfo('info',_dtd))\n                    }\n                    setTimeout(() => socket.disconnect(true), 3000);\n                    // refresh\n                    stackStates = [];\n                    store.dispatch(actions.computeRefresh(false))\n                }\n            }\n        })\n        console.log('20191119 stackStates == ', stackStates)\n        store.dispatch(actions.stateStream(stackStates))\n    } else {\n        // closed streaming\n        console.log('20191119 closed streaming....')\n    }\n    */\n\n  });\n  /*\n  // Send 버튼이 클릭되면\n  $(\"form\").submit(function(e) {\n      e.preventDefault();\n      var $msgForm = $(\"#msgForm\");\n      // 서버로 메시지를 전송한다.\n      socket.emit(\"chat\", { msg: $msgForm.val() });\n      $msgForm.val(\"\");\n  });\n   */\n  // test.. send msg to pushing server\n\n  setTimeout(function () {\n    // 서버로 메시지를 전송한다.\n    socket.emit(\"login\", {\n      name: 'Hi. I am client'\n    });\n  }, 3000);\n}","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/services/service_webSocket.js"],"names":["socketIOClient","actions","store","utile","hostname","window","location","_serverUrl","process","env","REACT_APP_API_USE_SERVER_SUFFIX","stackStates","serviceStreaming","stId","callback","body","socket","console","log","emit","name","on","data","disconnected","message","clId","setTimeout"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B,C,CACA;;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AAEA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBF,QAAjC;;AACA,IAAIG,UAAU,GAAG,UAAQH,QAAR,GAAiB,OAAlC;;AAEA,IAAGI,OAAO,CAACC,GAAR,CAAYC,+BAAZ,KAAgD,MAAnD,EAA2D;AACvDH,EAAAA,UAAU,GAAG,UAAQH,QAAR,GAAiB,SAA9B;AACH;;AAED,IAAIO,WAAW,GAAG,EAAlB;AACA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,IAA1C,EAAgD;AAEnD,MAAMC,MAAM,GAAGhB,cAAc,CAACO,UAAD,CAA7B;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA4CF,MAA5C,EAAoD,GAApD,EAAyDH,IAAzD,EAHmD,CAKnD;;AACAG,EAAAA,MAAM,CAACG,IAAP,CAAYN,IAAZ,EAAkB;AACdO,IAAAA,IAAI,EAAEP;AADQ,GAAlB,EANmD,CAUnD;;AACAG,EAAAA,MAAM,CAACK,EAAP,CAAUR,IAAV,EAAgB,UAASS,IAAT,EAAe;AAC3B;AACA,QAAGN,MAAM,CAACO,YAAV,EAAuB;AACnBN,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EADmB,CAEnB;AACH,KAL0B,CAM3B;;;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDI,IAAvD;;AAEA,QAAGA,IAAH,EAAS;AACL,UAAGA,IAAI,CAACF,IAAR,EAAcH,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAd,KACK,IAAGI,IAAI,CAACA,IAAL,CAAUE,OAAV,KAAsB,YAAtB,IAAsCF,IAAI,CAACG,IAA9C,EAAoD;AACrDR,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CI,IAAI,CAACG,IAA/C,EAAqD,GAArD,EAAyDH,IAAI,CAACA,IAAL,CAAUE,OAAnE,EAA2E,GAA3E;AACAV,QAAAA,QAAQ,CAACQ,IAAD,EAAOP,IAAP,CAAR,CAFqD,CAGrD;AACA;AACA;AACH;AACJ;AAMD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DH,GAtFD;AA0FA;;;;;;;;;;AAYA;;AACAW,EAAAA,UAAU,CAAC,YAAM;AACb;AACAV,IAAAA,MAAM,CAACG,IAAP,CAAY,OAAZ,EAAqB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAArB;AACH,GAHS,EAGP,IAHO,CAAV;AAIH","sourcesContent":["import socketIOClient from 'socket.io-client'\n//redux\nimport * as actions from '../actions';\nimport store from '../store';\nimport * as utile from '../utils'\n\nconst hostname = window.location.hostname;\nlet _serverUrl = 'ws://'+hostname+':3030';\n\nif(process.env.REACT_APP_API_USE_SERVER_SUFFIX === 'true') {\n    _serverUrl = 'ws://'+hostname+'/server';\n}\n\nlet stackStates = [];\nexport function serviceStreaming(stId, callback, body) {\n\n    const socket = socketIOClient(_serverUrl);\n    console.log('20191119 socket connection...',socket, \":\", stId)\n\n    // 서버로 자신의 정보를 전송한다.\n    socket.emit(stId, {\n        name: stId\n    });\n\n    // 서버로부터의 메시지가 수신되면\n    socket.on(stId, function(data) {\n        // stack income message to list array\n        if(socket.disconnected){\n            console.log('20191119 disconnected socket')\n            //stackStates = [];\n        }\n        //let _data = data['stackData'] ? JSON.parse(data['stackData']) : null;\n        console.log('20191119 has data in stacked statues   ', data)\n\n        if(data) {\n            if(data.name) console.log('connection stream')\n            else if(data.data.message !== 'startSteam' && data.clId) {\n                console.log('20191119 message success..', data.clId, \":\",data.data.message,\":\",)\n                callback(data, body)\n                //store.dispatch(actions.alertInfo('info', data.clId +\" : \"+data.data.message))\n                // refresh\n                //store.dispatch(actions.computeRefresh(false))\n            }\n        }\n\n\n\n\n\n        /*\n        if(_data && _data.length) {\n            _data.map((dtd, i) => {\n                let keys = Object.keys(JSON.parse(dtd[stId]));\n                let parseData = JSON.parse(dtd[stId])\n                console.log('20191119 key..', keys, \":\",keys[0], \":\", parseData,\":clId ===>>>>>>>\",dtd['clId'])\n\n                let clId = dtd['clId'];\n                let _dtd = null\n                if(dtd[stId] && keys[0] === 'data') {\n\n                    _dtd = parseData.data ? parseData.data : null;\n                    console.log('20191119 login -- ', _dtd,\":\", stackStates)\n                    if(_dtd) {\n                        //let message = _dtd.message;\n                        //stackStates.push(message)\n                        _dtd['clId'] = clId;\n                        if(stackStates.length == 0) stackStates.push(_dtd)\n                        let sameItem = false;\n                        stackStates.map((sItem) => {\n                            if(sItem === _dtd) sameItem = true;\n                        })\n                        if(!sameItem) {\n                            stackStates.push(_dtd)\n                        }\n\n                        if(_dtd.message.indexOf('successfully') > -1) {\n                            store.dispatch(actions.alertInfo('info',_dtd.message))\n                            // refresh\n                            stackStates = [];\n                            store.dispatch(actions.computeRefresh(false))\n\n                        }\n\n                    }\n\n                } else if(dtd[stId] && keys[0] === 'result') {\n                    _dtd = parseData.result ? parseData.result.message : null;\n                    console.log('20191119 login result -- ', _dtd)\n                    if(_dtd) {\n                        if(_dtd.indexOf('Failed') > -1 || _dtd.indexOf('failed') > -1) {\n                            store.dispatch(actions.alertInfo('error',_dtd))\n                        } else {\n                            store.dispatch(actions.alertInfo('info',_dtd))\n                        }\n                        setTimeout(() => socket.disconnect(true), 3000);\n                        // refresh\n                        stackStates = [];\n                        store.dispatch(actions.computeRefresh(false))\n                    }\n                }\n            })\n            console.log('20191119 stackStates == ', stackStates)\n            store.dispatch(actions.stateStream(stackStates))\n        } else {\n            // closed streaming\n            console.log('20191119 closed streaming....')\n        }\n        */\n\n\n\n    });\n\n\n\n    /*\n    // Send 버튼이 클릭되면\n    $(\"form\").submit(function(e) {\n        e.preventDefault();\n        var $msgForm = $(\"#msgForm\");\n        // 서버로 메시지를 전송한다.\n        socket.emit(\"chat\", { msg: $msgForm.val() });\n        $msgForm.val(\"\");\n    });\n     */\n\n\n    // test.. send msg to pushing server\n    setTimeout(() => {\n        // 서버로 메시지를 전송한다.\n        socket.emit(\"login\", { name: 'Hi. I am client' });\n    }, 3000)\n}\n"]},"metadata":{},"sourceType":"module"}