{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/siteFourCreateFormAppDefault.js\";\nimport React, { Fragment } from \"react\";\nimport { Button, Form, Table, List, Grid, Card, Header, Divider, Tab, Item, Popup, Icon, Input, Checkbox } from \"semantic-ui-react\";\nimport { Field, reduxForm, initialize, reset, stopSubmit, change } from \"redux-form\";\nimport MaterialIcon from \"material-icons-react\";\nimport * as services from '../services/service_compute_service';\nimport './styles.css';\nvar portNum = 0;\n\nvar makeOption = function makeOption(options) {\n  return options.map(function (value) {\n    return {\n      key: value,\n      text: value == 'tcp' || value == 'udp' ? value.toUpperCase() : value,\n      value: value\n    };\n  });\n};\n\nvar makeOptionNumber = function makeOptionNumber(options) {\n  return options.map(function (value, i) {\n    return {\n      key: i,\n      text: value,\n      value: i\n    };\n  });\n};\n\nvar renderSelect = function renderSelect(_ref) {\n  var input = _ref.input,\n      label = _ref.label,\n      options = _ref.options,\n      placeholder = _ref.placeholder,\n      error = _ref.error,\n      disabled = _ref.disabled;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Form.Select, {\n    label: label,\n    name: input.name,\n    onChange: function onChange(e, _ref2) {\n      var value = _ref2.value;\n      return input.onChange(value);\n    },\n    options: makeOption(options),\n    placeholder: placeholder,\n    value: input.value,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), error && React.createElement(\"span\", {\n    className: \"text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, error));\n};\n\nvar renderSelectNumber = function renderSelectNumber(field) {\n  return React.createElement(Form.Select, {\n    label: field.label,\n    name: field.input.name,\n    onChange: function onChange(e, _ref3) {\n      var value = _ref3.value;\n      return field.input.onChange(value);\n    },\n    options: makeOptionNumber(field.options),\n    placeholder: field.placeholder,\n    value: field.input.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  });\n};\n\nvar renderTextArea = function renderTextArea(field) {\n  return React.createElement(Form.TextArea, Object.assign({}, field.input, {\n    label: field.label,\n    rows: field.row // placeholder={field.placeholder}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nvar renderInput = function renderInput(_ref4) {\n  var input = _ref4.input,\n      placeholder = _ref4.placeholder,\n      label = _ref4.label,\n      type = _ref4.type,\n      error = _ref4.error,\n      disabled = _ref4.disabled;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Form.Input, Object.assign({}, input, {\n    type: type,\n    label: label // placeholder={placeholder}\n    ,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), error && React.createElement(\"span\", {\n    className: \"text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, error));\n};\n\nvar renderInputNum = function renderInputNum(_ref5) {\n  var input = _ref5.input,\n      placeholder = _ref5.placeholder,\n      label = _ref5.label,\n      type = _ref5.type,\n      error = _ref5.error,\n      disabled = _ref5.disabled;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Form.Input, Object.assign({}, input, {\n    type: type,\n    label: label,\n    disabled: disabled,\n    onChange: function onChange(e, _ref6) {\n      var value = _ref6.value;\n      var regexp = /[^0-9]/g;\n\n      if (!regexp.test(value)) {\n        input.onChange(value);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), error && React.createElement(\"span\", {\n    className: \"text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, error));\n};\n\nvar renderInputDisabled = function renderInputDisabled(field) {\n  return React.createElement(Form.Input, Object.assign({}, field.input, {\n    type: field.type,\n    label: field.label,\n    placeholder: field.placeholder,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n};\n\nvar renderInputDpType = function renderInputDpType(field) {\n  return React.createElement(Form.Input, Object.assign({}, field.input, {\n    type: field.type,\n    label: field.label,\n    value: field.placeholder,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }));\n};\n\nvar renderInputPathType = function renderInputPathType(field) {\n  return React.createElement(Form.Input, Object.assign({}, field.input, {\n    type: field.type,\n    label: field.label,\n    value: field.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }));\n};\n\nvar renderInputApp = function renderInputApp(field) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Form.Input, Object.assign({}, field.input, {\n    type: field.type,\n    label: field.label,\n    placeholder: 'Please use numbers and English letters only',\n    onChange: function onChange(e, _ref7) {\n      var value = _ref7.value;\n      var reg = /^[0-9a-zA-Z_][-0-9a-zA-Z_]*/;\n\n      if (reg.test(value) || value == '') {\n        field.input.onChange(value);\n      }\n    },\n    disabled: field.disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), field.error && React.createElement(\"span\", {\n    className: \"text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, field.error));\n};\n\nvar renderCheckbox = function renderCheckbox(field) {\n  return React.createElement(Form.Checkbox, {\n    toggle: true,\n    style: {\n      height: '33px',\n      paddingTop: '8px'\n    },\n    checked: !!field.input.value,\n    name: field.input.name,\n    label: field.label,\n    onChange: function onChange(e, _ref8) {\n      var checked = _ref8.checked;\n      return field.input.onChange(checked);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  });\n};\n\nvar style = {\n  borderRadius: 0,\n  opacity: 0.7,\n  padding: '2em'\n};\n\nvar SiteFourCreateFormAppDefault =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SiteFourCreateFormAppDefault, _React$Component);\n\n  function SiteFourCreateFormAppDefault(props) {\n    var _this;\n\n    _classCallCheck(this, SiteFourCreateFormAppDefault);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SiteFourCreateFormAppDefault).call(this, props));\n\n    _this.getHelpPopup = function (value) {\n      return React.createElement(Popup, {\n        trigger: React.createElement(Icon, {\n          name: \"question circle outline\",\n          size: \"large\",\n          style: {\n            lineHeight: 'unset',\n            margin: '10px 0'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }),\n        content: value,\n        style: style,\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      });\n    };\n\n    _this.handleRegionChange = function (e) {\n      _this.props.getOptionData(e); //this.props.dispatch(reset('createAppFormDefault'));\n\n    };\n\n    _this.AddPorts = function (e) {\n      e.preventDefault();\n      var pn = {\n        num: portNum,\n        name: 'single'\n      };\n\n      _this.setState({\n        portArray: _this.state.portArray.concat(pn)\n      });\n\n      portNum++;\n    };\n\n    _this.AddMultiPorts = function (e) {\n      e.preventDefault();\n      var pn = {\n        num: portNum,\n        name: 'multi'\n      };\n\n      _this.setState({\n        portArray: _this.state.portArray.concat(pn)\n      });\n\n      portNum++;\n    };\n\n    _this.RemovePorts = function (num, cnum) {\n      var arr = _this.state.portArray;\n\n      _this.props.dispatch(change('createAppFormDefault', 'Ports_' + cnum, null));\n\n      _this.props.dispatch(change('createAppFormDefault', 'Portsselect_' + cnum, null));\n\n      if (arr.length > 0) {\n        arr.splice(num, 1);\n      }\n\n      _this.setState({\n        portArray: arr\n      });\n    };\n\n    _this.receiveResult = function (result) {\n      var arr = [];\n      result.map(function (item, i) {\n        if (item.Type === 'developer') {\n          arr.push(item.Organization);\n        }\n      });\n\n      _this.setState({\n        orgArr: arr\n      });\n    };\n\n    _this.cancelClick = function (e) {\n      e.preventDefault();\n\n      _this.props.gotoUrl();\n    };\n\n    _this.textUpload = function (e) {\n      e.preventDefault();\n      var input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.accept = \"*\";\n\n      input.onchange = function (event) {\n        _this.processFile(event.target.files[0]);\n      };\n\n      input.click();\n    };\n\n    _this.processFile = function (file) {\n      var reader = new FileReader();\n\n      _this.setState({\n        tah: 10\n      });\n\n      reader.onload = function () {\n        _this.props.dispatch(change('createAppFormDefault', 'DeploymentMF', reader.result));\n      };\n\n      reader.readAsText(file,\n      /* optional */\n      \"euc-kr\");\n    };\n\n    _this.textRemove = function (e) {\n      e.preventDefault();\n\n      _this.props.dispatch(change('createAppFormDefault', 'DeploymentMF', ''));\n    };\n\n    _this.state = {\n      typeValue: '',\n      data: null,\n      regKey: null,\n      fieldKeys: null,\n      dataInit: false,\n      portArray: [],\n      orgArr: [],\n      deployAPK: false,\n      deploymentType: false,\n      title: 'Settings',\n      editToggle: false,\n      editDsb: false,\n      tah: 4,\n      submitButton: 'Create'\n    };\n    return _this;\n  } // data.map((dt) => {\n\n\n  _createClass(SiteFourCreateFormAppDefault, [{\n    key: \"handleInitialize\",\n    value: function handleInitialize(data, edit) {\n      var _data = data;\n      var _portArr = [];\n      var _statePort = [];\n\n      if (edit && _data) {\n        _data.DeploymentType == 'docker' ? _data.DeploymentType = 'Docker' : _data.DeploymentType == 'kubernetes' ? _data.DeploymentType = 'Kubernetes' : _data.DeploymentType = 'VM';\n        this.onHandleChange('DeploymentType', _data.DeploymentType);\n\n        if (_data.Ports && _data.Ports != '-') {\n          _portArr = _data.Ports.split(',');\n\n          _portArr.map(function (item, i) {\n            _data['Ports_' + i] = item.split(':')[1];\n            _data['Portsselect_' + i] = item.split(':')[0].toLowerCase() == 'tcp' ? 'TCP' : 'UDP';\n\n            _statePort.push({\n              num: i,\n              name: 'single'\n            });\n\n            portNum++;\n          });\n\n          this.setState({\n            portArray: _statePort\n          });\n        }\n\n        Object.keys(_data).map(function (item) {\n          if (_data[item] == '-') {\n            _data[item] = '';\n          }\n        });\n      }\n\n      if (_data.length) {} else {\n        this.props.initialize(_data);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.data && this.props.data.data.length) {\n        var keys = Object.keys(this.props.data.data[0]);\n        this.setState({\n          data: this.props.data.data[0],\n          regKeys: keys,\n          fieldKeys: this.props.data.keys,\n          pId: this.props.pId\n        });\n\n        if (!this.state.dataInit) {\n          this.handleInitialize(this.props.data.data[0]);\n          this.setState({\n            dataInit: true\n          });\n        }\n      }\n\n      if (this.props.getUserRole == 'AdminManager') {\n        var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n        services.getMCService('showOrg', {\n          token: store ? store.userToken : 'null'\n        }, this.receiveResult);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      portNum = 0;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(\"editmode333\", nextProps.data);\n\n      if (nextProps.data.editMode && nextProps.data.editData && !this.state.editToggle) {\n        console.log(\"nextPropsnextPropsds\", nextProps.data.editData);\n        this.setState({\n          editToggle: true,\n          editDsb: true\n        });\n        this.handleInitialize(nextProps.data.editData, nextProps.data.editMode);\n      }\n\n      if (nextProps.data && nextProps.data.data.length) {\n        var keys = Object.keys(nextProps.data.data[0]);\n        this.setState({\n          data: nextProps.data.data[0],\n          regKeys: keys,\n          fieldKeys: nextProps.data.keys,\n          pId: nextProps.pId\n        }); // submitSucceeded 초기화\n\n        if (this.props.toggleSubmit) {\n          this.props.dispatch(stopSubmit('createAppFormDefault', {}));\n        }\n\n        if (!this.state.dataInit) {\n          this.handleInitialize(nextProps.data.data[0]);\n          this.setState({\n            dataInit: true\n          });\n        }\n      }\n\n      if (nextProps.data.editMode) this.setState({\n        title: 'Update Settings',\n        submitButton: 'Update'\n      });\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(key, pId) {\n      return this.state.fieldKeys && this.state.fieldKeys[pId][key] ? this.state.fieldKeys[pId][key]['label'] : null;\n    }\n  }, {\n    key: \"getNecessary\",\n    value: function getNecessary(key, pId) {\n      return this.state.fieldKeys && this.state.fieldKeys[pId][key] ? this.state.fieldKeys[pId][key]['necessary'] ? ' *' : '' : null;\n    }\n  }, {\n    key: \"onHandleSubmit\",\n    value: function onHandleSubmit() {\n      this.props.handleSubmit();\n    }\n  }, {\n    key: \"onHandleChange\",\n    value: function onHandleChange(key, value) {\n      if (key === 'DeploymentType') {\n        if (value == 'VM') {\n          this.setState({\n            deployAPK: true\n          });\n        } else {\n          this.setState({\n            deployAPK: false\n          });\n        }\n\n        if (value == 'Kubernetes') {\n          this.setState({\n            deploymentType: false\n          });\n        } else {\n          this.setState({\n            deploymentType: true\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          reset = _this$props.reset,\n          dimmer = _this$props.dimmer,\n          selected = _this$props.selected,\n          open = _this$props.open,\n          close = _this$props.close,\n          option = _this$props.option,\n          value = _this$props.value,\n          change = _this$props.change,\n          org = _this$props.org,\n          type = _this$props.type,\n          pId = _this$props.pId,\n          getUserRole = _this$props.getUserRole;\n      var _this$state = this.state,\n          data = _this$state.data,\n          regKeys = _this$state.regKeys,\n          fieldKeys = _this$state.fieldKeys,\n          title = _this$state.title;\n      var cType = type ? type.substring(0, 1).toUpperCase() + type.substring(1) : '';\n      return React.createElement(Item, {\n        className: \"content create-org\",\n        style: {\n          margin: '0 auto',\n          maxWidth: 1200\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, React.createElement(Header, {\n        style: {\n          borderBottom: '1px solid rgba(255,255,255,0.1)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, title), React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: function onSubmit() {\n          return _this2.onHandleSubmit();\n        },\n        className: \"fieldForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        widths: \"equal\",\n        style: {\n          flexDirection: 'column',\n          marginLeft: 10,\n          marginRight: 10,\n          alignContent: 'space-around'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        columns: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, regKeys && regKeys.length > 0 ? regKeys.map(function (key, i) {\n        return _this2.getLabel(key, pId) ? !_this2.state.deploymentType || key !== 'ScaleWithCluster' ? React.createElement(Grid.Row, {\n          columns: 3,\n          key: i,\n          className: 'createApp' + i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 384\n          },\n          __self: this\n        }, React.createElement(Grid.Column, {\n          width: 4,\n          className: \"detail_item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 386\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 387\n          },\n          __self: this\n        }, _this2.getLabel(key, pId), _this2.getNecessary(key, pId))), React.createElement(Grid.Column, {\n          width: 11,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389\n          },\n          __self: this\n        }, fieldKeys[pId][key]['type'] === 'RenderTextArea' ? React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 393\n          },\n          __self: this\n        }, React.createElement(Field, {\n          component: renderTextArea,\n          placeholder: data[key],\n          value: data[key],\n          name: key,\n          row: fieldKeys[pId][key]['label'] === 'Deployment Manifest' ? _this2.state.tah : 4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 394\n          },\n          __self: this\n        }), fieldKeys[pId][key]['label'] === 'Deployment Manifest' ? React.createElement(\"div\", {\n          style: {\n            marginTop: '1em'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 403\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            marginRight: '1em'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404\n          },\n          __self: this\n        }, React.createElement(Button, {\n          positive: true,\n          onClick: _this2.textUpload,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 405\n          },\n          __self: this\n        }, \"Select Manifest\")), React.createElement(Button, {\n          onClick: _this2.textRemove,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 407\n          },\n          __self: this\n        }, \"Clear Manifest\")) : null) : fieldKeys[pId][key]['type'] === 'RenderSelect' ? React.createElement(Field, {\n          component: renderSelect,\n          placeholder: 'Select ' + fieldKeys[pId][key]['label'],\n          value: data[key],\n          options: fieldKeys[pId][key]['items'],\n          name: key,\n          onChange: function onChange(e) {\n            return _this2.onHandleChange(key, e);\n          },\n          disabled: _this2.state.editDsb ? fieldKeys[pId][key].editDisabled : false,\n          error: _this2.props.validError.indexOf(key) !== -1 ? 'Required' : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 414\n          },\n          __self: this\n        }) : fieldKeys[pId][key]['type'] === 'IpSelect' ? React.createElement(Field, {\n          component: renderSelectNumber,\n          placeholder: 'Select IpAccess',\n          value: data[key],\n          options: fieldKeys[pId][key]['items'],\n          name: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 425\n          },\n          __self: this\n        }) : fieldKeys[pId][key]['type'] === 'FlavorSelect' ? React.createElement(Field, {\n          component: renderSelect,\n          placeholder: 'Select Flavor',\n          value: data[key],\n          options: _this2.props.flavorData,\n          name: key,\n          error: _this2.props.validError.indexOf(key) !== -1 ? 'Required' : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 434\n          },\n          __self: this\n        }) : fieldKeys[pId][key]['type'] === 'RegionSelect' ? React.createElement(Field, {\n          component: renderSelect,\n          placeholder: 'Select Region',\n          value: data[key],\n          options: fieldKeys[pId][key]['items'],\n          name: key,\n          disabled: _this2.state.editDsb ? fieldKeys[pId][key].editDisabled : false,\n          onChange: _this2.handleRegionChange,\n          error: _this2.props.validError.indexOf(key) !== -1 ? 'Required' : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 443\n          },\n          __self: this\n        }) : fieldKeys[pId][key]['type'] === 'RenderDT' ? React.createElement(Field, {\n          component: renderInputDpType,\n          placeholder: fieldKeys[pId][key].items,\n          type: \"input\",\n          name: key,\n          value: fieldKeys[pId][key].items,\n          error: _this2.props.validError.indexOf(key) !== -1 ? 'Required' : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 454\n          },\n          __self: this\n        }) : fieldKeys[pId][key]['type'] === 'RenderPath' ? React.createElement(Field, {\n          component: renderInputPathType,\n          placeholder: fieldKeys[pId][key].items,\n          type: \"input\",\n          name: key,\n          value: fieldKeys[pId][key].items ? fieldKeys[pId][key].items : data[key],\n          error: _this2.props.validError.indexOf(key) !== -1 ? 'Required' : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 464\n          },\n          __self: this\n        }) : fieldKeys[pId][key]['type'] === 'RenderCheckbox' ? React.createElement(Field, {\n          component: renderCheckbox,\n          name: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 474\n          },\n          __self: this\n        }) : fieldKeys[pId][key]['type'] === 'RenderInputDisabled' ? getUserRole == 'AdminManager' ? React.createElement(Field, {\n          component: renderSelect,\n          placeholder: 'Select Organization Name',\n          options: _this2.state.orgArr,\n          name: key,\n          disabled: _this2.state.editDsb ? fieldKeys[pId][key].editDisabled : false,\n          error: _this2.props.validError.indexOf(key) !== -1 ? 'Required' : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 481\n          },\n          __self: this\n        }) : React.createElement(Field, {\n          disabled: _this2.state.editDsb ? fieldKeys[pId][key].editDisabled : false,\n          component: renderInputDisabled //placeholder={data[key]}\n          ,\n          type: \"input\",\n          name: key,\n          value: data[key],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489\n          },\n          __self: this\n        }) : fieldKeys[pId][key]['type'] === 'CustomPorts' ? React.createElement(Grid, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 499\n          },\n          __self: this\n        }, _this2.state.portArray.map(function (item, i) {\n          return item.name == 'multi' ? React.createElement(Grid.Row, {\n            key: i,\n            columns: 3,\n            style: {\n              paddingBottom: '0px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 503\n            },\n            __self: this\n          }, React.createElement(Grid.Column, {\n            width: 5,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 504\n            },\n            __self: this\n          }, React.createElement(Field, {\n            component: renderInputNum,\n            type: \"input\",\n            name: 'multiF_' + item.num,\n            value: data[key],\n            error: _this2.props.validError.indexOf(key + '_' + i) !== -1 ? 'Required' : '',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 505\n            },\n            __self: this\n          })), React.createElement(Grid.Column, {\n            width: 1,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 513\n            },\n            __self: this\n          }, React.createElement(\"center\", {\n            style: {\n              lineHeight: '35px',\n              fontSize: '18px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 514\n            },\n            __self: this\n          }, \"~\")), React.createElement(Grid.Column, {\n            width: 5,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 516\n            },\n            __self: this\n          }, React.createElement(Field, {\n            component: renderInputNum,\n            type: \"input\",\n            name: 'multiS_' + item.num,\n            value: data[key],\n            error: _this2.props.validError.indexOf(key + '_' + i) !== -1 ? 'Required' : '',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 517\n            },\n            __self: this\n          })), React.createElement(Grid.Column, {\n            width: 4,\n            style: {\n              padding: 0\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 525\n            },\n            __self: this\n          }, React.createElement(Field, {\n            component: renderSelect,\n            placeholder: 'Select port',\n            value: data[key],\n            options: ['TCP', 'UDP'],\n            name: key + 'select_' + item.num,\n            error: _this2.props.validError.indexOf(key + 'select_' + i) !== -1 ? 'Required' : '',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 526\n            },\n            __self: this\n          })), React.createElement(Grid.Column, {\n            width: 1,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 535\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"removePorts\",\n            onClick: function onClick() {\n              return _this2.RemovePorts(i, item.num);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 536\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"material-icons\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 536\n            },\n            __self: this\n          }, \"clear\")))) : React.createElement(Grid.Row, {\n            key: i,\n            columns: 3,\n            style: {\n              paddingBottom: '0px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 540\n            },\n            __self: this\n          }, React.createElement(Grid.Column, {\n            width: 11,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 541\n            },\n            __self: this\n          }, React.createElement(Field, {\n            component: renderInputNum,\n            type: \"input\",\n            name: key + '_' + item.num,\n            value: data[key],\n            error: _this2.props.validError.indexOf(key + '_' + i) !== -1 ? 'Required' : '',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 542\n            },\n            __self: this\n          })), React.createElement(Grid.Column, {\n            width: 4,\n            style: {\n              padding: 0\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 550\n            },\n            __self: this\n          }, React.createElement(Field, {\n            component: renderSelect,\n            placeholder: 'Select port',\n            value: data[key],\n            options: ['TCP', 'UDP'],\n            name: key + 'select_' + item.num,\n            error: _this2.props.validError.indexOf(key + 'select_' + i) !== -1 ? 'Required' : '',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 551\n            },\n            __self: this\n          })), React.createElement(Grid.Column, {\n            width: 1,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 560\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"removePorts\",\n            onClick: function onClick() {\n              return _this2.RemovePorts(i, item.num);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 561\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"material-icons\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 561\n            },\n            __self: this\n          }, \"clear\"))));\n        }), React.createElement(Grid.Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 566\n          },\n          __self: this\n        }, React.createElement(Grid.Column, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 567\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            marginRight: '1em'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 568\n          },\n          __self: this\n        }, React.createElement(Button, {\n          positive: true,\n          onClick: _this2.AddPorts,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 569\n          },\n          __self: this\n        }, \"Add Port Mapping\")), React.createElement(Button, {\n          positive: true,\n          onClick: _this2.AddMultiPorts,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 571\n          },\n          __self: this\n        }, \"Add MultiPort Mapping\")))) : fieldKeys[pId][key]['type'] === 'RenderInputApp' ? React.createElement(Field, {\n          component: renderInputApp,\n          type: \"input\",\n          name: key,\n          value: data[key],\n          disabled: _this2.state.editDsb ? fieldKeys[pId][key].editDisabled : false,\n          error: _this2.props.validError.indexOf(key) !== -1 ? 'Required' : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 578\n          },\n          __self: this\n        }) : React.createElement(Field, {\n          component: renderInput,\n          type: \"input\",\n          name: key,\n          value: data[key],\n          disabled: _this2.state.editDsb ? fieldKeys[pId][key].editDisabled : false,\n          error: _this2.props.validError.indexOf(key) !== -1 ? 'Required' : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 586\n          },\n          __self: this\n        })), React.createElement(Grid.Column, {\n          width: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 596\n          },\n          __self: this\n        }, fieldKeys[pId][key] && fieldKeys[pId][key]['tip'] ? _this2.getHelpPopup(fieldKeys[pId][key]['tip']) : null)) : null : null;\n      }) : '')), React.createElement(Form.Group, {\n        className: \"submitButtonGroup orgButton\",\n        id: \"submitButtonGroup\",\n        inline: true,\n        style: {\n          flexDirection: 'row',\n          marginLeft: 10,\n          marginRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          marginRight: '1em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.cancelClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611\n        },\n        __self: this\n      }, \"Cancel\")), React.createElement(Button, {\n        primary: true,\n        positive: true,\n        icon: \"checkmark\",\n        labelPosition: \"right\",\n        content: this.state.submitButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return SiteFourCreateFormAppDefault;\n}(React.Component);\n\n;\nexport default reduxForm({\n  form: \"createAppFormDefault\" // validate\n  // enableReinitialize: true\n\n})(SiteFourCreateFormAppDefault);","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/siteFourCreateFormAppDefault.js"],"names":["React","Fragment","Button","Form","Table","List","Grid","Card","Header","Divider","Tab","Item","Popup","Icon","Input","Checkbox","Field","reduxForm","initialize","reset","stopSubmit","change","MaterialIcon","services","portNum","makeOption","options","map","value","key","text","toUpperCase","makeOptionNumber","i","renderSelect","input","label","placeholder","error","disabled","name","e","onChange","renderSelectNumber","field","renderTextArea","row","renderInput","type","renderInputNum","regexp","test","renderInputDisabled","renderInputDpType","renderInputPathType","renderInputApp","reg","renderCheckbox","height","paddingTop","checked","style","borderRadius","opacity","padding","SiteFourCreateFormAppDefault","props","getHelpPopup","lineHeight","margin","handleRegionChange","getOptionData","AddPorts","preventDefault","pn","num","setState","portArray","state","concat","AddMultiPorts","RemovePorts","cnum","arr","dispatch","length","splice","receiveResult","result","item","Type","push","Organization","orgArr","cancelClick","gotoUrl","textUpload","document","createElement","accept","onchange","event","processFile","target","files","click","file","reader","FileReader","tah","onload","readAsText","textRemove","typeValue","data","regKey","fieldKeys","dataInit","deployAPK","deploymentType","title","editToggle","editDsb","submitButton","edit","_data","_portArr","_statePort","DeploymentType","onHandleChange","Ports","split","toLowerCase","Object","keys","regKeys","pId","handleInitialize","getUserRole","store","localStorage","PROJECT_INIT","JSON","parse","getMCService","token","userToken","nextProps","console","log","editMode","editData","toggleSubmit","handleSubmit","dimmer","selected","open","close","option","org","cType","substring","maxWidth","borderBottom","onHandleSubmit","flexDirection","marginLeft","marginRight","alignContent","getLabel","getNecessary","marginTop","editDisabled","validError","indexOf","flavorData","items","paddingBottom","fontSize","Component","form"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\n\nimport {Button, Form, Table, List, Grid, Card, Header, Divider, Tab, Item, Popup, Icon, Input, Checkbox} from \"semantic-ui-react\";\n\nimport { Field, reduxForm, initialize, reset, stopSubmit, change } from \"redux-form\";\nimport MaterialIcon from \"material-icons-react\";\nimport * as services from '../services/service_compute_service';\nimport './styles.css';\n\nlet portNum = 0;\n\nconst makeOption =(options)=> (\n    options.map((value) =>(\n        {key:value, text:(value == 'tcp' || value == 'udp')? value.toUpperCase() : value, value:value}\n    ))\n)\n\nconst makeOptionNumber =(options)=> (\n    options.map((value,i) =>(\n        {key:i, text:value, value:i}\n    ))\n)\n\nconst renderSelect = ({ input, label, options, placeholder, error, disabled}) => (\n    <div>\n        <Form.Select\n            label={label}\n            name={input.name}\n            onChange={(e, { value }) => input.onChange(value)}\n            options={makeOption(options)}\n            placeholder={placeholder}\n            value={input.value}\n            disabled={disabled}\n        />\n        {error && <span className=\"text-danger\">{error}</span>}\n    </div>\n);\n\nconst renderSelectNumber = field => (\n    <Form.Select\n        label={field.label}\n        name={field.input.name}\n        onChange={(e, { value }) => field.input.onChange(value)}\n        options={makeOptionNumber(field.options)}\n        placeholder={field.placeholder}\n        value={field.input.value}\n    />\n);\n\nconst renderTextArea = field => (\n    <Form.TextArea\n        {...field.input}\n        label={field.label}\n        rows={field.row}\n        // placeholder={field.placeholder}\n    />\n);\n\nconst renderInput = ({ input, placeholder, label, type, error, disabled}) => (\n    <div>\n        <Form.Input\n            {...input}\n            type={type}\n            label={label}\n            // placeholder={placeholder}\n            disabled={disabled}\n        />\n        {error && <span className=\"text-danger\">{error}</span>}\n    </div>\n\n);\nconst renderInputNum = ({ input, placeholder, label, type, error, disabled}) => (\n    <div>\n        <Form.Input\n            {...input}\n            type={type}\n            label={label}\n            disabled={disabled}\n            onChange={(e, { value }) => {\n                let regexp = /[^0-9]/g\n                if(!regexp.test(value)){\n                    input.onChange(value)\n                }\n\n            }}\n        />\n        {error && <span className=\"text-danger\">{error}</span>}\n    </div>\n\n);\nconst renderInputDisabled = field => (\n    <Form.Input\n        {...field.input}\n        type={field.type}\n        label={field.label}\n        placeholder={field.placeholder}\n        disabled\n    />\n);\n\nconst renderInputDpType = field => (\n    <Form.Input\n        {...field.input}\n        type={field.type}\n        label={field.label}\n        value={field.placeholder}\n        disabled\n    />\n);\n\nconst renderInputPathType = field => (\n    <Form.Input\n        {...field.input}\n        type={field.type}\n        label={field.label}\n        value={field.placeholder}\n    />\n);\n\nconst renderInputApp = field => (\n    <div>\n        <Form.Input\n            {...field.input}\n            type={field.type}\n            label={field.label}\n            placeholder={'Please use numbers and English letters only'}\n            onChange={(e, { value }) => {\n                const reg = /^[0-9a-zA-Z_][-0-9a-zA-Z_]*/;\n                if(reg.test(value) || value == ''){\n                    field.input.onChange(value)\n                }\n            }}\n            disabled={field.disabled}\n        />\n        {field.error && <span className=\"text-danger\">{field.error}</span>}\n    </div>\n);\n\nconst renderCheckbox = field => (\n    <Form.Checkbox toggle\n                   style={{height:'33px', paddingTop:'8px'}}\n                   checked={!!field.input.value}\n                   name={field.input.name}\n                   label={field.label}\n                   onChange={(e, { checked }) => field.input.onChange(checked)}\n    />\n);\n\nconst style = {\n    borderRadius: 0,\n    opacity: 0.7,\n    padding:'2em'\n}\n\nclass SiteFourCreateFormAppDefault extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            typeValue:'',\n            data:null,\n            regKey:null,\n            fieldKeys:null,\n            dataInit:false,\n            portArray:[],\n            orgArr:[],\n            deployAPK:false,\n            deploymentType:false,\n            title:'Settings',\n            editToggle:false,\n            editDsb:false,\n            tah:4,\n            submitButton:'Create'\n        };\n\n    }\n\n    // data.map((dt) => {\n    handleInitialize(data,edit) {\n        let _data = data;\n        let _portArr = [];\n        let _statePort = [];\n        if(edit && _data){\n            (_data.DeploymentType == 'docker')?_data.DeploymentType = 'Docker':\n                (_data.DeploymentType == 'kubernetes')?_data.DeploymentType = 'Kubernetes':\n                    _data.DeploymentType = 'VM'\n            this.onHandleChange('DeploymentType',_data.DeploymentType);\n            if(_data.Ports && _data.Ports != '-'){\n                _portArr = _data.Ports.split(',')\n                _portArr.map((item,i) => {\n                    _data['Ports_'+i] = item.split(':')[1];\n                    _data['Portsselect_'+i] = (item.split(':')[0].toLowerCase() =='tcp')?'TCP':'UDP';\n                    _statePort.push({\n                        num:i,\n                        name:'single'\n                    });\n                    portNum++;\n                })\n                this.setState({portArray:_statePort});\n            }\n            Object.keys(_data).map((item) => {\n                if(_data[item] == '-'){\n                    _data[item] = '';\n                }\n            })\n        }\n        if(_data.length){\n\n        } else {\n            this.props.initialize(_data);\n        }\n\n    }\n\n\n    componentDidMount() {\n        if(this.props.data && this.props.data.data.length){\n            let keys = Object.keys(this.props.data.data[0])\n            this.setState({data:this.props.data.data[0], regKeys:keys, fieldKeys:this.props.data.keys, pId:this.props.pId})\n            if(!this.state.dataInit){\n                this.handleInitialize(this.props.data.data[0]);\n                this.setState({dataInit:true})\n            }\n        }\n        if(this.props.getUserRole == 'AdminManager') {\n            let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n            services.getMCService('showOrg',{token:store ? store.userToken : 'null'}, this.receiveResult)\n        }\n    }\n\n    componentWillUnmount() {\n        portNum = 0;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log(\"editmode333\",nextProps.data)\n        if(nextProps.data.editMode && nextProps.data.editData && !this.state.editToggle){\n            console.log(\"nextPropsnextPropsds\",nextProps.data.editData)\n            this.setState({editToggle:true, editDsb:true});\n            this.handleInitialize(nextProps.data.editData,nextProps.data.editMode);\n        }\n        if(nextProps.data && nextProps.data.data.length){\n            let keys = Object.keys(nextProps.data.data[0])\n            this.setState({data:nextProps.data.data[0], regKeys:keys, fieldKeys:nextProps.data.keys, pId:nextProps.pId})\n            // submitSucceeded 초기화\n            if(this.props.toggleSubmit) {\n                this.props.dispatch(stopSubmit('createAppFormDefault',{}))\n            }\n\n            if(!this.state.dataInit){\n                this.handleInitialize(nextProps.data.data[0]);\n                this.setState({dataInit:true})\n            }\n        }\n        if(nextProps.data.editMode) this.setState({title:'Update Settings',submitButton:'Update'})\n\n    }\n\n    getLabel (key, pId) {\n        return (this.state.fieldKeys && this.state.fieldKeys[pId][key]) ? this.state.fieldKeys[pId][key]['label'] : null\n    }\n    getNecessary (key, pId) {\n        return (this.state.fieldKeys && this.state.fieldKeys[pId][key]) ? this.state.fieldKeys[pId][key]['necessary'] ? ' *':'' : null\n    }\n\n    getHelpPopup =(value)=> (\n        <Popup\n            trigger={<Icon name='question circle outline' size='large' style={{lineHeight:'unset', margin:'10px 0'}} />}\n            content={value}\n            style={style}\n            inverted\n        />\n    )\n    onHandleSubmit() {\n        this.props.handleSubmit();\n    }\n\n    handleRegionChange = (e) => {\n        this.props.getOptionData(e)\n        //this.props.dispatch(reset('createAppFormDefault'));\n    }\n\n    AddPorts = (e) => {\n        e.preventDefault();\n        let pn = {\n            num:portNum,\n            name:'single'\n        }\n        this.setState({portArray:this.state.portArray.concat(pn)})\n        portNum++;\n    }\n    AddMultiPorts = (e) => {\n        e.preventDefault();\n        let pn = {\n            num:portNum,\n            name:'multi'\n        }\n        this.setState({portArray:this.state.portArray.concat(pn)})\n        portNum++;\n    }\n    RemovePorts = (num,cnum) => {\n        let arr = this.state.portArray;\n        this.props.dispatch(change('createAppFormDefault', 'Ports_'+cnum, null));\n        this.props.dispatch(change('createAppFormDefault', 'Portsselect_'+cnum, null));\n        if(arr.length > 0) {\n            arr.splice(num, 1)\n        }\n        this.setState({portArray:arr});\n    }\n    receiveResult = (result) => {\n        let arr = [];\n        result.map((item,i) => {\n            if(item.Type === 'developer'){\n                arr.push(item.Organization);\n            }\n        })\n        this.setState({orgArr:arr});\n    }\n\n    cancelClick = (e) => {\n        e.preventDefault();\n        this.props.gotoUrl()\n    }\n\n    onHandleChange(key,value){\n        if(key === 'DeploymentType') {\n            if(value == 'VM') {\n                this.setState({deployAPK:true})\n            } else {\n                this.setState({deployAPK:false})\n            }\n\n            if(value == 'Kubernetes') {\n                this.setState({deploymentType:false})\n            } else {\n                this.setState({deploymentType:true})\n            }\n        }\n    }\n\n    textUpload = (e) => {\n        e.preventDefault();\n        let input = document.createElement(\"input\");\n        input.type = \"file\";\n        input.accept = \"*\";\n        input.onchange = (event) => {\n            this.processFile(event.target.files[0]);\n        };\n        input.click();\n    }\n\n    processFile = (file) => {\n        let reader = new FileReader();\n        this.setState({tah:10});\n        reader.onload = () => {\n            this.props.dispatch(change('createAppFormDefault', 'DeploymentMF', reader.result));\n        };\n\n        reader.readAsText(file, /* optional */ \"euc-kr\");\n    }\n\n    textRemove = (e) => {\n        e.preventDefault();\n        this.props.dispatch(change('createAppFormDefault', 'DeploymentMF', ''));\n    }\n\n    render (){\n        const { handleSubmit, reset, dimmer, selected, open, close, option, value, change, org, type, pId, getUserRole } = this.props;\n        const { data, regKeys, fieldKeys, title } = this.state;\n        let cType = (type)?type.substring(0,1).toUpperCase() + type.substring(1):'';\n        return (\n\n            <Item className='content create-org' style={{margin:'0 auto', maxWidth:1200}}>\n                <Header style={{borderBottom:'1px solid rgba(255,255,255,0.1)'}}>{title}</Header>\n                <Fragment >\n                    <Form onSubmit={() => this.onHandleSubmit()} className={\"fieldForm\"} >\n                        <Form.Group widths=\"equal\" style={{flexDirection:'column', marginLeft:10, marginRight:10, alignContent:'space-around'}}>\n                            <Grid columns={2}>\n                                {\n                                    (regKeys && regKeys.length > 0) ?\n                                        regKeys.map((key, i) => (\n\n                                            (this.getLabel(key, pId))?\n                                                (!this.state.deploymentType || key !== 'ScaleWithCluster')?\n                                                    <Grid.Row columns={3} key={i} className={'createApp'+i}>\n\n                                                        <Grid.Column width={4} className='detail_item'>\n                                                            <div>{this.getLabel(key, pId)}{this.getNecessary(key, pId)}</div>\n                                                        </Grid.Column>\n                                                        <Grid.Column width={11}>\n                                                            {\n\n                                                                (fieldKeys[pId][key]['type'] === 'RenderTextArea') ?\n                                                                    <div>\n                                                                        <Field\n                                                                            component={renderTextArea}\n                                                                            placeholder={data[key]}\n                                                                            value={data[key]}\n                                                                            name={key}\n                                                                            row={(fieldKeys[pId][key]['label'] === 'Deployment Manifest') ?this.state.tah:4}\n                                                                        />\n                                                                        {\n                                                                            (fieldKeys[pId][key]['label'] === 'Deployment Manifest') ?\n                                                                                <div style={{marginTop:'1em'}}>\n                                                                        <span style={{marginRight:'1em'}}>\n                                                                            <Button positive onClick={this.textUpload}>Select Manifest</Button>\n                                                                        </span>\n                                                                                    <Button onClick={this.textRemove}>Clear Manifest</Button>\n                                                                                </div>\n                                                                                :null\n                                                                        }\n                                                                    </div>\n                                                                    :\n                                                                    (fieldKeys[pId][key]['type'] === 'RenderSelect') ?\n                                                                        <Field\n                                                                            component={renderSelect}\n                                                                            placeholder={'Select '+fieldKeys[pId][key]['label']}\n                                                                            value={data[key]}\n                                                                            options={fieldKeys[pId][key]['items']}\n                                                                            name={key}\n                                                                            onChange={(e)=>this.onHandleChange(key,e)}\n                                                                            disabled={(this.state.editDsb)?fieldKeys[pId][key].editDisabled:false}\n                                                                            error={(this.props.validError.indexOf(key) !== -1)?'Required':''}/>\n                                                                        :\n                                                                        (fieldKeys[pId][key]['type'] === 'IpSelect') ?\n                                                                            <Field\n                                                                                component={renderSelectNumber}\n                                                                                placeholder={'Select IpAccess'}\n                                                                                value={data[key]}\n                                                                                options={fieldKeys[pId][key]['items']}\n                                                                                name={key}\n                                                                            />\n                                                                            :\n                                                                            (fieldKeys[pId][key]['type'] === 'FlavorSelect') ?\n                                                                                <Field\n                                                                                    component={renderSelect}\n                                                                                    placeholder={'Select Flavor'}\n                                                                                    value={data[key]}\n                                                                                    options={this.props.flavorData}\n                                                                                    name={key}\n                                                                                    error={(this.props.validError.indexOf(key) !== -1)?'Required':''}/>\n                                                                                :\n                                                                                (fieldKeys[pId][key]['type'] === 'RegionSelect') ?\n                                                                                    <Field\n                                                                                        component={renderSelect}\n                                                                                        placeholder={'Select Region'}\n                                                                                        value={data[key]}\n                                                                                        options={fieldKeys[pId][key]['items']}\n                                                                                        name={key}\n                                                                                        disabled={(this.state.editDsb)?fieldKeys[pId][key].editDisabled:false}\n                                                                                        onChange={this.handleRegionChange}\n                                                                                        error={(this.props.validError.indexOf(key) !== -1)?'Required':''}/>\n                                                                                    :\n                                                                                    (fieldKeys[pId][key]['type'] === 'RenderDT') ?\n                                                                                        <Field\n                                                                                            component={renderInputDpType}\n                                                                                            placeholder={fieldKeys[pId][key].items}\n                                                                                            type=\"input\"\n                                                                                            name={key}\n                                                                                            value={fieldKeys[pId][key].items}\n                                                                                            error={(this.props.validError.indexOf(key) !== -1)?'Required':''}\n                                                                                        />\n                                                                                        :\n                                                                                        (fieldKeys[pId][key]['type'] === 'RenderPath') ?\n                                                                                            <Field\n                                                                                                component={renderInputPathType}\n                                                                                                placeholder={fieldKeys[pId][key].items}\n                                                                                                type=\"input\"\n                                                                                                name={key}\n                                                                                                value={(fieldKeys[pId][key].items)?fieldKeys[pId][key].items:data[key]}\n                                                                                                error={(this.props.validError.indexOf(key) !== -1)?'Required':''}\n                                                                                            />\n                                                                                            :\n                                                                                            (fieldKeys[pId][key]['type'] === 'RenderCheckbox') ?\n                                                                                                <Field\n                                                                                                    component={renderCheckbox}\n                                                                                                    name={key}\n                                                                                                />\n                                                                                                :\n                                                                                                (fieldKeys[pId][key]['type'] === 'RenderInputDisabled') ?\n                                                                                                    (getUserRole == 'AdminManager') ?\n                                                                                                        <Field\n                                                                                                            component={renderSelect}\n                                                                                                            placeholder={'Select Organization Name'}\n                                                                                                            options={this.state.orgArr}\n                                                                                                            name={key}\n                                                                                                            disabled={(this.state.editDsb)?fieldKeys[pId][key].editDisabled:false}\n                                                                                                            error={(this.props.validError.indexOf(key) !== -1)?'Required':''}/>\n                                                                                                        :\n                                                                                                        <Field\n                                                                                                            disabled={(this.state.editDsb)?fieldKeys[pId][key].editDisabled:false}\n                                                                                                            component={renderInputDisabled}\n                                                                                                            //placeholder={data[key]}\n                                                                                                            type=\"input\"\n                                                                                                            name={key}\n                                                                                                            value={data[key]}\n                                                                                                        />\n                                                                                                    :\n                                                                                                    (fieldKeys[pId][key]['type'] === 'CustomPorts') ?\n                                                                                                        <Grid>\n                                                                                                            {\n                                                                                                                this.state.portArray.map((item,i) => (\n                                                                                                                    (item.name == 'multi')?\n                                                                                                                        <Grid.Row key={i} columns={3} style={{paddingBottom:'0px'}}>\n                                                                                                                            <Grid.Column width={5}>\n                                                                                                                                <Field\n                                                                                                                                    component={renderInputNum}\n                                                                                                                                    type=\"input\"\n                                                                                                                                    name={'multiF_'+item.num}\n                                                                                                                                    value={data[key]}\n                                                                                                                                    error={(this.props.validError.indexOf(key+'_'+i) !== -1)?'Required':''}\n                                                                                                                                />\n                                                                                                                            </Grid.Column>\n                                                                                                                            <Grid.Column width={1}>\n                                                                                                                                <center style={{lineHeight:'35px',fontSize:'18px'}}>~</center>\n                                                                                                                            </Grid.Column>\n                                                                                                                            <Grid.Column width={5}>\n                                                                                                                                <Field\n                                                                                                                                    component={renderInputNum}\n                                                                                                                                    type=\"input\"\n                                                                                                                                    name={'multiS_'+item.num}\n                                                                                                                                    value={data[key]}\n                                                                                                                                    error={(this.props.validError.indexOf(key+'_'+i) !== -1)?'Required':''}\n                                                                                                                                />\n                                                                                                                            </Grid.Column>\n                                                                                                                            <Grid.Column width={4} style={{padding:0}}>\n                                                                                                                                <Field\n                                                                                                                                    component={renderSelect}\n                                                                                                                                    placeholder={'Select port'}\n                                                                                                                                    value={data[key]}\n                                                                                                                                    options={['TCP','UDP']}\n                                                                                                                                    name={key+'select_'+item.num}\n                                                                                                                                    error={(this.props.validError.indexOf(key+'select_'+i) !== -1)?'Required':''}\n                                                                                                                                />\n                                                                                                                            </Grid.Column>\n                                                                                                                            <Grid.Column width={1}>\n                                                                                                                                <div className='removePorts' onClick={() => this.RemovePorts(i,item.num)}><i className=\"material-icons\">clear</i></div>\n                                                                                                                            </Grid.Column>\n                                                                                                                        </Grid.Row>\n                                                                                                                        :\n                                                                                                                        <Grid.Row key={i} columns={3} style={{paddingBottom:'0px'}}>\n                                                                                                                            <Grid.Column width={11}>\n                                                                                                                                <Field\n                                                                                                                                    component={renderInputNum}\n                                                                                                                                    type=\"input\"\n                                                                                                                                    name={key+'_'+item.num}\n                                                                                                                                    value={data[key]}\n                                                                                                                                    error={(this.props.validError.indexOf(key+'_'+i) !== -1)?'Required':''}\n                                                                                                                                />\n                                                                                                                            </Grid.Column>\n                                                                                                                            <Grid.Column width={4} style={{padding:0}}>\n                                                                                                                                <Field\n                                                                                                                                    component={renderSelect}\n                                                                                                                                    placeholder={'Select port'}\n                                                                                                                                    value={data[key]}\n                                                                                                                                    options={['TCP','UDP']}\n                                                                                                                                    name={key+'select_'+item.num}\n                                                                                                                                    error={(this.props.validError.indexOf(key+'select_'+i) !== -1)?'Required':''}\n                                                                                                                                />\n                                                                                                                            </Grid.Column>\n                                                                                                                            <Grid.Column width={1}>\n                                                                                                                                <div className='removePorts' onClick={() => this.RemovePorts(i,item.num)}><i className=\"material-icons\">clear</i></div>\n                                                                                                                            </Grid.Column>\n                                                                                                                        </Grid.Row>\n                                                                                                                ))\n                                                                                                            }\n                                                                                                            <Grid.Row>\n                                                                                                                <Grid.Column>\n                                                                        <span style={{marginRight:'1em'}}>\n                                                                            <Button positive onClick={this.AddPorts}>Add Port Mapping</Button>\n                                                                        </span>\n                                                                                                                    <Button positive onClick={this.AddMultiPorts}>Add MultiPort Mapping</Button>\n                                                                                                                    {/*<div className=\"addPortMapping\" onClick={this.AddPorts}>+ Add Port Mapping</div>*/}\n                                                                                                                </Grid.Column>\n                                                                                                            </Grid.Row>\n                                                                                                        </Grid>\n                                                                                                        :\n                                                                                                        (fieldKeys[pId][key]['type'] === 'RenderInputApp') ?\n                                                                                                            <Field\n                                                                                                                component={renderInputApp}\n                                                                                                                type=\"input\"\n                                                                                                                name={key}\n                                                                                                                value={data[key]}\n                                                                                                                disabled={(this.state.editDsb)?fieldKeys[pId][key].editDisabled:false}\n                                                                                                                error={(this.props.validError.indexOf(key) !== -1)?'Required':''}/>\n                                                                                                            :\n                                                                                                            <Field\n                                                                                                                component={renderInput}\n                                                                                                                type=\"input\"\n                                                                                                                name={key}\n                                                                                                                value={data[key]}\n                                                                                                                disabled={(this.state.editDsb)?fieldKeys[pId][key].editDisabled:false}\n                                                                                                                error={(this.props.validError.indexOf(key) !== -1)?'Required':''}\n                                                                                                            />\n                                                            }\n                                                        </Grid.Column>\n                                                        <Grid.Column width={1}>\n                                                            {(fieldKeys[pId][key] && fieldKeys[pId][key]['tip']) ? this.getHelpPopup(fieldKeys[pId][key]['tip']):null}\n                                                        </Grid.Column>\n                                                    </Grid.Row>\n                                                    : null\n                                                : null\n                                        ))\n                                        : ''\n                                }\n                            </Grid>\n                        </Form.Group>\n                        <Form.Group className={\"submitButtonGroup orgButton\"} id={\"submitButtonGroup\"} inline style={{flexDirection:'row', marginLeft:10, marginRight:10}}>\n                            <Form.Group inline>\n                                {/*<Button onClick={()=>this.onHandleReset()}>Reset</Button>*/}\n                                <span style={{marginRight:'1em'}}>\n                                    <Button onClick={this.cancelClick}>\n                                        Cancel\n                                    </Button>\n                                </span>\n                                <Button\n                                    primary\n                                    positive\n                                    icon='checkmark'\n                                    labelPosition='right'\n                                    content={this.state.submitButton}\n                                />\n                            </Form.Group>\n\n                        </Form.Group>\n                    </Form>\n                </Fragment>\n            </Item>\n        )\n\n    }\n};\n\nexport default reduxForm({\n    form: \"createAppFormDefault\",\n    // validate\n    // enableReinitialize: true\n})(SiteFourCreateFormAppDefault);\n"]},"metadata":{},"sourceType":"module"}