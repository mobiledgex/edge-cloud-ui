{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/components/networkTcpUdpView.js\";\nimport React from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport NetworkTrafficIO from './networkTrafficIO';\nimport NetworkTrafficIOLabel from './networkTrafficIOLabel';\nvar leftRows = [{\n  label: 'Cluster-A:1001',\n  in: 1231,\n  out: 1342\n}, {\n  label: 'Cluster-A:1002',\n  in: 956,\n  out: 864\n}, {\n  label: 'Cluster-B:2601',\n  in: 758,\n  out: 711\n}, {\n  label: 'Cluster-D:3023',\n  in: 321,\n  out: 386\n}, {\n  label: 'Cluster-E:5001',\n  in: 95,\n  out: 72\n}];\n\nvar NetworkTcpUdpView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NetworkTcpUdpView, _React$Component);\n\n  function NetworkTcpUdpView() {\n    var _this;\n\n    _classCallCheck(this, NetworkTcpUdpView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NetworkTcpUdpView).call(this));\n\n    _this.makeRow = function (item, i) {\n      return React.createElement(Grid.Row, {\n        key: 'itm_' + i,\n        columns: 3,\n        className: \"traffic_list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(NetworkTrafficIO, {\n        cId: \"In\",\n        direction: \"reverse\",\n        gId: i,\n        data: item.in,\n        maxData: _this.state.maxInData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(NetworkTrafficIOLabel, {\n        data: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(NetworkTrafficIO, {\n        cId: \"Out\",\n        direction: \"normal\",\n        gId: i,\n        data: item.out,\n        maxData: _this.state.maxOutData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })));\n    };\n\n    _this.state = {\n      trafficData: [],\n      maxInData: null,\n      maxOutData: null\n    };\n    return _this;\n  }\n\n  _createClass(NetworkTcpUdpView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// if(leftRows) {\n      //     let inArray = [];\n      //     let outArray = [];\n      //     leftRows.map((obj, i) => {\n      //         inArray.push(obj.in);\n      //         outArray.push(obj.out);\n      //     })\n      //     this.setState({maxInData:Math.max(...inArray), maxOutData:Math.max(...outArray)})\n      //     let self = this;\n      //     setTimeout(()=>self.setState({trafficData:leftRows}),500);\n      // }\n      //\n      //\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      //{clusterName:'',tcp:{tcpConns:'', tcpRetrans:''}, udp:{udpRecv:'', udpRecvErr:'', udpSend:''}};\n      var inArray = [];\n      var outArray = [];\n      var netType = nextProps.activeIndex;\n      var _inoutData = [];\n\n      if (nextProps.listData.length) {\n        nextProps.listData.map(function (obj, i) {\n          var item = {\n            label: '',\n            in: 0.00,\n            out: 0.00\n          };\n\n          if (netType === 'tcp') {\n            outArray.push(obj.tcp.tcpConns);\n            inArray.push(obj.tcp.tcpRetrans);\n            item.label = obj.clusterName;\n            item.out = obj.tcp.tcpConns;\n            item.in = obj.tcp.tcpRetrans;\n          } else {\n            outArray.push(obj.udp.udpRecv);\n            inArray.push(obj.udp.udpRecvErr);\n            item.label = obj.clusterName;\n            item.out = obj.udp.udpRecv;\n            item.in = obj.udp.udpSend;\n          }\n\n          _inoutData.push(item);\n        });\n      } //console.log('activeIndex activeIndex activeIndex activeIndex---', nextProps.activeIndex, inArray, outArray)\n\n\n      this.setState({\n        maxInData: Math.max.apply(Math, inArray),\n        maxOutData: Math.max.apply(Math, outArray)\n      });\n      var self = this;\n      setTimeout(function () {\n        return self.setState({\n          trafficData: _inoutData\n        });\n      }, 500);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        columns: 3,\n        className: \"panel_sub_title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Input\"), React.createElement(Grid.Column, {\n        width: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Output\")), this.state.trafficData.length > 0 ? this.state.trafficData.map(function (item, i) {\n        return _this2.makeRow(item, i);\n      }) : null);\n    }\n  }]);\n\n  return NetworkTcpUdpView;\n}(React.Component);\n\nexport { NetworkTcpUdpView as default };","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/components/networkTcpUdpView.js"],"names":["React","Grid","NetworkTrafficIO","NetworkTrafficIOLabel","leftRows","label","in","out","NetworkTcpUdpView","makeRow","item","i","state","maxInData","maxOutData","trafficData","nextProps","nextContext","inArray","outArray","netType","activeIndex","_inoutData","listData","length","map","obj","push","tcp","tcpConns","tcpRetrans","clusterName","udp","udpRecv","udpRecvErr","udpSend","setState","Math","max","self","setTimeout","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport NetworkTrafficIO from './networkTrafficIO';\nimport NetworkTrafficIOLabel from './networkTrafficIOLabel';\n\n\nconst leftRows = [\n    {label:'Cluster-A:1001', in:1231, out:1342},\n    {label:'Cluster-A:1002', in:956, out:864},\n    {label:'Cluster-B:2601', in:758, out:711},\n    {label:'Cluster-D:3023', in:321, out:386},\n    {label:'Cluster-E:5001', in:95, out:72}\n    ]\nexport default class NetworkTcpUdpView extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            trafficData: [],\n            maxInData:null,\n            maxOutData:null\n        }\n    }\n    componentDidMount() {\n        // if(leftRows) {\n        //     let inArray = [];\n        //     let outArray = [];\n        //     leftRows.map((obj, i) => {\n        //         inArray.push(obj.in);\n        //         outArray.push(obj.out);\n        //     })\n        //     this.setState({maxInData:Math.max(...inArray), maxOutData:Math.max(...outArray)})\n        //     let self = this;\n        //     setTimeout(()=>self.setState({trafficData:leftRows}),500);\n        // }\n\n        //\n\n\n        //\n\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n\n        //{clusterName:'',tcp:{tcpConns:'', tcpRetrans:''}, udp:{udpRecv:'', udpRecvErr:'', udpSend:''}};\n        let inArray = [];\n        let outArray = [];\n\n        let netType = nextProps.activeIndex;\n\n        let _inoutData = []\n        if(nextProps.listData.length) {\n            nextProps.listData.map((obj, i) => {\n                let item = {label:'', in:0.00, out:0.00};\n                if(netType === 'tcp'){\n                    outArray.push(obj.tcp.tcpConns);\n                    inArray.push(obj.tcp.tcpRetrans);\n\n                    item.label = obj.clusterName;\n                    item.out = obj.tcp.tcpConns;\n                    item.in = obj.tcp.tcpRetrans;\n                } else {\n                    outArray.push(obj.udp.udpRecv);\n                    inArray.push(obj.udp.udpRecvErr);\n\n                    item.label = obj.clusterName;\n                    item.out = obj.udp.udpRecv;\n                    item.in = obj.udp.udpSend;\n                }\n\n                _inoutData.push(item);\n            })\n        }\n        //console.log('activeIndex activeIndex activeIndex activeIndex---', nextProps.activeIndex, inArray, outArray)\n        this.setState({maxInData:Math.max(...inArray), maxOutData:Math.max(...outArray)})\n        let self = this;\n        setTimeout(()=>self.setState({trafficData:_inoutData}),500);\n\n    }\n\n    makeRow = (item, i) => (\n        <Grid.Row key={'itm_'+i} columns={3} className='traffic_list'>\n            <Grid.Column>\n                <NetworkTrafficIO cId=\"In\" direction=\"reverse\" gId={i} data={item.in} maxData={ this.state.maxInData }/>\n            </Grid.Column>\n            <Grid.Column width={3}>\n                <NetworkTrafficIOLabel data={item}/>\n            </Grid.Column>\n            <Grid.Column>\n                <NetworkTrafficIO cId=\"Out\" direction=\"normal\" gId={i} data={item.out} maxData={ this.state.maxOutData }/>\n            </Grid.Column>\n        </Grid.Row>\n    )\n\n\n    render() {\n        return (\n            <Grid>\n                <Grid.Row columns={3} className='panel_sub_title'>\n                    <Grid.Column>Input</Grid.Column>\n                    <Grid.Column width={2}></Grid.Column>\n                    <Grid.Column>Output</Grid.Column>\n                </Grid.Row>\n                {(this.state.trafficData.length > 0)? this.state.trafficData.map((item, i) => this.makeRow(item, i)):null}\n            </Grid>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}