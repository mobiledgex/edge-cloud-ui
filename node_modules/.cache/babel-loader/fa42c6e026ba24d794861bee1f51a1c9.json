{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ds_1 = require(\"./ds\");\n\nvar reEscape = /[-|\\\\{()[\\]^$+*?.]/g;\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisendörfer (felix@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\n\nvar Escaper =\n/*#__PURE__*/\nfunction () {\n  function Escaper(chars) {\n    var wrap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var escaper = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '\\\\';\n\n    _classCallCheck(this, Escaper);\n\n    this.wrap = wrap;\n    this.escaper = escaper;\n    var patterns = chars.join('').replace(reEscape, '\\\\$&');\n    this._re = new RegExp('[' + patterns + ']', 'g');\n  }\n  /**\n  * Escape replaces occurrences of special characters within the target\n  * string with the necessary escape codes.\n  */\n\n\n  _createClass(Escaper, [{\n    key: \"escape\",\n    value: function escape(val) {\n      if (val instanceof ds_1.Raw) {\n        return val.getValue();\n      }\n\n      this._re.lastIndex = 0;\n      var chunkIndex = this._re.lastIndex;\n      var escapedVal = '';\n\n      var match = this._re.exec(val);\n\n      while (match) {\n        escapedVal += val.slice(chunkIndex, match.index) + this.escaper + match[0];\n        chunkIndex = this._re.lastIndex;\n        match = this._re.exec(val);\n      }\n\n      if (chunkIndex === 0) {\n        return this.wrap + val + this.wrap;\n      }\n\n      if (chunkIndex < val.length) {\n        return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap;\n      }\n\n      return this.wrap + escapedVal + this.wrap;\n    }\n  }]);\n\n  return Escaper;\n}();\n\nvar bindEsc = function bindEsc(e) {\n  return e.escape.bind(e);\n};\n/**\n * TagEscaper escapes tag keys, tag values, and field keys.\n * @type {Object}\n * @property {function(s: string): string } quoted Escapes and wraps quoted\n *     values, such as database names.\n * @property {function(s: string): string } stringLit Escapes and\n *     wraps string literals.\n * @property {function(s: string): string } measurement Escapes measurement\n *     names on the line protocol.\n * @property {function(s: string): string } tag Escapes tag keys, take values,\n *     and field keys on the line protocol.\n *\n * @example\n * console.log(escape.quoted('my_\"db')); // => \"my_\\\"db\"\n * console.log(escape.stringLit('hello\\'world')); // => 'hello\\'world'\n *\n * console.log(escape.measurement('my measurement')); // => my\\ measurement\n * console.log(escape.tag('my tag=')); // => my\\ tag\\=\n */\n\n\nexports.escape = {\n  /**\n  * Measurement escapes measurement names.\n  */\n  measurement: bindEsc(new Escaper([',', ' '])),\n\n  /**\n  * Quoted escapes quoted values, such as database names.\n  */\n  quoted: bindEsc(new Escaper(['\"', '\\\\\\\\'], '\"')),\n\n  /**\n  * StringLitEscaper escapes single quotes in string literals.\n  */\n  stringLit: bindEsc(new Escaper(['\\''], '\\'')),\n\n  /**\n  * TagEscaper escapes tag keys, tag values, and field keys.\n  */\n  tag: bindEsc(new Escaper([',', '=', ' ']))\n};","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/influx/lib/src/grammar/escape.js"],"names":["Object","defineProperty","exports","value","ds_1","require","reEscape","Escaper","chars","wrap","escaper","patterns","join","replace","_re","RegExp","val","Raw","getValue","lastIndex","chunkIndex","escapedVal","match","exec","slice","index","length","bindEsc","e","escape","bind","measurement","quoted","stringLit","tag"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,QAAQ,GAAG,qBAAjB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BMC,O;;;AACF,mBAAYC,KAAZ,EAA8C;AAAA,QAA3BC,IAA2B,uEAApB,EAAoB;AAAA,QAAhBC,OAAgB,uEAAN,IAAM;;AAAA;;AAC1C,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,QAAMC,QAAQ,GAAGH,KAAK,CAACI,IAAN,CAAW,EAAX,EAAeC,OAAf,CAAuBP,QAAvB,EAAiC,MAAjC,CAAjB;AACA,SAAKQ,GAAL,GAAW,IAAIC,MAAJ,CAAW,MAAMJ,QAAN,GAAiB,GAA5B,EAAiC,GAAjC,CAAX;AACH;AACD;;;;;;;;2BAIOK,G,EAAK;AACR,UAAIA,GAAG,YAAYZ,IAAI,CAACa,GAAxB,EAA6B;AACzB,eAAOD,GAAG,CAACE,QAAJ,EAAP;AACH;;AACD,WAAKJ,GAAL,CAASK,SAAT,GAAqB,CAArB;AACA,UAAIC,UAAU,GAAG,KAAKN,GAAL,CAASK,SAA1B;AACA,UAAIE,UAAU,GAAG,EAAjB;;AACA,UAAIC,KAAK,GAAG,KAAKR,GAAL,CAASS,IAAT,CAAcP,GAAd,CAAZ;;AACA,aAAOM,KAAP,EAAc;AACVD,QAAAA,UAAU,IAAIL,GAAG,CAACQ,KAAJ,CAAUJ,UAAV,EAAsBE,KAAK,CAACG,KAA5B,IAAqC,KAAKf,OAA1C,GAAoDY,KAAK,CAAC,CAAD,CAAvE;AACAF,QAAAA,UAAU,GAAG,KAAKN,GAAL,CAASK,SAAtB;AACAG,QAAAA,KAAK,GAAG,KAAKR,GAAL,CAASS,IAAT,CAAcP,GAAd,CAAR;AACH;;AACD,UAAII,UAAU,KAAK,CAAnB,EAAsB;AAClB,eAAO,KAAKX,IAAL,GAAYO,GAAZ,GAAkB,KAAKP,IAA9B;AACH;;AACD,UAAIW,UAAU,GAAGJ,GAAG,CAACU,MAArB,EAA6B;AACzB,eAAO,KAAKjB,IAAL,GAAYY,UAAZ,GAAyBL,GAAG,CAACQ,KAAJ,CAAUJ,UAAV,CAAzB,GAAiD,KAAKX,IAA7D;AACH;;AACD,aAAO,KAAKA,IAAL,GAAYY,UAAZ,GAAyB,KAAKZ,IAArC;AACH;;;;;;AAEL,IAAMkB,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD;AAAA,SAAOA,CAAC,CAACC,MAAF,CAASC,IAAT,CAAcF,CAAd,CAAP;AAAA,CAAhB;AACA;;;;;;;;;;;;;;;;;;;;;AAmBA1B,OAAO,CAAC2B,MAAR,GAAiB;AACb;;;AAGAE,EAAAA,WAAW,EAAEJ,OAAO,CAAC,IAAIpB,OAAJ,CAAY,CAAC,GAAD,EAAM,GAAN,CAAZ,CAAD,CAJP;;AAKb;;;AAGAyB,EAAAA,MAAM,EAAEL,OAAO,CAAC,IAAIpB,OAAJ,CAAY,CAAC,GAAD,EAAM,MAAN,CAAZ,EAA2B,GAA3B,CAAD,CARF;;AASb;;;AAGA0B,EAAAA,SAAS,EAAEN,OAAO,CAAC,IAAIpB,OAAJ,CAAY,CAAC,IAAD,CAAZ,EAAoB,IAApB,CAAD,CAZL;;AAab;;;AAGA2B,EAAAA,GAAG,EAAEP,OAAO,CAAC,IAAIpB,OAAJ,CAAY,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAZ,CAAD;AAhBC,CAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ds_1 = require(\"./ds\");\nconst reEscape = /[-|\\\\{()[\\]^$+*?.]/g;\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisendörfer (felix@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n    constructor(chars, wrap = '', escaper = '\\\\') {\n        this.wrap = wrap;\n        this.escaper = escaper;\n        const patterns = chars.join('').replace(reEscape, '\\\\$&');\n        this._re = new RegExp('[' + patterns + ']', 'g');\n    }\n    /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n    escape(val) {\n        if (val instanceof ds_1.Raw) {\n            return val.getValue();\n        }\n        this._re.lastIndex = 0;\n        let chunkIndex = this._re.lastIndex;\n        let escapedVal = '';\n        let match = this._re.exec(val);\n        while (match) {\n            escapedVal += val.slice(chunkIndex, match.index) + this.escaper + match[0];\n            chunkIndex = this._re.lastIndex;\n            match = this._re.exec(val);\n        }\n        if (chunkIndex === 0) {\n            return this.wrap + val + this.wrap;\n        }\n        if (chunkIndex < val.length) {\n            return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap;\n        }\n        return this.wrap + escapedVal + this.wrap;\n    }\n}\nconst bindEsc = (e) => e.escape.bind(e);\n/**\n * TagEscaper escapes tag keys, tag values, and field keys.\n * @type {Object}\n * @property {function(s: string): string } quoted Escapes and wraps quoted\n *     values, such as database names.\n * @property {function(s: string): string } stringLit Escapes and\n *     wraps string literals.\n * @property {function(s: string): string } measurement Escapes measurement\n *     names on the line protocol.\n * @property {function(s: string): string } tag Escapes tag keys, take values,\n *     and field keys on the line protocol.\n *\n * @example\n * console.log(escape.quoted('my_\"db')); // => \"my_\\\"db\"\n * console.log(escape.stringLit('hello\\'world')); // => 'hello\\'world'\n *\n * console.log(escape.measurement('my measurement')); // => my\\ measurement\n * console.log(escape.tag('my tag=')); // => my\\ tag\\=\n */\nexports.escape = {\n    /**\n   * Measurement escapes measurement names.\n   */\n    measurement: bindEsc(new Escaper([',', ' '])),\n    /**\n   * Quoted escapes quoted values, such as database names.\n   */\n    quoted: bindEsc(new Escaper(['\"', '\\\\\\\\'], '\"')),\n    /**\n   * StringLitEscaper escapes single quotes in string literals.\n   */\n    stringLit: bindEsc(new Escaper(['\\''], '\\'')),\n    /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n    tag: bindEsc(new Escaper([',', '=', ' ']))\n};\n"]},"metadata":{},"sourceType":"script"}