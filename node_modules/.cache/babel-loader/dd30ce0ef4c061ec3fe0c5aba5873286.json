{"ast":null,"code":"import * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n\nvar generateData = function generateData(datas, body) {\n  var values = [];\n  var toArray = null;\n  var toJson = [];\n\n  if (datas.data) {\n    if (typeof datas.data === 'object') {\n      toJson.push(datas.data ? datas.data : {});\n    } else {\n      toArray = datas.data.split('\\n');\n      toArray.pop();\n      toJson = toArray.map(function (str) {\n        return JSON.parse(str);\n      });\n    }\n  } else {\n    toJson = null;\n  }\n\n  if (toJson) {\n    toJson.map(function (dataResult, i) {\n      if (dataResult.error || dataResult.message) {\n        console.log(\"error\");\n      } else {\n        var Index = i;\n        var Region = body.region || '-';\n        var FlavorName = dataResult.data.key.name || '-';\n        var RAM = dataResult.data.ram || '-';\n        var vCPUs = dataResult.data.vcpus || '-';\n        var Disk = dataResult.data.disk || '-';\n        var newRegistKey = ['Region', 'FlavorName', 'RAM', 'vCPUs', 'Disk'];\n        values.push({\n          Region: Region,\n          FlavorName: FlavorName,\n          RAM: RAM,\n          vCPUs: vCPUs,\n          Disk: Disk,\n          Edit: newRegistKey\n        });\n      }\n    });\n  } else {\n    var newRegistKey = ['Region', 'FlavorName', 'RAM', 'vCPUs', 'Disk']; //values.push({Region:'', FlavorName:'', RAM:'', vCPUs:'', Disk:'', Edit:newRegistKey})\n  } //ascending or descending\n  //values.sort(numberDes);\n  //values.reverse();\n\n\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatComputeFlavor = function FormatComputeFlavor(props, body) {\n  return generateData(props, body);\n};\n\nexport default FormatComputeFlavor;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/services/formatter/formatComputeFlavor.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","generateData","body","values","toArray","toJson","data","push","split","pop","map","str","JSON","parse","dataResult","i","error","message","console","log","Index","Region","region","FlavorName","key","name","RAM","ram","vCPUs","vcpus","Disk","disk","newRegistKey","Edit","retunDate","year","substring","month","day","hour","minute","date","Date","FormatComputeFlavor","props"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n\nlet generateData = (datas,body) => {\n    let values = [];\n    let toArray = null;\n    let toJson = [];\n    if(datas.data) {\n        if(typeof datas.data === 'object') {\n            toJson.push((datas.data)?datas.data:{});\n        } else {\n            toArray = datas.data.split('\\n')\n            toArray.pop();\n            toJson = toArray.map((str)=>(JSON.parse(str)))\n        }\n    }else {\n        toJson = null;\n    }\n    \n    if(toJson){\n        toJson.map((dataResult, i) => {\n            if(dataResult.error || dataResult.message) {\n                console.log(\"error\")\n            } else {\n                let Index = i;\n                let Region = body.region || '-';\n                let FlavorName = dataResult.data.key.name || '-';\n                let RAM = dataResult.data.ram || '-';\n                let vCPUs = dataResult.data.vcpus || '-';\n                let Disk = dataResult.data.disk || '-';\n                let newRegistKey = ['Region', 'FlavorName', 'RAM', 'vCPUs', 'Disk'];\n\n                values.push({Region:Region, FlavorName:FlavorName, RAM:RAM, vCPUs:vCPUs, Disk:Disk, Edit:newRegistKey})\n            }\n\n        })\n    } else {\n        let newRegistKey = ['Region', 'FlavorName', 'RAM', 'vCPUs', 'Disk'];\n        //values.push({Region:'', FlavorName:'', RAM:'', vCPUs:'', Disk:'', Edit:newRegistKey})\n    }\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    //values.reverse();\n\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatComputeFlavor = (props,body) => (\n    generateData(props,body)\n)\n\nexport default FormatComputeFlavor;\n"]},"metadata":{},"sourceType":"module"}