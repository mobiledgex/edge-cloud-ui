{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/components/horizontal_timeline_kj/Components/EventsBar.jsx\";\nimport React from 'react';\nimport { Motion, spring } from 'react-motion';\nimport PropTypes from 'prop-types';\nimport Events from './Events';\nimport EventLine from './EventLine';\nimport HorizontalTimelineButtons from './HorizontalTimelineButtons';\nimport Constants from '../Constants';\n\nvar EventsBar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EventsBar, _React$Component);\n\n  function EventsBar(_props) {\n    var _this;\n\n    _classCallCheck(this, EventsBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventsBar).call(this, _props));\n\n    _this.handleKeydown = function (event) {\n      if (_this.props.isKeyboardEnabled) {\n        if (event.keyCode === Constants.LEFT_KEY || event.keyCode === Constants.RIGHT_KEY) {\n          _this.updateSlide(Constants.KEYMAP[event.keyCode]);\n        } else if (event.keyCode === Constants.UP_KEY) {\n          _this.props.indexClick(Math.min(_this.props.selectedIndex + 1, _this.props.events.length - 1));\n        } else if (event.keyCode === Constants.DOWN_KEY) {\n          _this.props.indexClick(Math.max(_this.props.selectedIndex - 1, 0));\n        }\n      }\n    };\n\n    _this.handleTouchStart = function (event) {\n      var touchObj = event.touches[0];\n      _this.touch.coors.x = touchObj.pageX;\n      _this.touch.coors.y = touchObj.pageY;\n      _this.touch.isSwiping = false;\n      _this.touch.started = true;\n    };\n\n    _this.handleTouchMove = function (event) {\n      if (!_this.touch.started) {\n        _this.handleTouchStart(event);\n\n        return;\n      }\n\n      var touchObj = event.touches[0];\n      var dx = Math.abs(_this.touch.coors.x - touchObj.pageX);\n      var dy = Math.abs(_this.touch.coors.y - touchObj.pageY);\n      var isSwiping = dx > dy && dx > _this.touch.threshold;\n\n      if (isSwiping === true || dx > _this.touch.threshold || dy > _this.touch.threshold) {\n        _this.touch.isSwiping = isSwiping;\n        var dX = _this.touch.coors.x - touchObj.pageX; // amount scrolled\n\n        _this.touch.coors.x = touchObj.pageX;\n\n        _this.setState({\n          position: _this.state.position - dX // set new position\n\n        });\n      }\n\n      if (_this.touch.isSwiping !== true) {\n        return;\n      } // Prevent native scrolling\n\n\n      event.preventDefault();\n    };\n\n    _this.handleTouchEnd = function (event) {\n      // Make sure we are scrolled to a valid position\n      _this.slideToPosition(_this.state.position);\n\n      _this.touch.coors.x = 0;\n      _this.touch.coors.y = 0;\n      _this.touch.isSwiping = false;\n      _this.touch.started = false;\n    };\n\n    _this.slideToPosition = function (position) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props;\n      // the width of the timeline component between the two buttons (prev and next)\n      var maxPosition = Math.min(props.visibleWidth - props.totalWidth, 0); // NEVER scroll to the right\n\n      _this.setState({\n        position: Math.max(Math.min(0, position), maxPosition),\n        maxPosition: maxPosition\n      });\n    };\n\n    _this.updateSlide = function (direction) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props;\n\n      //  translate the timeline to the left('next')/right('prev')\n      if (direction === Constants.RIGHT) {\n        _this.slideToPosition(_this.state.position - props.visibleWidth + props.labelWidth, props);\n      } else if (direction === Constants.LEFT) {\n        _this.slideToPosition(_this.state.position + props.visibleWidth - props.labelWidth, props);\n      }\n    };\n\n    _this.centerEvent = function (index) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props;\n      var event = props.events[index];\n\n      _this.slideToPosition(-event.distance);\n    };\n\n    _this.state = {\n      position: 0,\n      maxPosition: Math.min(_props.visibleWidth - _props.totalWidth, 0)\n    };\n    _this.touch = {\n      coors: {\n        x: 0,\n        y: 0\n      },\n      isSwiping: false,\n      started: false,\n      threshold: 3\n    };\n    return _this;\n  }\n\n  _createClass(EventsBar, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      document.body.addEventListener('keydown', this.handleKeydown);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var selectedEvent = this.props.events[this.props.index];\n      this.slideToPosition(-(selectedEvent.distance - this.props.visibleWidth / 2), this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.removeEventListener('keydown', this.handleKeydown);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      var selectedEvent = props.events[props.index];\n      var minVisible = -this.state.position; // Position is always negative!\n\n      var maxVisible = minVisible + props.visibleWidth;\n\n      if (selectedEvent.distance > minVisible + 10 && selectedEvent.distance < maxVisible - 10) {\n        //Make sure we are not outside the view\n        this.slideToPosition(this.state.position, props);\n      } else {\n        //Try to center the selected index\n        this.slideToPosition(-(selectedEvent.distance - props.visibleWidth / 2), props);\n      }\n    }\n    /**\n     * Slide the timeline to a specific position. This method wil automatically cap at 0 and the maximum possible position\n     * @param {number} position: The position you want to slide to\n     * @return {undefined} Modifies the value by which we translate the events bar\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      //  creating an array of list items that have an onClick handler into which\n      //  passing the index of the clicked entity.\n      // NOTE: Improve timeline dates handeling and eventsMinLapse handling\n      var touchEvents = this.props.isTouchEnabled ? {\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove,\n        onTouchEnd: this.handleTouchEnd\n      } : {}; // filled value = distane from origin to the selected event\n\n      var filledValue = this.props.events[this.props.index].distance - this.props.barPaddingLeft;\n      var eventLineWidth = this.props.totalWidth - this.props.barPaddingLeft - this.props.barPaddingRight;\n      return React.createElement(\"div\", {\n        style: {\n          overflowX: 'auto',\n          fontSize: '14px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"div\", Object.assign({\n        style: {//width: `${this.props.width}px`,\n          //height: `${this.props.height}px`,\n        }\n      }, touchEvents, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"events-wrapper\",\n        style: {\n          height: '100%',\n          margin: '0 40px',\n          overflow: 'hidden' //overflowX : 'auto'\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"events\",\n        style: {\n          position: 'absolute',\n          marginRight: 0,\n          marginLeft: -35,\n          marginTop: 50,\n          top: 49,\n          height: 2,\n          width: this.props.totalWidth\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(EventLine, {\n        left: this.props.barPaddingLeft,\n        width: eventLineWidth,\n        fillingMotion: this.props.fillingMotion,\n        backgroundColor: this.props.styles.outline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(EventLine, {\n        left: this.props.barPaddingLeft,\n        width: filledValue,\n        fillingMotion: this.props.fillingMotion,\n        backgroundColor: this.props.styles.outline2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }), React.createElement(Events, {\n        events: this.props.events,\n        selectedIndex: this.props.index,\n        styles: this.props.styles,\n        handleDateClick: this.props.indexClick,\n        labelWidth: this.props.labelWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }))), React.createElement(HorizontalTimelineButtons, {\n        maxPosition: this.state.maxPosition,\n        position: this.state.position,\n        styles: this.props.styles,\n        updateSlide: this.updateSlide,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return EventsBar;\n}(React.Component);\n\nEventsBar.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  events: PropTypes.arrayOf(PropTypes.shape({\n    distance: PropTypes.number.isRequired,\n    label: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired\n  })).isRequired,\n  isTouchEnabled: PropTypes.bool.isRequired,\n  totalWidth: PropTypes.number.isRequired,\n  visibleWidth: PropTypes.number.isRequired,\n  index: PropTypes.number,\n  styles: PropTypes.object.isRequired,\n  indexClick: PropTypes.func.isRequired,\n  labelWidth: PropTypes.number.isRequired,\n  fillingMotion: PropTypes.object.isRequired,\n  barPaddingRight: PropTypes.number.isRequired,\n  barPaddingLeft: PropTypes.number.isRequired\n};\nexport default EventsBar;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/components/horizontal_timeline_kj/Components/EventsBar.jsx"],"names":["React","Motion","spring","PropTypes","Events","EventLine","HorizontalTimelineButtons","Constants","EventsBar","props","handleKeydown","event","isKeyboardEnabled","keyCode","LEFT_KEY","RIGHT_KEY","updateSlide","KEYMAP","UP_KEY","indexClick","Math","min","selectedIndex","events","length","DOWN_KEY","max","handleTouchStart","touchObj","touches","touch","coors","x","pageX","y","pageY","isSwiping","started","handleTouchMove","dx","abs","dy","threshold","dX","setState","position","state","preventDefault","handleTouchEnd","slideToPosition","maxPosition","visibleWidth","totalWidth","direction","RIGHT","labelWidth","LEFT","centerEvent","index","distance","document","body","addEventListener","selectedEvent","removeEventListener","minVisible","maxVisible","touchEvents","isTouchEnabled","onTouchStart","onTouchMove","onTouchEnd","filledValue","barPaddingLeft","eventLineWidth","barPaddingRight","overflowX","fontSize","height","margin","overflow","marginRight","marginLeft","marginTop","top","width","fillingMotion","styles","outline","outline2","Component","propTypes","number","isRequired","arrayOf","shape","label","string","date","bool","object","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Motion, spring} from 'react-motion';\nimport PropTypes from 'prop-types';\n\nimport Events from './Events';\nimport EventLine from './EventLine';\nimport HorizontalTimelineButtons from './HorizontalTimelineButtons';\n\nimport Constants from '../Constants';\n\nclass EventsBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            position: 0,\n            maxPosition: Math.min(props.visibleWidth - props.totalWidth, 0),\n        };\n\n        this.touch = {\n            coors: {\n                x: 0,\n                y: 0\n            },\n            isSwiping: false,\n            started: false,\n            threshold: 3\n        }\n    }\n\n    componentWillMount() {\n        document.body.addEventListener('keydown', this.handleKeydown);\n    }\n\n    componentDidMount() {\n        const selectedEvent = this.props.events[this.props.index];\n        this.slideToPosition(-(selectedEvent.distance - (this.props.visibleWidth / 2)), this.props);\n    }\n\n    componentWillUnmount() {\n        document.body.removeEventListener('keydown', this.handleKeydown);\n    }\n\n    handleKeydown = (event) => {\n        if (this.props.isKeyboardEnabled) {\n            if (event.keyCode === Constants.LEFT_KEY || event.keyCode === Constants.RIGHT_KEY) {\n                this.updateSlide(Constants.KEYMAP[event.keyCode]);\n            } else if (event.keyCode === Constants.UP_KEY) {\n                this.props.indexClick(Math.min(this.props.selectedIndex + 1, this.props.events.length - 1));\n            } else if (event.keyCode === Constants.DOWN_KEY) {\n                this.props.indexClick(Math.max(this.props.selectedIndex - 1, 0));\n            }\n        }\n    }\n\n    handleTouchStart = (event) => {\n        const touchObj = event.touches[0];\n\n        this.touch.coors.x = touchObj.pageX;\n        this.touch.coors.y = touchObj.pageY;\n        this.touch.isSwiping = false;\n        this.touch.started = true;\n    };\n\n    handleTouchMove = (event) => {\n        if (!this.touch.started) {\n            this.handleTouchStart(event);\n            return;\n        }\n\n        const touchObj = event.touches[0];\n        const dx = Math.abs(this.touch.coors.x - touchObj.pageX);\n        const dy = Math.abs(this.touch.coors.y - touchObj.pageY);\n\n        const isSwiping = dx > dy && dx > this.touch.threshold;\n\n        if (isSwiping === true || dx > this.touch.threshold || dy > this.touch.threshold) {\n            this.touch.isSwiping = isSwiping;\n            const dX = this.touch.coors.x - touchObj.pageX; // amount scrolled\n            this.touch.coors.x = touchObj.pageX;\n            this.setState({\n                position: this.state.position - (dX) // set new position\n            });\n        }\n        if (this.touch.isSwiping !== true) {\n            return;\n        }\n        // Prevent native scrolling\n        event.preventDefault();\n    };\n\n    handleTouchEnd = (event) => {\n        // Make sure we are scrolled to a valid position\n        this.slideToPosition(this.state.position);\n        this.touch.coors.x = 0;\n        this.touch.coors.y = 0;\n        this.touch.isSwiping = false;\n        this.touch.started = false;\n    };\n\n\n    componentWillReceiveProps(props) {\n        const selectedEvent = props.events[props.index];\n\n\n        const minVisible = -this.state.position; // Position is always negative!\n        const maxVisible = minVisible + props.visibleWidth;\n\n        if (selectedEvent.distance > (minVisible + 10) && selectedEvent.distance < (maxVisible - 10)) {\n            //Make sure we are not outside the view\n            this.slideToPosition(this.state.position, props);\n        } else {\n            //Try to center the selected index\n            this.slideToPosition(-(selectedEvent.distance - (props.visibleWidth / 2)), props);\n        }\n    }\n\n    /**\n     * Slide the timeline to a specific position. This method wil automatically cap at 0 and the maximum possible position\n     * @param {number} position: The position you want to slide to\n     * @return {undefined} Modifies the value by which we translate the events bar\n     */\n    slideToPosition = (position, props = this.props) => {\n        // the width of the timeline component between the two buttons (prev and next)\n        const maxPosition = Math.min(props.visibleWidth - props.totalWidth, 0); // NEVER scroll to the right\n\n        this.setState({\n            position: Math.max(Math.min(0, position), maxPosition),\n            maxPosition\n        });\n    }\n\n    /**\n     * This method translates the timeline by a certaing amount depending on if the direction passed\n     * is left or right.\n     *\n     * @param {string} direction The direction towards which the timeline will translates\n     * @param {object} the props to use during this calcuation\n     * @return {undefined} Just modifies the value by which we need to translate the events bar in place\n     */\n    updateSlide = (direction, props = this.props) => {\n        //  translate the timeline to the left('next')/right('prev')\n        if (direction === Constants.RIGHT) {\n            this.slideToPosition((this.state.position - props.visibleWidth) + props.labelWidth, props);\n        } else if (direction === Constants.LEFT) {\n            this.slideToPosition((this.state.position + props.visibleWidth) - props.labelWidth, props);\n        }\n    };\n\n    centerEvent = (index, props = this.props) => {\n        const event = props.events[index];\n\n        this.slideToPosition(-event.distance);\n    }\n\n    render() {\n        //  creating an array of list items that have an onClick handler into which\n        //  passing the index of the clicked entity.\n        // NOTE: Improve timeline dates handeling and eventsMinLapse handling\n        const touchEvents = this.props.isTouchEnabled\n            ? {\n                onTouchStart: this.handleTouchStart,\n                onTouchMove: this.handleTouchMove,\n                onTouchEnd: this.handleTouchEnd\n            }\n            : {};\n\n        // filled value = distane from origin to the selected event\n        const filledValue = this.props.events[this.props.index].distance - this.props.barPaddingLeft;\n        const eventLineWidth = this.props.totalWidth - this.props.barPaddingLeft - this.props.barPaddingRight;\n\n        return (\n            <div style={{overflowX: 'auto', fontSize: '14px',}}>\n                <div\n                    style={{\n                        //width: `${this.props.width}px`,\n                        //height: `${this.props.height}px`,\n\n                    }}\n                    {...touchEvents}\n                >\n                    <div\n                        className='events-wrapper'\n                        style={{\n                            height: '100%',\n                            margin: '0 40px',\n                            overflow: 'hidden'\n                            //overflowX : 'auto'\n                        }}\n                    >\n                        <div\n                            className='events'\n                            style={{\n                                position: 'absolute',\n                                marginRight: 0,\n                                marginLeft: -35,\n                                marginTop: 50,\n                                top: 49,\n                                height: 2,\n                                width: this.props.totalWidth,\n                            }}\n                        >\n                            <EventLine\n                                left={this.props.barPaddingLeft}\n                                width={eventLineWidth}\n                                fillingMotion={this.props.fillingMotion}\n                                backgroundColor={this.props.styles.outline}\n                            />\n                            <EventLine\n                                left={this.props.barPaddingLeft}\n                                width={filledValue}\n                                fillingMotion={this.props.fillingMotion}\n                                backgroundColor={this.props.styles.outline2}\n                            />\n                            <Events\n                                events={this.props.events}\n                                selectedIndex={this.props.index}\n                                styles={this.props.styles}\n                                handleDateClick={this.props.indexClick}\n                                labelWidth={this.props.labelWidth}\n\n                            />\n                        </div>\n                    </div>\n                    <HorizontalTimelineButtons\n                        maxPosition={this.state.maxPosition}\n                        position={this.state.position}\n                        styles={this.props.styles}\n                        updateSlide={this.updateSlide}\n                    />\n                </div>\n            </div>\n\n        );\n    }\n}\n\nEventsBar.propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    events: PropTypes.arrayOf(PropTypes.shape({\n        distance: PropTypes.number.isRequired,\n        label: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n    })).isRequired,\n    isTouchEnabled: PropTypes.bool.isRequired,\n    totalWidth: PropTypes.number.isRequired,\n    visibleWidth: PropTypes.number.isRequired,\n    index: PropTypes.number,\n    styles: PropTypes.object.isRequired,\n    indexClick: PropTypes.func.isRequired,\n    labelWidth: PropTypes.number.isRequired,\n    fillingMotion: PropTypes.object.isRequired,\n    barPaddingRight: PropTypes.number.isRequired,\n    barPaddingLeft: PropTypes.number.isRequired,\n}\n\n\nexport default EventsBar;\n"]},"metadata":{},"sourceType":"module"}