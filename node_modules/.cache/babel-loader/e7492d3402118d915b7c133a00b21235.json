{"ast":null,"code":"/*\n{\n            \"result\": {\n                \"fields\": [],\n                \"key\": {\n                    \"app_key\": {\n                        \"developer_key\": {\n                            \"name\": \"1000 Realities\"\n                        },\n                        \"name\": \"ThousandRealitiesApp\",\n                        \"version\": \"1.0\"\n                    },\n                    \"cloudlet_key\": {\n                        \"operator_key\": {\n                            \"name\": \"TMO\"\n                        },\n                        \"name\": \"krakowthousandrealities\"\n                    },\n                    \"id\": \"123\"\n                },\n                \"cloudlet_loc\": {\n                    \"latitude\": 60.0647,\n                    \"longitude\": 19.945,\n                    \"horizontal_accuracy\": 0,\n                    \"vertical_accuracy\": 0,\n                    \"altitude\": 0,\n                    \"course\": 0,\n                    \"speed\": 0,\n                    \"timestamp\": {\n                        \"seconds\": \"0\",\n                        \"nanos\": 0\n                    }\n                },\n                \"uri\": \"krakowthousandrealities.tmo.mobiledgex.net\",\n                \"cluster_inst_key\": {\n                    \"cluster_key\": {\n                        \"name\": \"thousandrealitiescluster\"\n                    },\n                    \"cloudlet_key\": {\n                        \"operator_key\": {\n                            \"name\": \"TMO\"\n                        },\n                        \"name\": \"krakowthousandrealities\"\n                    }\n                },\n                \"liveness\": \"LivenessStatic\",\n                \"mapped_ports\": [\n                    {\n                        \"proto\": \"LProtoUDP\",\n                        \"internal_port\": 8888,\n                        \"public_port\": 8888,\n                        \"public_path\": \"\",\n                        \"FQDN_prefix\": \"thousandrealitiesapp-udp.\"\n                    },\n                    {\n                        \"proto\": \"LProtoTCP\",\n                        \"internal_port\": 8889,\n                        \"public_port\": 8889,\n                        \"public_path\": \"\",\n                        \"FQDN_prefix\": \"thousandrealitiesapp-tcp.\"\n                    },\n                    {\n                        \"proto\": \"LProtoTCP\",\n                        \"internal_port\": 8890,\n                        \"public_port\": 8890,\n                        \"public_path\": \"\",\n                        \"FQDN_prefix\": \"thousandrealitiesapp-tcp.\"\n                    }\n                ],\n                \"flavor\": {\n                    \"name\": \"x1.small\"\n                },\n                \"ip_access\": \"IpAccessShared\",\n                \"state\": \"Ready\",\n                \"errors\": [],\n                \"crm_override\": \"NoOverride\",\n                \"allocated_ip\": \"\"\n            }\n        }\n//\n\n */\nimport * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n/*\ncolumns =\n0: \"time\"\n1: \"app\"\n2: \"cloudlet\"\n3: \"cluster\"\n4: \"cpu\"\n5: \"dev\"\n6: \"operator\"\n */\n\n\nvar generateData = function generateData(datas) {\n  var result = datas.data.data[0].Series[0];\n  var values = [];\n\n  if (result) {\n    var _name = result.name;\n    var dataSeries = result.values;\n    var dataColumns = result.columns;\n    var infoData = [];\n    var lastItem = null;\n\n    if (dataSeries.length) {\n      //remove duplicated data\n      dataSeries.map(function (item) {\n        // time, cluster, cpu, disk, mem, recvBytes, sendBytes\n        if (lastItem !== item[0]) {\n          infoData = item;\n          values.push({\n            name: _name,\n            alarm: infoData[2],\n            dName: infoData[1],\n            values: {\n              time: moment(item[0]).utc().local().format(),\n              cluster: infoData[3],\n              cmsn: _name.indexOf('cpu') > -1 ? infoData[4] : _name.indexOf('mem') > -1 ? infoData[5] : _name.indexOf('connections') > -1 ? infoData : [infoData[6], infoData[7]]\n            }\n          });\n        }\n\n        lastItem = item[0];\n      });\n    } else {}\n  } else {\n    console.log('there is no result');\n  } //ascending or descending\n  //values.sort(numberDes);\n\n\n  values = values.reverse();\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatMonitorApp = function FormatMonitorApp(props) {\n  return generateData(props);\n};\n\nexport default FormatMonitorApp;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/services/formatter/formatMonitorApp.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","generateData","result","data","Series","values","_name","name","dataSeries","dataColumns","columns","infoData","lastItem","length","map","item","push","alarm","dName","time","utc","local","cluster","cmsn","indexOf","console","log","reverse","retunDate","str","year","substring","month","day","hour","minute","date","Date","FormatMonitorApp","props"],"mappings":"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","sourcesContent":["/*\n{\n            \"result\": {\n                \"fields\": [],\n                \"key\": {\n                    \"app_key\": {\n                        \"developer_key\": {\n                            \"name\": \"1000 Realities\"\n                        },\n                        \"name\": \"ThousandRealitiesApp\",\n                        \"version\": \"1.0\"\n                    },\n                    \"cloudlet_key\": {\n                        \"operator_key\": {\n                            \"name\": \"TMO\"\n                        },\n                        \"name\": \"krakowthousandrealities\"\n                    },\n                    \"id\": \"123\"\n                },\n                \"cloudlet_loc\": {\n                    \"latitude\": 60.0647,\n                    \"longitude\": 19.945,\n                    \"horizontal_accuracy\": 0,\n                    \"vertical_accuracy\": 0,\n                    \"altitude\": 0,\n                    \"course\": 0,\n                    \"speed\": 0,\n                    \"timestamp\": {\n                        \"seconds\": \"0\",\n                        \"nanos\": 0\n                    }\n                },\n                \"uri\": \"krakowthousandrealities.tmo.mobiledgex.net\",\n                \"cluster_inst_key\": {\n                    \"cluster_key\": {\n                        \"name\": \"thousandrealitiescluster\"\n                    },\n                    \"cloudlet_key\": {\n                        \"operator_key\": {\n                            \"name\": \"TMO\"\n                        },\n                        \"name\": \"krakowthousandrealities\"\n                    }\n                },\n                \"liveness\": \"LivenessStatic\",\n                \"mapped_ports\": [\n                    {\n                        \"proto\": \"LProtoUDP\",\n                        \"internal_port\": 8888,\n                        \"public_port\": 8888,\n                        \"public_path\": \"\",\n                        \"FQDN_prefix\": \"thousandrealitiesapp-udp.\"\n                    },\n                    {\n                        \"proto\": \"LProtoTCP\",\n                        \"internal_port\": 8889,\n                        \"public_port\": 8889,\n                        \"public_path\": \"\",\n                        \"FQDN_prefix\": \"thousandrealitiesapp-tcp.\"\n                    },\n                    {\n                        \"proto\": \"LProtoTCP\",\n                        \"internal_port\": 8890,\n                        \"public_port\": 8890,\n                        \"public_path\": \"\",\n                        \"FQDN_prefix\": \"thousandrealitiesapp-tcp.\"\n                    }\n                ],\n                \"flavor\": {\n                    \"name\": \"x1.small\"\n                },\n                \"ip_access\": \"IpAccessShared\",\n                \"state\": \"Ready\",\n                \"errors\": [],\n                \"crm_override\": \"NoOverride\",\n                \"allocated_ip\": \"\"\n            }\n        }\n//\n\n */\n\n\nimport * as moment from 'moment';\n\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n\n\n/*\ncolumns =\n0: \"time\"\n1: \"app\"\n2: \"cloudlet\"\n3: \"cluster\"\n4: \"cpu\"\n5: \"dev\"\n6: \"operator\"\n */\nlet generateData = (datas) => {\n    let result = datas.data.data[0].Series[0];\n    let values = [];\n    if(result){\n        let _name = result.name;\n        let dataSeries = result.values;\n        let dataColumns = result.columns;\n        let infoData = [];\n        let lastItem = null;\n        if(dataSeries.length) {\n            //remove duplicated data\n\n            dataSeries.map((item) => {\n                // time, cluster, cpu, disk, mem, recvBytes, sendBytes\n                if(lastItem !== item[0]) {\n                    infoData = item;\n                    values.push({\n                        name:_name,\n                        alarm:infoData[2],\n                        dName:infoData[1],\n                        values:{\n                            time:moment(item[0]).utc().local().format(),\n                            cluster:infoData[3],\n                            cmsn:(_name.indexOf('cpu') > -1)?infoData[4] : (_name.indexOf('mem') > -1)? infoData[5] : (_name.indexOf('connections') > -1)? infoData : [infoData[6],infoData[7]]\n                        }})\n                }\n\n                lastItem = item[0];\n            })\n        } else {\n\n        }\n\n\n\n    } else {\n        console.log('there is no result')\n    }\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    values = values.reverse();\n\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatMonitorApp = (props) => (\n    generateData(props)\n)\n\nexport default FormatMonitorApp;\n"]},"metadata":{},"sourceType":"module"}