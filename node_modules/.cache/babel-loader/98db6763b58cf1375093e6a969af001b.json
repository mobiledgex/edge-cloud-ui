{"ast":null,"code":"import _defineProperty from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/listDetailViewer.js\";\nimport React from 'react';\nimport { Button, Divider, Modal, Grid, Input, TextArea, Dropdown } from \"semantic-ui-react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport * as moment from 'moment';\nvar _self = null;\n\nvar ListDetailViewer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListDetailViewer, _React$Component);\n\n  function ListDetailViewer() {\n    var _this;\n\n    _classCallCheck(this, ListDetailViewer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListDetailViewer).call(this));\n\n    _this.makeTextBox = function (value) {\n      return React.createElement(TextareaAutosize, {\n        minRows: 3,\n        maxRows: 10,\n        style: {\n          boxSizing: \"border-box\",\n          width: '450px',\n          backgroundColor: '#545b6b',\n          color: '#eeeeee'\n        },\n        defaultValue: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      });\n    };\n\n    _this.setCloudletList = function (operNm) {\n      var cl = [];\n\n      _self.state.cloudletResult[operNm].map(function (oper, i) {\n        if (i === 0) _self.setState({\n          dropdownValueThree: oper.CloudletName\n        });\n        cl.push({\n          key: i,\n          value: oper.CloudletName,\n          text: oper.CloudletName\n        });\n      });\n\n      _self.setState({\n        devOptionsThree: cl\n      });\n    };\n\n    _this.state = {\n      dummyData: [],\n      selected: {},\n      open: false,\n      dimmer: '',\n      devOptionsOne: [],\n      devOptionsTwo: [],\n      devOptionsThree: [],\n      devOptionsFour: [],\n      devOptionsFive: [],\n      dropdownValueOne: '',\n      dropdownValueTwo: '',\n      dropdownValueThree: '',\n      dropdownValueFour: '',\n      dropdownValueFive: '',\n      cloudletResult: null,\n      appResult: null,\n      listOfDetail: null,\n      propsData: ''\n    };\n    _self = _assertThisInitialized(_this);\n    return _this;\n  }\n\n  _createClass(ListDetailViewer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this2 = this;\n\n      var regKeys = [];\n      var component = null;\n\n      if (nextProps.data) {\n        regKeys = Object.keys(nextProps.data);\n        component = regKeys.map(function (key, i) {\n          var _React$createElement;\n\n          return key !== 'Edit' ? React.createElement(Grid.Row, {\n            columns: 2,\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, React.createElement(Grid.Column, {\n            width: 5,\n            className: \"detail_item\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, key === 'FlavorName' ? 'Flavor Name' : key == 'RAM' ? 'RAM Size' : key == 'vCPUs' ? 'Number of vCPUs' : key == 'Disk' ? 'Disk Space'\n          /* 여기까지 Flavors*/\n          : key == 'OrganizationName' ? 'Organization Name' : key == 'AppName' ? 'App Name' : key == 'DeploymentType' ? 'Deployment Type' : key == 'ImageType' ? 'Image Type' : key == 'ImagePath' ? 'Image Path' : key == 'DefaultFlavor' ? 'Default Flavor' : key == 'DeploymentMF' ? 'Deployment Manifest'\n          /* 여기까지 Apps*/\n          : key == 'AuthPublicKey' ? 'Auth Public Key' : key === 'DefaultFQDN' ? 'Official FQDN' : key === 'PackageName' ? 'Package Name' : key === 'ScaleWithCluster' ? 'Scale With Cluster' : key)), React.createElement(Grid.Column, {\n            width: 11,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }, React.createElement(\"div\", (_React$createElement = {\n            style: {\n              wordWrap: 'break-word'\n            }\n          }, _defineProperty(_React$createElement, \"style\", {\n            overflowY: 'auto'\n          }), _defineProperty(_React$createElement, \"__source\", {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), key == 'DeploymentType' && String(nextProps.data[key]) === 'docker' ? \"Docker\" : key == 'DeploymentType' && String(nextProps.data[key]) === 'vm' ? \"VM\" : key == 'DeploymentType' && String(nextProps.data[key]) === 'kubernetes' ? \"Kubernetes\" : key == 'DeploymentType' && String(nextProps.data[key]) === 'helm' ? \"Helm\" : key == 'Ports' ? String(nextProps.data[key]).toUpperCase() : key == 'DeploymentMF' ? _this2.makeTextBox(nextProps.data[key]) : key == 'ImageType' && String(nextProps.data[key]) === '1' ? \"Docker\" : key == 'ImageType' && String(nextProps.data[key]) === '2' ? \"Qcow\"\n          /* 여기까지 Apps*/\n          : key == 'Created' ? String(\"time is ==  \" + nextProps.data[key]) : key == 'ScaleWithCluster' && String(nextProps.data[key]) === 'false' ? \"False\" : key == 'ScaleWithCluster' && String(nextProps.data[key]) === 'true' ? \"True\" : typeof nextProps.data[key] === 'object' ? JSON.stringify(nextProps.data[key]) : String(nextProps.data[key]))), React.createElement(Divider, {\n            vertical: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          })) : null;\n        });\n        this.setState({\n          listOfDetail: component,\n          propsData: nextProps.data\n        });\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.setState({\n        open: false\n      });\n      this.props.close();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"apps_detail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        divided: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.state.listOfDetail), this.props.siteId === 'Organization' ? React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"If your image is docker, please upload your image with your MobiledgeX Account Credentials to our docker registry using the following docker command.\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"$ docker login -u <username> docker.mobiledgex.net\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"$ docker tag <your application> docker.mobiledgex.net/\" + String(this.state.propsData.Organization).toLowerCase() + \"/images/<application name>:<version>\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"$ docker push docker.mobiledgex.net/\" + String(this.state.propsData.Organization).toLowerCase() + \"/images/<application name>:<version>\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"$ docker logout docker.mobiledgex.net\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"If you image is VM, please upload to our VM registry with your MobiledgeX Account Credentials.\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"curl -u<username> -T <path_to_file> \", React.createElement(\"span\", {\n        style: {\n          color: 'rgba(136,221,0,.9)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"\\\"https://artifactory.mobiledgex.net/artifactory/repo-\" + this.state.propsData.Organization + \"/<target_file_path>\\\"\"))))) : null);\n    }\n  }]);\n\n  return ListDetailViewer;\n}(React.Component);\n\nexport { ListDetailViewer as default };","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/listDetailViewer.js"],"names":["React","Button","Divider","Modal","Grid","Input","TextArea","Dropdown","TextareaAutosize","moment","_self","ListDetailViewer","makeTextBox","value","boxSizing","width","backgroundColor","color","setCloudletList","operNm","cl","state","cloudletResult","map","oper","i","setState","dropdownValueThree","CloudletName","push","key","text","devOptionsThree","dummyData","selected","open","dimmer","devOptionsOne","devOptionsTwo","devOptionsFour","devOptionsFive","dropdownValueOne","dropdownValueTwo","dropdownValueFour","dropdownValueFive","appResult","listOfDetail","propsData","nextProps","nextContext","regKeys","component","data","Object","keys","wordWrap","overflowY","String","toUpperCase","JSON","stringify","props","close","siteId","Organization","toLowerCase","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, Divider, Modal, Grid, Input, TextArea, Dropdown} from \"semantic-ui-react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport * as moment from 'moment';\n\nlet _self = null;\nexport default class ListDetailViewer extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            dummyData:[],\n            selected:{},\n            open:false,\n            dimmer:'',\n            devOptionsOne:[],\n            devOptionsTwo:[],\n            devOptionsThree:[],\n            devOptionsFour:[],\n            devOptionsFive:[],\n            dropdownValueOne:'',\n            dropdownValueTwo:'',\n            dropdownValueThree:'',\n            dropdownValueFour:'',\n            dropdownValueFive:'',\n            cloudletResult:null,\n            appResult:null,\n            listOfDetail:null,\n            propsData:''\n        }\n        _self = this;\n    }\n\n    makeTextBox = (value) => (\n        <TextareaAutosize\n            minRows={3}\n            maxRows={10}\n            style={{ boxSizing: \"border-box\", width:'450px', backgroundColor:'#545b6b', color:'#eeeeee' }}\n            defaultValue={value}></TextareaAutosize>\n    )\n\n    componentDidMount() {\n\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n\n            let regKeys = [];\n            let component = null;\n            if(nextProps.data){\n                regKeys = Object.keys(nextProps.data)\n                component = regKeys.map((key, i)=>(\n                    (key !== 'Edit')?\n                    <Grid.Row columns={2} key={i}>\n                        <Grid.Column width={5} className='detail_item'>\n                            <div>\n                                {(key === 'FlavorName')?'Flavor Name'\n                                 :(key == 'RAM')?'RAM Size'\n                                 :(key == 'vCPUs')?'Number of vCPUs'\n                                 :(key == 'Disk')?'Disk Space' /* 여기까지 Flavors*/\n                                 :(key == 'OrganizationName')?'Organization Name'\n                                 :(key == 'AppName')?'App Name'\n                                 :(key == 'DeploymentType')?'Deployment Type'\n                                 :(key == 'ImageType')?'Image Type'\n                                 :(key == 'ImagePath')?'Image Path'\n                                 :(key == 'DefaultFlavor')?'Default Flavor'\n                                 :(key == 'DeploymentMF')?'Deployment Manifest' /* 여기까지 Apps*/\n                                 :(key == 'AuthPublicKey')?'Auth Public Key'\n                                 : (key === 'DefaultFQDN')? 'Official FQDN'\n                                 : (key === 'PackageName')? 'Package Name'\n                                 : (key === 'ScaleWithCluster')? 'Scale With Cluster'\n                                 :key}\n                            </div>\n                        </Grid.Column>\n                        <Grid.Column width={11}>\n                            <div style={{wordWrap: 'break-word'}} style={{overflowY:'auto'}}>\n                                {(key == 'DeploymentType' && String(nextProps.data[key]) === 'docker')?\"Docker\"\n                                :(key == 'DeploymentType' && String(nextProps.data[key]) === 'vm')?\"VM\"\n                                :(key == 'DeploymentType' && String(nextProps.data[key]) === 'kubernetes')?\"Kubernetes\"\n                                :(key == 'DeploymentType' && String(nextProps.data[key]) === 'helm')?\"Helm\"\n                                :(key == 'Ports')?String(nextProps.data[key]).toUpperCase()\n                                :(key == 'DeploymentMF')? this.makeTextBox(nextProps.data[key])\n                                :(key == 'ImageType' && String(nextProps.data[key]) === '1')?\"Docker\"\n                                :(key == 'ImageType' && String(nextProps.data[key]) === '2')?\"Qcow\" /* 여기까지 Apps*/\n                                :(key == 'Created')? String(\"time is ==  \"+nextProps.data[key])\n                                :(key == 'ScaleWithCluster' && String(nextProps.data[key]) === 'false')?\"False\"\n                                :(key == 'ScaleWithCluster' && String(nextProps.data[key]) === 'true')?\"True\"\n                                :(typeof nextProps.data[key] === 'object')? JSON.stringify(nextProps.data[key])\n                                :String(nextProps.data[key])}\n                            </div>\n                        </Grid.Column>\n\n                        <Divider vertical></Divider>\n                    </Grid.Row>\n                        :null\n\n                ))\n\n            this.setState({listOfDetail:component,propsData:nextProps.data})\n        }\n\n    }\n\n    setCloudletList = (operNm) => {\n        let cl = [];\n        _self.state.cloudletResult[operNm].map((oper, i) => {\n            if(i === 0) _self.setState({dropdownValueThree: oper.CloudletName})\n            cl.push({ key: i, value: oper.CloudletName, text: oper.CloudletName })\n        })\n\n        _self.setState({devOptionsThree: cl})\n    }\n\n\n\n    close() {\n        this.setState({ open: false })\n        this.props.close()\n    }\n\n\n    render() {\n\n        return (\n\n                    <div className=\"apps_detail\">\n                        <Grid divided>\n                            {\n                                this.state.listOfDetail\n                            }\n                        </Grid>\n                        {(this.props.siteId === 'Organization') ?\n                            <Grid>\n                                <Grid.Row>\n                                    <Grid.Column>\n                                        <div>\n                                            If your image is docker, please upload your image with your MobiledgeX\n                                            Account Credentials to our docker registry using the following docker\n                                            command.\n                                        </div>\n                                        <br></br>\n                                        <div>\n                                            {`$ docker login -u <username> docker.mobiledgex.net`}\n                                        </div>\n                                        <div>\n                                            {`$ docker tag <your application> docker.mobiledgex.net/` + String(this.state.propsData.Organization).toLowerCase() + `/images/<application name>:<version>`}\n                                        </div>\n                                        <div>\n                                            {`$ docker push docker.mobiledgex.net/` + String(this.state.propsData.Organization).toLowerCase() + `/images/<application name>:<version>`}\n                                        </div>\n                                        <div>\n                                            $ docker logout docker.mobiledgex.net\n                                        </div>\n                                        <br></br>\n                                        <div>\n                                            If you image is VM, please upload to our VM registry with your MobiledgeX\n                                            Account Credentials.\n                                        </div>\n                                        <div>\n                                            {`curl -u<username> -T <path_to_file> `}<span\n                                            style={{color: 'rgba(136,221,0,.9)'}}>{`\"https://artifactory.mobiledgex.net/artifactory/repo-` + this.state.propsData.Organization + `/<target_file_path>\"`}</span>\n                                        </div>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            :null\n                        }\n                    </div>\n\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}