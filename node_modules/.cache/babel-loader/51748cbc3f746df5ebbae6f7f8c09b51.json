{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/components/reduxForm/registryResetForm.js\";\nimport React, { Fragment } from \"react\";\nimport { Field, initialize, reduxForm } from \"redux-form\";\nimport { Form, Input, Message } from \"semantic-ui-react\";\nimport './styles.css';\n\nvar validate = function validate(values) {\n  var errors = {};\n\n  if (!values.username) {\n    errors.username = 'Required';\n  }\n\n  if (!values.password) {\n    errors.password = 'Required';\n  } else if (values.password.length < 8) {\n    errors.password = 'Must be at least 8 characters';\n  }\n\n  if (!values.confirmpassword) {\n    errors.confirmpassword = 'Required';\n  } else if (values.password !== values.confirmpassword) {\n    errors.confirmpassword = 'Password and Confirm Password do not match';\n  }\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  return errors;\n};\n\nvar renderCheckbox = function renderCheckbox(field) {\n  return React.createElement(Form.Checkbox, {\n    checked: !!field.input.value,\n    name: field.input.name,\n    label: field.label,\n    onChange: function onChange(e, _ref) {\n      var checked = _ref.checked;\n      return field.input.onChange(checked);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  });\n};\n\nvar renderRadio = function renderRadio(field) {\n  return React.createElement(Form.Radio, {\n    checked: field.input.value === field.radioValue,\n    label: field.label,\n    name: field.input.name,\n    onChange: function onChange(e, _ref2) {\n      var checked = _ref2.checked;\n      return field.input.onChange(field.radioValue);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n};\n\nvar renderSelect = function renderSelect(field) {\n  return React.createElement(Form.Select, {\n    label: field.label,\n    name: field.input.name,\n    onChange: function onChange(e, _ref3) {\n      var value = _ref3.value;\n      return field.input.onChange(value);\n    },\n    options: field.options,\n    placeholder: field.placeholder,\n    value: field.input.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  });\n};\n\nvar renderTextArea = function renderTextArea(field) {\n  return React.createElement(Form.TextArea, Object.assign({}, field.input, {\n    label: field.label,\n    placeholder: field.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n};\n\nvar renderInputNum = function renderInputNum(field) {\n  return React.createElement(Form.Field, Object.assign({}, field.input, {\n    type: field.type // placeholder={field.placeholder}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, field.label), React.createElement(Input, {\n    type: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n};\n\nvar renderInput = function renderInput(field) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Form.Input, Object.assign({}, field.input, {\n    type: field.type,\n    label: field.label,\n    placeholder: field.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), field.meta.touched && (field.meta.error && React.createElement(\"span\", {\n    className: \"text-danger login-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, field.meta.error) || field.meta.warning && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, field.meta.warning)));\n};\n\nvar _props = null;\nvar _self = null;\n\nvar RegistryResetForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RegistryResetForm, _React$Component);\n\n  function RegistryResetForm() {\n    var _this;\n\n    _classCallCheck(this, RegistryResetForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegistryResetForm).call(this));\n\n    _this.onHandleSubmit = function (a, b) {\n      _this.props.handleSubmit();\n\n      setTimeout(function () {\n        _self.props.dispatch(initialize('profile', {\n          submitSucceeded: false\n        }));\n      }, 1000);\n    };\n\n    _self = _assertThisInitialized(_this);\n    return _this;\n  }\n\n  _createClass(RegistryResetForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          reset = _this$props.reset;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onHandleSubmit,\n        className: \"fieldForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        widths: \"equal\",\n        style: {\n          flexDirection: 'column',\n          alignContent: 'space-around'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Field, {\n        className: \"fieldInput\",\n        component: renderInput,\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(Field, {\n        className: \"fieldInput\",\n        component: renderInput,\n        name: \"confirmpassword\",\n        type: \"password\",\n        placeholder: \"Confirm Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        className: \"submitButtonGroup\",\n        id: \"submitButtonGroup\",\n        inline: true,\n        style: {\n          flexDirection: 'column',\n          marginBottom: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Form.Button, {\n        primary: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Update New Password\"))));\n    }\n  }]);\n\n  return RegistryResetForm;\n}(React.Component);\n\n;\nexport default reduxForm({\n  form: \"profile\",\n  validate: validate,\n  enableReinitialize: false\n})(RegistryResetForm);","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/components/reduxForm/registryResetForm.js"],"names":["React","Fragment","Field","initialize","reduxForm","Form","Input","Message","validate","values","errors","username","password","length","confirmpassword","email","test","renderCheckbox","field","input","value","name","label","e","checked","onChange","renderRadio","radioValue","renderSelect","options","placeholder","renderTextArea","renderInputNum","type","renderInput","meta","touched","error","warning","_props","_self","RegistryResetForm","onHandleSubmit","a","b","props","handleSubmit","setTimeout","dispatch","submitSucceeded","reset","flexDirection","alignContent","marginBottom","Component","form","enableReinitialize"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport {Field, initialize, reduxForm} from \"redux-form\";\nimport {Form, Input, Message} from \"semantic-ui-react\";\nimport './styles.css';\n\nconst validate = values => {\n    const errors = {}\n    if (!values.username) {\n        errors.username = 'Required'\n    }\n\n    if (!values.password) {\n        errors.password = 'Required'\n    } else if (values.password.length < 8) {\n        errors.password = 'Must be at least 8 characters'\n    }\n\n    if (!values.confirmpassword) {\n        errors.confirmpassword = 'Required'\n    } else if (values.password !== values.confirmpassword) {\n        errors.confirmpassword = 'Password and Confirm Password do not match'\n    }\n\n\n    if (!values.email) {\n        errors.email = 'Required'\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address'\n    }\n   \n    return errors\n}\n\nconst renderCheckbox = field => (\n    <Form.Checkbox\n        checked={!!field.input.value}\n        name={field.input.name}\n        label={field.label}\n        onChange={(e, { checked }) => field.input.onChange(checked)}\n    />\n);\n\nconst renderRadio = field => (\n    <Form.Radio\n        checked={field.input.value === field.radioValue}\n        label={field.label}\n        name={field.input.name}\n        onChange={(e, { checked }) => field.input.onChange(field.radioValue)}\n    />\n);\n\nconst renderSelect = field => (\n    <Form.Select\n        label={field.label}\n        name={field.input.name}\n        onChange={(e, { value }) => field.input.onChange(value)}\n        options={field.options}\n        placeholder={field.placeholder}\n        value={field.input.value}\n    />\n);\n\nconst renderTextArea = field => (\n    <Form.TextArea\n        {...field.input}\n        label={field.label}\n        placeholder={field.placeholder}\n    />\n);\nconst renderInputNum = field => (\n    <Form.Field\n        {...field.input}\n        type={field.type}\n        // placeholder={field.placeholder}\n    >\n        <label>{field.label}</label>\n        <Input type=\"number\"></Input>\n    </Form.Field>\n);\nconst renderInput = field => (\n    <div>\n        <Form.Input\n            {...field.input}\n            type={field.type}\n            label={field.label}\n            placeholder={field.placeholder}\n        />\n        {field.meta.touched && ((field.meta.error && <span className=\"text-danger login-danger\">{field.meta.error}</span>) || (field.meta.warning && <span>{field.meta.warning}</span>))}\n    </div>\n);\n\nlet _props = null;\nlet _self = null;\nclass RegistryResetForm extends React.Component{\n    constructor() {\n        super();\n        _self = this;\n    }\n    onHandleSubmit =(a,b)=> {\n        this.props.handleSubmit();\n        setTimeout(() => {\n            _self.props.dispatch(initialize('profile', {\n                submitSucceeded: false\n            }))\n        },1000);\n\n    }\n    render() {\n        const { handleSubmit, reset } = this.props;\n\n        return (\n            <Fragment>\n                <Form onSubmit={this.onHandleSubmit} className={\"fieldForm\"}>\n                    <Form.Group widths=\"equal\" style={{flexDirection:'column', alignContent:'space-around'}}>\n                        <Field className={\"fieldInput\"}\n                               component={renderInput}\n                               name=\"password\"\n                               type=\"password\"\n                               placeholder=\"Password\"\n                        />\n                        <Field className={\"fieldInput\"}\n                               component={renderInput}\n                               name=\"confirmpassword\"\n                               type=\"password\"\n                               placeholder=\"Confirm Password\"\n                        />\n                    </Form.Group>\n                    <Form.Group className={\"submitButtonGroup\"} id={\"submitButtonGroup\"} inline style={{flexDirection:'column', marginBottom:0}}>\n                        <Form.Button primary>Update New Password</Form.Button>\n                    </Form.Group>\n                </Form>\n            </Fragment>\n        );\n    }\n\n};\n\nexport default reduxForm({\n    form: \"profile\",\n    validate,\n    enableReinitialize: false\n})(RegistryResetForm);\n"]},"metadata":{},"sourceType":"module"}