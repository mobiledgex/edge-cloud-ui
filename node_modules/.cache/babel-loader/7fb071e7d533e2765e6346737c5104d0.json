{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/charts/bbLineChart.js\";\nimport React from 'react';\nimport { bb } from \"billboard.js\";\nimport * as d3 from 'd3';\nimport uuid from 'uuid';\nimport \"billboard.js/dist/billboard.css\";\nimport \"./bblineStyles.css\";\n\nvar generateKey = function generateKey(pre) {\n  return \"\".concat(pre, \"_\").concat(new Date().getTime());\n};\n\nvar _self = null;\n\nvar BBLineChart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BBLineChart, _React$Component);\n\n  function BBLineChart() {\n    var _this;\n\n    _classCallCheck(this, BBLineChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BBLineChart).call(this));\n    _this.state = {\n      chartId: uuid.v1(),\n      dataArray: [[\"recv\", 30, 200, 100, 400, 150, 250, 30, 200, 100, 400, 150, 250], [\"send\", 40, 220, 133, 450, 158, 350, 130, 240, 200, 300, 250, 550], [\"time\", \"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]]\n    };\n    _self = _assertThisInitialized(_this);\n    _this.chart = null;\n    _this.positionArray = [];\n    _this.reloadCount = 0;\n    _this.limit = 10;\n    _this.settingDone = false;\n    _this.testCount = 0;\n    return _this;\n  }\n\n  _createClass(BBLineChart, [{\n    key: \"setPositionTick1\",\n    value: function setPositionTick1() {\n      //remember postion\n      d3.selectAll(\".bb-axis-x .tick\").each(function (v) {\n        var textConTrans = this.attributes.transform.textContent;\n        var tPos = textConTrans.indexOf('(');\n        var cPos = textConTrans.indexOf(',');\n        var rePos = textConTrans.substring(tPos + 1, cPos);\n        console.log('remember tick position  == ' + rePos);\n\n        _self.positionArray.push(textConTrans);\n      });\n    }\n  }, {\n    key: \"setPositionTick\",\n    value: function setPositionTick() {\n      //remember postion\n      _self.positionArray = [];\n      d3.selectAll(\".bb-event-rects.bb-event-rects-single rect\").each(function (v) {\n        _self.positionArray.push({\n          x: this.x.baseVal.value,\n          y: this.y.baseVal.value,\n          width: this.width.baseVal.value\n        });\n      });\n      console.log('rect pos info == ', _self.positionArray, _self.positionArray.length);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      console.log('will receive props in bbline chart .... .... ...', nextProps.chartData);\n      this.reloadChart(nextProps.chartData, nextProps.series, this.positionArray, nextProps.lineLimit);\n    }\n  }, {\n    key: \"reloadChart\",\n    value: function reloadChart(data, series, tickPositions, lineLimit) {\n      var seriesData = null;\n\n      if (_self.chart && series) {\n        seriesData = data.concat(series);\n        console.log('reload == ', _self.reloadCount, 'lineLimit=' + lineLimit);\n\n        if (lineLimit && !_self.settingDone) {\n          console.log('arrive limit = ', series[0].length);\n\n          if (_self.reloadCount === 1) {\n            _self.settingDone = true;\n\n            _self.setPositionTick();\n          }\n\n          _self.reloadCount++;\n        } // if(_self.testCount <= 45){\n        //     //reset data chart -------------------\n        //     _self.chart.load(\n        //         {\n        //             columns: seriesData\n        //         }\n        //     )\n        // } else {\n        //     _self.settingDone = false;\n        // }\n\n\n        _self.chart.load({\n          columns: seriesData\n        });\n\n        _self.testCount++;\n\n        if (_self.settingDone) {\n          setTimeout(function () {\n            var idCnt = 0;\n            d3.selectAll(\".bb-event-rects.bb-event-rects-single rect\").each(function (v) {\n              var className = 'bb-event-rect bb-event-rect-' + idCnt;\n              this.attributes.class.nodeValue = className;\n              this.attributes.width.nodeValue = _self.positionArray[idCnt].width;\n              this.attributes.x.nodeValue = _self.positionArray[idCnt].x;\n              this.attributes.y.nodeValue = _self.positionArray[idCnt].y;\n              var classNm = this.attributes.class.textContent;\n              console.log('- index = ' + classNm.lastIndexOf('-'));\n              console.log('rect --------', classNm);\n              idCnt++;\n            });\n          }, 1500);\n        } // let _cnt = 0;\n        // d3.selectAll(\".bb-axis-x .tick tspan\").each(function(v) {\n        //     let format = d3.timeFormat('%H:%M:%S');\n        //     let date = format(new Date(seriesData[2][_cnt + 1]))\n        //     this.textContent = date;\n        //     _cnt ++;\n        // })\n        // let _translate = 0;\n        // d3.selectAll(\".bb-axis-x .tick\").each(function(v) {\n        //     console.log('get tick pos*** '+tickPositions[_translate])\n        //     this.attributes.transform.textContent = tickPositions[_translate];\n        //     _translate ++ ;\n        // })\n\n      }\n    }\n  }, {\n    key: \"getAxisTickValue\",\n    value: function getAxisTickValue() {\n      console.log('get axis tick value =====================');\n      return [\"2019-01-01 12:38:22\", \"2019-01-01 12:38:23\", \"2019-01-01 12:38:24\", \"2019-01-01 12:38:25\", \"2019-01-01 12:38:26\", \"2019-01-01 12:38:27\", \"2019-01-01 12:38:28\"];\n    }\n  }, {\n    key: \"generateChart\",\n    value: function generateChart() {\n      var chartMargin = 10;\n      var chartWidth = this.props.w || 320;\n      var chartHeight = this.props.h || 130;\n      var tooltipShouldShowThreshold = 600; //let dataset = [{},{},{}]\n\n      var chartId = this.props.chartId ? this.props.chartId : this.state.chartId;\n      this.setState({\n        chartId: chartId\n      });\n      console.log('==========chart id=========', chartId);\n      this.chart = bb.generate({\n        size: {\n          height: chartHeight,\n          width: chartWidth\n        },\n        padding: {\n          left: 40\n        },\n        data: {\n          x: \"time\",\n          xFormat: '%Y-%m-%d %H:%M:%S',\n          columns: this.state.dataArray //type: \"spline\",\n\n        },\n        axis: {\n          x: {\n            type: \"timeseries\",\n            tick: {\n              count: 5,\n              culling: true,\n              format: \"%H:%M:%S\"\n            }\n          },\n          y: {\n            label: \"Network Receive\",\n            tick: {\n              count: 5,\n              outer: false,\n              culling: true,\n              format: function format(x) {\n                return parseFloat(x).toFixed(2);\n              }\n            }\n          }\n        },\n        point: {\n          show: true,\n          r: 0.8\n        },\n        color: {\n          pattern: [\"#22cccc\", \"#6699ff\", \"#ff7f0e\", \"#ffbb78\", \"#2ca02c\", \"#98df8a\", \"#d62728\", \"#ff9896\", \"#9467bd\", \"#c5b0d5\", \"#8c564b\", \"#c49c94\", \"#e377c2\", \"#f7b6d2\", \"#7f7f7f\", \"#c7c7c7\", \"#bcbd22\", \"#dbdb8d\", \"#17becf\", \"#9edae5\"]\n        },\n        regions: [{\n          axis: \"y\",\n          start: 300,\n          end: 400,\n          class: \"fill_green\"\n        }, {\n          axis: \"y2\",\n          start: 0,\n          end: 100,\n          class: \"fill_green\"\n        }],\n        legend: {\n          show: false\n        },\n        bindto: '#' + chartId\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.generateChart();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: this.state.chartId,\n        style: {\n          width: '100%',\n          backgroundColor: 'transparent'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return BBLineChart;\n}(React.Component);\n\nexport default BBLineChart;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/charts/bbLineChart.js"],"names":["React","bb","d3","uuid","generateKey","pre","Date","getTime","_self","BBLineChart","state","chartId","v1","dataArray","chart","positionArray","reloadCount","limit","settingDone","testCount","selectAll","each","v","textConTrans","attributes","transform","textContent","tPos","indexOf","cPos","rePos","substring","console","log","push","x","baseVal","value","y","width","length","nextProps","nextContext","chartData","reloadChart","series","lineLimit","data","tickPositions","seriesData","concat","setPositionTick","load","columns","setTimeout","idCnt","className","class","nodeValue","classNm","lastIndexOf","chartMargin","chartWidth","props","w","chartHeight","h","tooltipShouldShowThreshold","setState","generate","size","height","padding","left","xFormat","axis","type","tick","count","culling","format","label","outer","parseFloat","toFixed","point","show","r","color","pattern","regions","start","end","legend","bindto","generateChart","backgroundColor","Component"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport {bb} from \"billboard.js\";\nimport * as d3 from 'd3';\nimport uuid from 'uuid';\nimport \"billboard.js/dist/billboard.css\";\nimport \"./bblineStyles.css\";\n\n\nconst generateKey = (pre) => {\n    return `${ pre }_${ new Date().getTime() }`;\n}\n\nlet _self = null;\nclass BBLineChart extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            chartId:uuid.v1(),\n            dataArray:[\n                [\"recv\", 30, 200, 100, 400, 150, 250, 30, 200, 100, 400, 150, 250],\n                [\"send\", 40, 220, 133, 450, 158, 350, 130, 240, 200, 300, 250, 550],\n                [\"time\", \"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]\n            ]\n        }\n        _self = this;\n        this.chart = null;\n        this.positionArray = [];\n        this.reloadCount = 0;\n        this.limit = 10;\n        this.settingDone = false;\n        this.testCount = 0;\n    }\n    setPositionTick1() {\n        //remember postion\n        d3.selectAll(\".bb-axis-x .tick\").each(function(v) {\n            let textConTrans = this.attributes.transform.textContent;\n            let tPos = textConTrans.indexOf('(');\n            let cPos = textConTrans.indexOf(',');\n            let rePos = textConTrans.substring(tPos+1, cPos);\n            console.log('remember tick position  == '+rePos)\n            _self.positionArray.push(textConTrans)\n\n        })\n    }\n\n    setPositionTick() {\n        //remember postion\n        _self.positionArray = [];\n        d3.selectAll(\".bb-event-rects.bb-event-rects-single rect\").each(function(v) {\n            _self.positionArray.push({x:this.x.baseVal.value, y:this.y.baseVal.value, width:this.width.baseVal.value})\n        })\n        console.log('rect pos info == ',_self.positionArray, _self.positionArray.length)\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        console.log('will receive props in bbline chart .... .... ...', nextProps.chartData)\n        this.reloadChart(nextProps.chartData, nextProps.series, this.positionArray, nextProps.lineLimit);\n    }\n    reloadChart(data, series, tickPositions, lineLimit) {\n        let seriesData = null;\n        if(_self.chart && series) {\n            seriesData = data.concat(series);\n            console.log('reload == ', _self.reloadCount, 'lineLimit='+lineLimit)\n\n\n            if(lineLimit && !_self.settingDone) {\n\n                console.log('arrive limit = ', series[0].length)\n\n                if(_self.reloadCount === 1) {\n                    _self.settingDone = true;\n                    _self.setPositionTick()\n                }\n                _self.reloadCount ++;\n            }\n\n            // if(_self.testCount <= 45){\n            //     //reset data chart -------------------\n            //     _self.chart.load(\n            //         {\n            //             columns: seriesData\n            //         }\n            //     )\n            // } else {\n            //     _self.settingDone = false;\n            // }\n\n\n\n\n            _self.chart.load(\n                {\n                    columns: seriesData\n                }\n            )\n\n\n\n\n            _self.testCount ++;\n\n            if(_self.settingDone) {\n                setTimeout(() => {\n                        let idCnt = 0;\n                        d3.selectAll(\".bb-event-rects.bb-event-rects-single rect\").each(function (v) {\n                            let className = 'bb-event-rect bb-event-rect-' + idCnt;\n                            this.attributes.class.nodeValue = className;\n                            this.attributes.width.nodeValue = _self.positionArray[idCnt].width;\n                            this.attributes.x.nodeValue = _self.positionArray[idCnt].x;\n                            this.attributes.y.nodeValue = _self.positionArray[idCnt].y;\n                            let classNm = this.attributes.class.textContent;\n                            console.log('- index = ' + classNm.lastIndexOf('-'))\n                            console.log('rect --------', classNm)\n                            idCnt++;\n\n                        })\n\n\n\n                    }, 1500\n                )\n\n            }\n\n            // let _cnt = 0;\n            // d3.selectAll(\".bb-axis-x .tick tspan\").each(function(v) {\n            //     let format = d3.timeFormat('%H:%M:%S');\n            //     let date = format(new Date(seriesData[2][_cnt + 1]))\n            //     this.textContent = date;\n            //     _cnt ++;\n            // })\n            // let _translate = 0;\n            // d3.selectAll(\".bb-axis-x .tick\").each(function(v) {\n            //     console.log('get tick pos*** '+tickPositions[_translate])\n            //     this.attributes.transform.textContent = tickPositions[_translate];\n            //     _translate ++ ;\n            // })\n\n        }\n\n    }\n    getAxisTickValue () {\n        console.log('get axis tick value =====================')\n        return [\"2019-01-01 12:38:22\", \"2019-01-01 12:38:23\", \"2019-01-01 12:38:24\", \"2019-01-01 12:38:25\", \"2019-01-01 12:38:26\", \"2019-01-01 12:38:27\", \"2019-01-01 12:38:28\"]\n    }\n    generateChart () {\n        let chartMargin = 10;\n\n        let chartWidth = this.props.w || 320;\n        let chartHeight = this.props.h || 130;\n\n        let tooltipShouldShowThreshold = 600;\n        //let dataset = [{},{},{}]\n\n        let chartId = (this.props.chartId)? this.props.chartId : this.state.chartId;\n        this.setState({chartId:chartId})\n        console.log('==========chart id=========', chartId)\n        this.chart = bb.generate({\n            size: {\n                height: chartHeight,\n                width: chartWidth\n            },\n            padding: {\n                left:40\n            },\n            data: {\n                x: \"time\",\n                xFormat: '%Y-%m-%d %H:%M:%S',\n                columns: this.state.dataArray,\n                //type: \"spline\",\n            },\n            axis: {\n                x: {\n                    type: \"timeseries\",\n                    tick: {\n                        count:5,\n                        culling:true,\n                        format: \"%H:%M:%S\"\n                    }\n                },\n                y: {\n                    label: \"Network Receive\",\n                    tick: {\n                        count:5,\n                        outer: false,\n                        culling: true,\n                        format: function(x) {\n                            return parseFloat(x).toFixed(2)\n                        }\n                    }\n                }\n            },\n            point: {\n                show: true,\n                r: 0.8\n            },\n            color: {\n                pattern: [\n                    \"#22cccc\",\n                    \"#6699ff\",\n                    \"#ff7f0e\",\n                    \"#ffbb78\",\n                    \"#2ca02c\",\n                    \"#98df8a\",\n                    \"#d62728\",\n                    \"#ff9896\",\n                    \"#9467bd\",\n                    \"#c5b0d5\",\n                    \"#8c564b\",\n                    \"#c49c94\",\n                    \"#e377c2\",\n                    \"#f7b6d2\",\n                    \"#7f7f7f\",\n                    \"#c7c7c7\",\n                    \"#bcbd22\",\n                    \"#dbdb8d\",\n                    \"#17becf\",\n                    \"#9edae5\"\n                ]\n            },\n            regions: [\n                {\n                    axis: \"y\",\n                    start: 300,\n                    end: 400,\n                    class: \"fill_green\"\n                },\n                {\n                    axis: \"y2\",\n                    start: 0,\n                    end: 100,\n                    class: \"fill_green\"\n                }\n            ],\n            legend: {\n                show: false\n            },\n            bindto: '#'+chartId\n        });\n    }\n    componentDidMount(){\n\n        this.generateChart();\n\n    }\n    render() {\n\n        return(\n            <div id={this.state.chartId} style={{width:'100%', backgroundColor:'transparent'}} ></div>\n        )\n    }\n}\n\n\n\nexport default BBLineChart;\n"]},"metadata":{},"sourceType":"module"}