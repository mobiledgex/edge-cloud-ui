{"ast":null,"code":"/*\n{\n    \"status\": \"success\",\n    \"data\": {\n        \"resultType\": \"vector\",\n        \"result\": [\n            {\n                \"metric\": {\n                    \"instance\": \"berlin.tdg.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"0.249999999990294\"\n                ]\n            },\n            {\n                \"metric\": {\n                    \"instance\": \"bonn.tdg.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"0.3374999999747814\"\n                ]\n            },\n            {\n                \"metric\": {\n                    \"instance\": \"dashboard.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"7.466666666635618\"\n                ]\n            },\n            {\n                \"metric\": {\n                    \"instance\": \"hamburg.tdg.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"0.27165308406679856\"\n                ]\n            },\n            {\n                \"metric\": {\n                    \"instance\": \"munich-test.tdg.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"0.26250000005043717\"\n                ]\n            }\n        ]\n    }\n}\n\n\n*/\nimport * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar generateData = function generateData(datas) {\n  var result = datas.data.result;\n  var values = [];\n\n  if (result) {\n    result.map(function (data) {\n      moment.locale('es-us'); //let time = moment(data.value[0] * 1000).format('MM-DD-YYYY HH:mm:ss');\n\n      var time = moment(data.value[0] * 1000).format('YYYY-MM-DD HH:mm:ss');\n      var score = data.value[1];\n      var instance = data.metric.instance;\n      values.push({\n        time: time,\n        score: parseFloat(score).toFixed(3),\n        inst: instance\n      });\n    });\n  } else {\n    console.log('there is no result');\n  }\n\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatNetworkIO = function FormatNetworkIO(props) {\n  return generateData(props);\n};\n\nexport default FormatNetworkIO;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/services/formatter/formatFILEUsage.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","generateData","result","data","values","map","locale","time","value","score","instance","metric","push","parseFloat","toFixed","inst","console","log","retunDate","str","year","substring","month","day","hour","minute","date","Date","FormatNetworkIO","props"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;;AACA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AACtB,MAAIC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa,CAAb,EAAe,CAAf,CAAd;AACA,SAAOF,KAAP;AACH,CAHD;;AAIA,IAAMG,OAAO,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,CAAhB;AACA,IAAIC,IAAI,GAAGN,MAAM,GAAGO,MAAT,CAAgB,GAAhB,CAAX;AACA,IAAIC,OAAO,GAAGH,OAAO,CAAEC,IAAI,GAAC,CAAP,CAArB;;AACA,IAAIG,YAAY,GAAG,SAAfA,YAAe,CAACP,KAAD,EAAW;AAC1B,MAAIQ,MAAM,GAAGR,KAAK,CAACS,IAAN,CAAWD,MAAxB;AACA,MAAIE,MAAM,GAAG,EAAb;;AACA,MAAGF,MAAH,EAAU;AACNA,IAAAA,MAAM,CAACG,GAAP,CAAW,UAACF,IAAD,EAAU;AACjBX,MAAAA,MAAM,CAACc,MAAP,CAAc,OAAd,EADiB,CAEjB;;AACA,UAAIC,IAAI,GAAGf,MAAM,CAACW,IAAI,CAACK,KAAL,CAAW,CAAX,IAAgB,IAAjB,CAAN,CAA6BT,MAA7B,CAAoC,qBAApC,CAAX;AACA,UAAIU,KAAK,GAAGN,IAAI,CAACK,KAAL,CAAW,CAAX,CAAZ;AACA,UAAIE,QAAQ,GAAGP,IAAI,CAACQ,MAAL,CAAYD,QAA3B;AACAN,MAAAA,MAAM,CAACQ,IAAP,CAAY;AAACL,QAAAA,IAAI,EAACA,IAAN;AAAYE,QAAAA,KAAK,EAACI,UAAU,CAACJ,KAAD,CAAV,CAAkBK,OAAlB,CAA0B,CAA1B,CAAlB;AAAgDC,QAAAA,IAAI,EAACL;AAArD,OAAZ;AACH,KAPD;AAQH,GATD,MASO;AACHM,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;;AAED,SAAOb,MAAP;AAEH,CAlBD;;AAmBA,IAAMc,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAS;AACvB,MAAIC,IAAI,GAAGD,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAX;AACA,MAAIC,KAAK,GAAGH,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAZ;AACA,MAAIE,GAAG,GAAGJ,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAV;AACA,MAAIG,IAAI,GAAGL,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,EAAjB,CAAX;AACA,MAAII,MAAM,GAAGN,GAAG,CAACE,SAAJ,CAAc,EAAd,EAAkB,EAAlB,CAAb,CALuB,CAMvB;;AACA,MAAIK,IAAI,GAAG,IAAIC,IAAJ,CAASP,IAAT,EAAeE,KAAK,GAAC,CAArB,EAAwBC,GAAxB,EAA6BC,IAA7B,EAAmCC,MAAnC,CAAX;AACA,SAAOjC,MAAM,CAACkC,IAAD,CAAN,CAAa3B,MAAb,CAAoB,OAApB,CAAP;AACH,CATD;;AAUA,IAAM6B,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SACpB5B,YAAY,CAAC4B,KAAD,CADQ;AAAA,CAAxB;;AAIA,eAAeD,eAAf","sourcesContent":["/*\n{\n    \"status\": \"success\",\n    \"data\": {\n        \"resultType\": \"vector\",\n        \"result\": [\n            {\n                \"metric\": {\n                    \"instance\": \"berlin.tdg.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"0.249999999990294\"\n                ]\n            },\n            {\n                \"metric\": {\n                    \"instance\": \"bonn.tdg.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"0.3374999999747814\"\n                ]\n            },\n            {\n                \"metric\": {\n                    \"instance\": \"dashboard.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"7.466666666635618\"\n                ]\n            },\n            {\n                \"metric\": {\n                    \"instance\": \"hamburg.tdg.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"0.27165308406679856\"\n                ]\n            },\n            {\n                \"metric\": {\n                    \"instance\": \"munich-test.tdg.mobiledgex.net:9100\"\n                },\n                \"value\": [\n                    1547276528.172,\n                    \"0.26250000005043717\"\n                ]\n            }\n        ]\n    }\n}\n\n\n*/\nimport * as moment from 'moment';\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nlet generateData = (datas) => {\n    let result = datas.data.result;\n    let values = [];\n    if(result){\n        result.map((data) => {\n            moment.locale('es-us')\n            //let time = moment(data.value[0] * 1000).format('MM-DD-YYYY HH:mm:ss');\n            let time = moment(data.value[0] * 1000).format('YYYY-MM-DD HH:mm:ss');\n            let score = data.value[1];\n            let instance = data.metric.instance;\n            values.push({time:time, score:parseFloat(score).toFixed(3), inst:instance})\n        })\n    } else {\n        console.log('there is no result')\n    }\n\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatNetworkIO = (props) => (\n    generateData(props)\n)\n\nexport default FormatNetworkIO;\n"]},"metadata":{},"sourceType":"module"}