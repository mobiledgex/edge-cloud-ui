{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/siteFourCreateInstForm.js\";\nimport React, { Fragment } from 'react';\nimport { Form, Input, Grid, Tab, Button } from 'semantic-ui-react';\nimport SiteFourCreateFormDefault from './siteFourCreateFormDefault';\nimport BubbleGroup from '../charts/bubbleGroup';\nimport EditMap from '../libs/simpleMaps/with-react-motion/editMap';\nimport ClustersMap from '../libs/simpleMaps/with-react-motion/index_clusters';\nimport * as services from \"../services/service_compute_service\";\nimport * as aggregate from \"../utils\";\nimport Alert from \"react-s-alert\";\nimport * as actions from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { scaleLinear } from \"d3-scale\";\nimport { Field } from \"redux-form\";\nimport './styles.css';\nimport { withRouter } from \"react-router-dom\";\nvar panes = [{\n  menuItem: 'Select Region',\n  render: function render(props) {\n    return React.createElement(Tab.Pane, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, cloudletMap(props, 'cloudlets'));\n  }\n}];\n\nvar renderLocationInput = function renderLocationInput(field) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Form.Field, Object.assign({}, field.input, {\n    type: field.type,\n    placeholder: field.placeholder //value={field.value}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(Input, {\n    fluid: true,\n    type: \"number\",\n    onChange: field.change,\n    placeholder: field.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })));\n};\n\nvar clusterNode = function clusterNode(props) {\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    style: {\n      margin: 0,\n      justifyContent: 'center',\n      backgroundColor: 'rgba(0,0,0,.3)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      fontSize: '1.5em'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, props.clusterName ? props.clusterName : 'cluster')), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(BubbleGroup, {\n    data: props.flavorConfig,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      marginRight: '20px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      width: 24,\n      height: 24,\n      verticalAlign: 'middle',\n      backgroundColor: 'rgba(71, 82, 102, 0.65)',\n      marginRight: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      display: 'inline-block'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Cluster\")), React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      marginRight: '20px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      width: 24,\n      height: 24,\n      verticalAlign: 'middle',\n      backgroundColor: '#ff7d77',\n      opacity: '0.7',\n      marginRight: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      display: 'inline-block'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"MasterNode\")), React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      verticalAlign: 'middle'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      width: 24,\n      height: 24,\n      verticalAlign: 'middle',\n      backgroundColor: '#a2cbff',\n      opacity: '0.7',\n      marginRight: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      display: 'inline-block'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Node\")))));\n};\n\nvar cloudletMap = function cloudletMap(props, type) {\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, type === 'cloudlets' ? React.createElement(\"div\", {\n    className: \"panel_worldmap\",\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(ClustersMap, {\n    parentProps: {\n      locData: props.locData,\n      reg: 'cloudletAndClusterMap',\n      zoomIn: function zoomIn() {\n        return console.log('zoomin');\n      },\n      zoomOut: function zoomOut() {\n        return console.log('zoomout');\n      },\n      resetMap: function resetMap() {\n        return console.log('resetmap');\n      }\n    },\n    zoomControl: {\n      center: [0, 0],\n      zoom: 1.5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })) : React.createElement(EditMap, {\n    parentProps: {\n      devData: props.cloudletData\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};\n\nvar _self = null;\n\nvar SiteFourCreateInstForm =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SiteFourCreateInstForm, _React$PureComponent);\n\n  function SiteFourCreateInstForm() {\n    var _this;\n\n    _classCallCheck(this, SiteFourCreateInstForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SiteFourCreateInstForm).call(this));\n\n    _this.resetLoc = function () {\n      _this.setState({\n        locationLat: null,\n        locationLong: null,\n        toggle: false\n      });\n    };\n\n    _this.onChangeFormState = function (state, value) {\n      var organizKeys = [];\n      var flavorKeys = [];\n      var regions = aggregate.groupBy(_self.state.cloudletData, 'Region');\n\n      if (state === 'Region') {\n        var organiz = _self.state.organizeData;\n        organiz.map(function (aa) {\n          return organizKeys.push(aa.Organization);\n        });\n\n        _self.resetDevData(organizKeys, 'OrganizationName'); //\n\n\n        var operatorKeys = [];\n        setTimeout(function () {\n          var flavor = aggregate.groupBy(_self.state.flavorData, 'Region');\n\n          if (flavor) {\n            if (flavor[_self.props.selectedRegion]) flavor[_self.props.selectedRegion].map(function (ff) {\n              return flavorKeys.push(ff.FlavorName);\n            });\n\n            _self.resetDevData(flavorKeys, 'Flavor');\n\n            var operators = regions[_self.props.selectedRegion];\n\n            if (operators) {\n              operators.map(function (aa) {\n                return operatorKeys.push(aa.Operator);\n              });\n\n              _self.resetDevData(operatorKeys, 'Operator');\n            } else {\n              _self.resetDevData(operatorKeys, 'Operator');\n            }\n          } else {\n            _self.resetDevData(flavorKeys, 'Flavor');\n          }\n        }, 500);\n      } else if (state === 'OrganizationName') {\n        var _operatorKeys = [];\n        setTimeout(function () {\n          var operators = regions[_self.props.selectedRegion];\n\n          if (operators) {\n            operators.map(function (aa) {\n              return _operatorKeys.push(aa.Operator);\n            });\n\n            _self.resetDevData(_operatorKeys, 'Operator');\n\n            _self.setState({\n              activeIndex: 0\n            }); //TODO: 20190521 display cloudlet positioned on map\n\n          }\n        }, 500);\n      } else if (state === 'Operator') {\n        var cloudletKeys = [];\n        setTimeout(function () {\n          var regionArray = regions[_self.props.selectedRegion];\n\n          if (regionArray) {\n            var cloudlets = aggregate.groupBy(regionArray, 'Operator');\n\n            if (cloudlets && cloudlets[_self.props.selectedOperator]) {\n              cloudlets[_self.props.selectedOperator].map(function (aa) {\n                return cloudletKeys.push(aa.CloudletName);\n              });\n\n              _self.resetDevData(cloudletKeys, 'Cloudlet');\n            } else {//this.props.handleAlertInfo('error','There is no Cloudlets in the Region')\n            }\n          } else {//this.props.handleAlertInfo('error','There is no operators in')\n            }\n        }, 500);\n\n        _self.setState({\n          activeIndex: 0\n        });\n      } else if (state === 'Flavor') {\n        setTimeout(function () {\n          _self.setFlavorNode([_self.props.masterNumber, _self.props.nodeNumber]); //change TAB\n\n\n          if (_this.state.clusterShow) _self.setState({\n            activeIndex: 1\n          });\n        }, 500);\n      } else if (state === 'NumberOfNode') {\n        setTimeout(function () {\n          //create node as inserted number\n          _self.setFlavorNode([_self.props.masterNumber, _self.props.nodeNumber]);\n\n          _self.setState({\n            activeIndex: 1\n          });\n        }, 500);\n      } else if (state === 'DeploymentType') {\n        _self.setState({\n          activeIndex: 0\n        });\n      } else if (state === 'Cloudlet') {\n        _this.state.cloudletData.map(function (item) {\n          if (item.Region === _this.props.selectedRegion && item.Operator === _this.props.selectedOperator) {\n            value.map(function (_item) {\n              if (_item == item.CloudletName) {\n                var location = {\n                  region: '',\n                  name: '',\n                  lat: String(item.CloudletLocation.latitude),\n                  long: String(item.CloudletLocation.longitude)\n                };\n\n                _this.props.handleGetRegion(location);\n              }\n            });\n            if (value.length == 0) _this.setState({\n              locData: []\n            });\n          }\n        });\n      }\n    };\n\n    _this.getDataDeveloper = function (region, regionArr) {\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n      var rgn = []; //this.setState({devData:[]})\n\n      if (region !== 'All') {\n        rgn = [region];\n      } else {\n        rgn = regionArr ? regionArr : _this.props.regionInfo.region;\n      }\n\n      rgn.map(function (item) {\n        services.getMCService('ShowCloudlet', {\n          token: store ? store.userToken : 'null',\n          region: item\n        }, _self.receiveResultCloudlet);\n        services.getMCService('ShowFlavor', {\n          token: store ? store.userToken : 'null',\n          region: item\n        }, _self.receiveResultFlavor);\n      });\n      services.getMCService('showOrg', {\n        token: store ? store.userToken : 'null'\n      }, _self.receiveResultOrg, _self);\n    };\n\n    _this.handleTabChange = function (e, _ref) {\n      var activeIndex = _ref.activeIndex;\n      return _this.setState({\n        activeIndex: activeIndex\n      });\n    };\n\n    _this.clusterHide = function (value) {\n      if (value === 'Docker' && panes.length == 2) {\n        panes.pop();\n\n        _this.setState({\n          clusterShow: false\n        });\n      }\n\n      if (value === 'Kubernetes' && panes.length == 1) {\n        panes.push({\n          menuItem: 'Show Cluster',\n          render: function render(props) {\n            return React.createElement(Tab.Pane, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 412\n              },\n              __self: this\n            }, clusterNode(props));\n          }\n        });\n\n        _this.setState({\n          clusterShow: true\n        });\n      }\n    };\n\n    _this.handleChangeLong = function (e, _ref2) {\n      var value = _ref2.value;\n      // if(value == '-') {\n      //     this.setState({ locationLong: value })\n      //     return\n      // }\n      var onlyNum = value;\n      var count = [];\n\n      if (onlyNum.match(/[.]/g) != null) {\n        count = onlyNum.match(/[.]/g);\n      }\n\n      if (onlyNum > 180 || onlyNum < -180 || /[^-0-9.]/g.test(onlyNum) || count.length > 1) {\n        _this.setState({\n          longerror: '-180 ~ 180'\n        });\n\n        e.target.value = null;\n        return;\n      }\n\n      if (onlyNum != 0) {\n        onlyNum = onlyNum.replace(/(^0+)/, \"\");\n      }\n\n      _this.setState({\n        locationLong: onlyNum,\n        longerror: ''\n      });\n\n      _this.locationValue(onlyNum, _this.state.locationLat);\n    };\n\n    _this.handleChangeLat = function (e, _ref3) {\n      var value = _ref3.value;\n      var onlyNum = value;\n      var count = [];\n\n      if (onlyNum.match(/[.]/g) != null) {\n        count = onlyNum.match(/[.]/g);\n      }\n\n      if (onlyNum > 90 || onlyNum < -90 || /[^-0-9.]/g.test(onlyNum) || count.length > 1) {\n        _this.setState({\n          laterror: '-90 ~ 90'\n        });\n\n        e.target.value = null;\n        return;\n      }\n\n      if (onlyNum != 0) {\n        onlyNum = onlyNum.replace(/(^0+)/, \"\");\n      }\n\n      _this.setState({\n        locationLat: onlyNum,\n        laterror: ''\n      });\n\n      _this.locationValue(_this.state.locationLong, onlyNum);\n    };\n\n    _this.locationValue = function (long, lat) {\n      if (long && lat) {\n        _this.setState({\n          locationLongLat: [Number(long), Number(lat)]\n        });\n      } else {\n        _this.setState({\n          locationLongLat: null\n        });\n      } // handle input value to input filed that lat/long fileds as redux\n\n\n      var location = {\n        region: '',\n        name: '',\n        lat: lat,\n        long: long\n      };\n      console.log(\"locationlocationlocation\", location);\n\n      _self.props.handleGetRegion(location); // handle send value to map for indicate lat/long\n\n    };\n\n    _this.state = {\n      cloudletList: [],\n      devOptionsOperator: [],\n      devOptionsDeveloper: [],\n      devOptionsCloudlet: [],\n      devOptionsFour: [],\n      devOptionsFive: [],\n      devOptionsSix: [],\n      devOptionsCF: [],\n      devData: null,\n      keys: null,\n      region: 'All',\n      flavorConfig: null,\n      clusterName: null,\n      activeIndex: 0,\n      organizeData: [],\n      cloudletData: [],\n      flavorData: [],\n      clusterShow: true,\n      regionInfo: {},\n      locationLong: null,\n      locationLat: null,\n      locationLongLat: [],\n      laterror: '',\n      longerror: '',\n      locData: [],\n      regionToggle: false\n    };\n    _self = _assertThisInitialized(_this);\n    _this.loopReqCount = 3; //cloudlet(operators), cluster, flavor\n\n    _this.regionCount = 2; // US, EU\n\n    return _this;\n  }\n\n  _createClass(SiteFourCreateInstForm, [{\n    key: \"zoomIn\",\n    value: function zoomIn(detailMode) {}\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut(detailMode) {}\n  }, {\n    key: \"resetMap\",\n    value: function resetMap(detailMode) {}\n  }, {\n    key: \"locationLongLat\",\n    value: function locationLongLat() {}\n  }, {\n    key: \"receiveResultOper\",\n    value: function receiveResultOper(result) {\n      var operArr = [];\n      var CloudArr = [];\n    }\n  }, {\n    key: \"receiveResultOrg\",\n    value: function receiveResultOrg(result) {\n      if (result.error) {\n        this.props.handleAlertInfo('error', result.error);\n      } else {\n        _self.groupJoin(result, 'organization');\n      }\n    }\n  }, {\n    key: \"receiveResultCloudlet\",\n    value: function receiveResultCloudlet(result) {\n      if (result.error) {\n        this.props.handleAlertInfo('error', result.error);\n      } else {\n        _self.groupJoin(result, 'cloudlet');\n      }\n    }\n  }, {\n    key: \"receiveResultFlavor\",\n    value: function receiveResultFlavor(result) {\n      if (result.error) {\n        this.props.handleAlertInfo('error', result.error);\n      } else {\n        _self.groupJoin(result, 'flavor');\n      }\n    }\n  }, {\n    key: \"generateCloudletItem\",\n    value: function generateCloudletItem(result) {\n      var keys = this.state.keys;\n      var cloudlet = aggregate.groupBy(result, 'CloudletName');\n    }\n  }, {\n    key: \"groupJoin\",\n    value: function groupJoin(result, cmpt) {\n      this.props.data.handleLoadingSpinner(false);\n\n      if (cmpt == 'organization') {\n        this.setState({\n          organizeData: this.state.organizeData.concat(result)\n        });\n      } else if (cmpt == 'cloudlet') {\n        this.setState({\n          cloudletData: this.state.cloudletData.concat(result)\n        });\n      } else if (cmpt == 'flavor') {\n        this.setState({\n          flavorData: this.state.flavorData.concat(result)\n        });\n      }\n\n      if (this.state.organizeData.length === this.regionCount && this.state.cloudletData.length === this.regionCount && this.state.flavorData.length === this.regionCount) {\n        var clusterInst = this.state.organizeData;\n        var cloudlet = this.state.cloudletData;\n        var arr = [];\n        clusterInst.map(function (itemCinst, i) {\n          cloudlet.map(function (itemClet, j) {\n            if (itemCinst.Cloudlet == itemClet.CloudletName) {\n              itemCinst.CloudletLocation = itemClet.CloudletLocation;\n            }\n          });\n          arr.push(itemCinst);\n        }); //TODO: 20190516 set devData\n      }\n    }\n  }, {\n    key: \"resetDevData\",\n    value: function resetDevData(keys, field) {\n      var tabNo = 0;\n      var filteredKeys = aggregate.removeDuplicate(keys);\n\n      var _keys = Object.assign({}, _self.state.devData.keys[tabNo]);\n\n      if (_keys[field]) {\n        _keys[field].items = filteredKeys;\n\n        _self.setState({\n          keys: _keys\n        });\n      }\n    }\n  }, {\n    key: \"resetDevInputData\",\n    value: function resetDevInputData(keys, field) {\n      var tabNo = 0;\n    }\n  }, {\n    key: \"setFlavorNode\",\n    value: function setFlavorNode(keys, flavor) {\n      var master = [];\n\n      for (var i = 0; i < Number(keys[0]); i++) {\n        master.push(i);\n      }\n\n      var nodes = [];\n\n      for (var j = 0; j < Number(keys[1]) + 1; j++) {\n        nodes.push(j);\n      }\n\n      var getChild = function getChild(value, idx) {\n        return {\n          \"name\": value,\n          \"value\": idx === 0 ? 200 : 200,\n          \"color\": idx === 0 ? \"#ff7d77\" : \"#a2cbff\"\n        };\n      };\n\n      var flconfig = {\n        \"name\": 'NO Name',\n        \"children\": [{\n          \"name\": \"Master\",\n          \"children\": nodes.map(function (node, i) {\n            return getChild(flavor, i);\n          })\n        }]\n      };\n\n      _self.setState({\n        flavorConfig: flconfig,\n        clusterName: _self.props.clusterName\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// if(localStorage.selectMenu == 'Cluster Instances') this.getDataDeveloper(this.props.data.region)\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.handleGetRegion(null);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      if (nextProps.regionInfo.region.length && !this.state.regionToggle) {\n        _self.setState({\n          regionToggle: true\n        });\n\n        if (localStorage.selectMenu == 'Cluster Instances') this.getDataDeveloper(nextProps.data.region, nextProps.regionInfo.region);\n      }\n\n      if (nextProps.data) this.setState({\n        devData: nextProps.data,\n        keys: nextProps.keys\n      }); //reset cluster and node count\n\n      if (nextProps.nodeNumber || nextProps.selectedFlavor) {\n        this.setFlavorNode([nextProps.masterNumber, nextProps.nodeNumber], nextProps.selectedFlavor);\n      } // case click a region on the map\n\n\n      if (nextProps.getRegion) {\n        var data = {\n          CloudletLocation: {\n            latitude: Number(nextProps.getRegion.lat),\n            longitude: Number(nextProps.getRegion.long)\n          }\n        };\n        this.setState({\n          regionInfo: nextProps.getRegion,\n          locData: localStorage.selectMenu == 'Cluster Instances' ? this.state.locData.concat(data) : [data],\n          locationLat: nextProps.getRegion.lat,\n          locationLong: nextProps.getRegion.long\n        }); // if(nextProps.getRegion.lat == '' && nextProps.getRegion.long == ''){\n        //     this.setState({locData:[]})\n        // }\n\n        this.props.handleGetRegion(null);\n      }\n    }\n  }, {\n    key: \"gotoUrl\",\n    value: function gotoUrl(num) {\n      _self.props.history.push({\n        pathname: '/site4',\n        search: 'pg=' + num\n      });\n\n      _self.props.history.location.search = 'pg=' + num;\n\n      _self.props.handleChangeSite({\n        mainPath: '/site4',\n        subPath: 'pg=' + num\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          activeIndex = _this$state.activeIndex,\n          clusterName = _this$state.clusterName;\n      var _this$props = this.props,\n          data = _this$props.data,\n          dimmer = _this$props.dimmer,\n          selected = _this$props.selected;\n      return React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        columns: 2,\n        className: \"grid_map_container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 8,\n        className: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }, React.createElement(SiteFourCreateFormDefault, {\n        data: this.state.devData,\n        pId: 0,\n        getUserRole: this.props.getUserRole,\n        gotoUrl: this.gotoUrl,\n        clusterHide: this.clusterHide,\n        toggleSubmit: this.props.toggleSubmit,\n        validError: this.props.validError,\n        onSubmit: function onSubmit() {\n          return console.log('submit form');\n        },\n        selected: this.props.selectedRegion,\n        regionInfo: this.state.regionInfo,\n        dimmer: dimmer,\n        handleChangeLat: this.handleChangeLat,\n        handleChangeLong: this.handleChangeLong,\n        onChangeState: this.onChangeFormState,\n        latError: this.state.laterror,\n        longError: this.state.longerror,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 8,\n        className: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, React.createElement(Tab, Object.assign({\n        className: \"globe_map\",\n        activeIndex: activeIndex,\n        clusterName: clusterName,\n        onTabChange: this.handleTabChange,\n        panes: panes\n      }, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return SiteFourCreateInstForm;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var account = state.registryAccount.account;\n  var dimm = state.btnMnmt;\n  var accountInfo = account ? account + Math.random() * 10000 : null;\n  var dimmInfo = dimm ? dimm : null;\n  var submitVal = null;\n  var selectedRegion = null;\n  var selectedCloudlet = null;\n  var selectedOperator = null;\n  var selectedFlavor = null;\n  var flavors = null;\n  var formValues = null;\n  var clusterName = null;\n  var masterNumber = null;\n  var nodeNumber = null;\n  var getRegion = state.getRegion ? state.getRegion.region : null;\n  var regionInfo = state.regionInfo ? state.regionInfo : null;\n\n  if (state.form.createAppFormDefault) {\n    formValues = state.form.createAppFormDefault.values;\n\n    if (state.form.createAppFormDefault.values.Region !== \"\") {\n      selectedRegion = state.form.createAppFormDefault.values.Region; //하위 오퍼레이터 리스트 아이템 변경\n    }\n\n    if (state.form.createAppFormDefault.values.Cloudlet !== \"\") {\n      selectedCloudlet = state.form.createAppFormDefault.values.Cloudlet;\n    }\n\n    if (state.form.createAppFormDefault.values.Operator !== \"\") {\n      selectedOperator = state.form.createAppFormDefault.values.Operator;\n    }\n\n    if (state.form.createAppFormDefault.values.Flavor !== \"\") {\n      selectedFlavor = state.form.createAppFormDefault.values.Flavor;\n    }\n\n    if (state.form.createAppFormDefault.values.NumberOfNode !== \"\") {\n      nodeNumber = state.form.createAppFormDefault.values.NumberOfNode;\n      masterNumber = 1;\n    }\n  }\n\n  return {\n    selectedRegion: selectedRegion,\n    selectedOperator: selectedOperator,\n    clusterName: clusterName,\n    formValues: formValues,\n    selectedFlavor: selectedFlavor,\n    masterNumber: masterNumber,\n    nodeNumber: nodeNumber,\n    getRegion: getRegion,\n    regionInfo: regionInfo\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleChangeSite: function handleChangeSite(data) {\n      dispatch(actions.changeSite(data));\n    },\n    handleInjectDeveloper: function handleInjectDeveloper(data) {\n      dispatch(actions.registDeveloper(data));\n    },\n    handleLoadingSpinner: function handleLoadingSpinner(data) {\n      dispatch(actions.loadingSpinner(data));\n    },\n    handleGetRegion: function handleGetRegion(data) {\n      dispatch(actions.getRegion(data));\n    },\n    handleAlertInfo: function handleAlertInfo(mode, msg) {\n      dispatch(actions.alertInfo(mode, msg));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(SiteFourCreateInstForm));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/container/siteFourCreateInstForm.js"],"names":["React","Fragment","Form","Input","Grid","Tab","Button","SiteFourCreateFormDefault","BubbleGroup","EditMap","ClustersMap","services","aggregate","Alert","actions","connect","scaleLinear","Field","withRouter","panes","menuItem","render","props","cloudletMap","renderLocationInput","field","input","type","placeholder","change","clusterNode","margin","justifyContent","backgroundColor","fontSize","clusterName","flavorConfig","display","verticalAlign","marginRight","width","height","opacity","locData","reg","zoomIn","console","log","zoomOut","resetMap","center","zoom","devData","cloudletData","_self","SiteFourCreateInstForm","resetLoc","setState","locationLat","locationLong","toggle","onChangeFormState","state","value","organizKeys","flavorKeys","regions","groupBy","organiz","organizeData","map","aa","push","Organization","resetDevData","operatorKeys","setTimeout","flavor","flavorData","selectedRegion","ff","FlavorName","operators","Operator","activeIndex","cloudletKeys","regionArray","cloudlets","selectedOperator","CloudletName","setFlavorNode","masterNumber","nodeNumber","clusterShow","item","Region","_item","location","region","name","lat","String","CloudletLocation","latitude","long","longitude","handleGetRegion","length","getDataDeveloper","regionArr","store","localStorage","PROJECT_INIT","JSON","parse","rgn","regionInfo","getMCService","token","userToken","receiveResultCloudlet","receiveResultFlavor","receiveResultOrg","handleTabChange","e","clusterHide","pop","handleChangeLong","onlyNum","count","match","test","longerror","target","replace","locationValue","handleChangeLat","laterror","locationLongLat","Number","cloudletList","devOptionsOperator","devOptionsDeveloper","devOptionsCloudlet","devOptionsFour","devOptionsFive","devOptionsSix","devOptionsCF","keys","regionToggle","loopReqCount","regionCount","detailMode","result","operArr","CloudArr","error","handleAlertInfo","groupJoin","cloudlet","cmpt","data","handleLoadingSpinner","concat","clusterInst","arr","itemCinst","i","itemClet","j","Cloudlet","tabNo","filteredKeys","removeDuplicate","_keys","Object","assign","items","master","nodes","getChild","idx","flconfig","node","nextProps","nextContext","selectMenu","selectedFlavor","getRegion","num","history","pathname","search","handleChangeSite","mainPath","subPath","dimmer","selected","getUserRole","gotoUrl","toggleSubmit","validError","PureComponent","mapStateToProps","account","registryAccount","dimm","btnMnmt","accountInfo","Math","random","dimmInfo","submitVal","selectedCloudlet","flavors","formValues","form","createAppFormDefault","values","Flavor","NumberOfNode","mapDispatchProps","dispatch","changeSite","handleInjectDeveloper","registDeveloper","loadingSpinner","mode","msg","alertInfo"],"mappings":"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","sourcesContent":["import React, {Fragment} from 'react';\nimport {Form, Input, Grid, Tab, Button} from 'semantic-ui-react';\nimport SiteFourCreateFormDefault from './siteFourCreateFormDefault';\nimport BubbleGroup from '../charts/bubbleGroup';\nimport EditMap from '../libs/simpleMaps/with-react-motion/editMap';\nimport ClustersMap from '../libs/simpleMaps/with-react-motion/index_clusters';\nimport * as services from \"../services/service_compute_service\";\nimport * as aggregate from \"../utils\";\nimport Alert from \"react-s-alert\";\nimport * as actions from \"../actions\";\nimport {connect} from \"react-redux\";\nimport {scaleLinear} from \"d3-scale\";\nimport {Field} from \"redux-form\";\nimport './styles.css';\nimport {withRouter} from \"react-router-dom\";\n\n\nconst panes = [\n    { menuItem: 'Select Region', render: (props) => <Tab.Pane>{cloudletMap(props, 'cloudlets')}</Tab.Pane> }\n\n]\n\nconst renderLocationInput = field => (\n    <div>\n        <Form.Field\n            {...field.input}\n            type={field.type}\n            placeholder={field.placeholder}\n            //value={field.value}\n        >\n            <Input fluid type=\"number\"\n                   onChange={field.change}\n                   placeholder={field.placeholder}></Input>\n        </Form.Field>\n        {/*<Form.Input*/}\n        {/*    {...field.input}*/}\n        {/*    type={field.type}*/}\n        {/*    placeholder={field.placeholder}*/}\n        {/*    onChange={field.change}*/}\n        {/*    //value={field.value}*/}\n        {/*    fluid*/}\n        {/*/>*/}\n    </div>\n\n);\n\nconst clusterNode = (props) => (\n    <Fragment>\n        <Grid style={{margin:0, justifyContent:'center', backgroundColor:'rgba(0,0,0,.3)'}}>\n            <Grid.Row>\n                <label style={{fontSize:'1.5em'}}>{props.clusterName ? props.clusterName : 'cluster'}</label>\n            </Grid.Row>\n            <Grid.Row>\n                <BubbleGroup data={props.flavorConfig}></BubbleGroup>\n            </Grid.Row>\n            <Grid.Row>\n                <div style={{display:'inline-block', verticalAlign: 'middle', marginRight:'20px'}}>\n                    <div style={{display:'inline-block', width:24, height:24, verticalAlign: 'middle', backgroundColor: 'rgba(71, 82, 102, 0.65)', marginRight:'10px'}}></div>\n                    <div style={{display:'inline-block'}}>Cluster</div>\n                </div>\n                <div style={{display:'inline-block', verticalAlign: 'middle', marginRight:'20px'}}>\n                    <div style={{display:'inline-block', width:24, height:24, verticalAlign: 'middle', backgroundColor: '#ff7d77', opacity:'0.7', marginRight:'10px'}}></div>\n                    <div style={{display:'inline-block'}}>MasterNode</div>\n                </div>\n                <div style={{display:'inline-block', verticalAlign: 'middle'}}>\n                    <div style={{display:'inline-block', width:24, height:24, verticalAlign: 'middle', backgroundColor: '#a2cbff', opacity:'0.7', marginRight:'10px'}}></div>\n                    <div style={{display:'inline-block'}}>Node</div>\n                </div>\n            </Grid.Row>\n        </Grid>\n        {/*<div style={{display:'flex', justifyContent:'center', width:'100%',backgroundColor:'rgba(0,0,0,.3)'}}  onClick={()=>console.log('45433',props)}>*/}\n        {/*    <BubbleGroup data={props.flavorConfig}></BubbleGroup>*/}\n        {/*</div>*/}\n    </Fragment>\n)\nconst cloudletMap = (props, type) => (\n    <Fragment>\n        {(type === 'cloudlets')?\n        <div className='panel_worldmap' style={{width:'100%'}}>\n            <ClustersMap parentProps={{locData:props.locData, reg:'cloudletAndClusterMap', zoomIn:()=>console.log('zoomin'), zoomOut:()=>console.log('zoomout'), resetMap:()=>console.log('resetmap') }} zoomControl={{center:[0, 0], zoom:1.5} }></ClustersMap>\n        </div>\n\n        :\n        <EditMap parentProps={{devData:props.cloudletData}}></EditMap>}\n\n    </Fragment>\n)\nlet _self = null;\nclass SiteFourCreateInstForm extends React.PureComponent {\n    constructor() {\n        super();\n        this.state = {\n            cloudletList:[],\n            devOptionsOperator:[],\n            devOptionsDeveloper:[],\n            devOptionsCloudlet:[],\n            devOptionsFour:[],\n            devOptionsFive:[],\n            devOptionsSix:[],\n            devOptionsCF:[],\n            devData:null,\n            keys:null,\n            region:'All',\n            flavorConfig:null,\n            clusterName:null,\n            activeIndex:0,\n            organizeData:[],\n            cloudletData:[],\n            flavorData:[],\n            clusterShow:true,\n            regionInfo:{},\n            locationLong:null,\n            locationLat:null,\n            locationLongLat:[],\n            laterror:'',\n            longerror:'',\n            locData:[],\n            regionToggle:false\n        }\n        _self = this;\n        this.loopReqCount = 3; //cloudlet(operators), cluster, flavor\n        this.regionCount = 2; // US, EU\n    }\n    zoomIn(detailMode) {\n\n    }\n    zoomOut(detailMode) {\n\n    }\n    resetMap(detailMode) {\n\n    }\n    locationLongLat() {\n\n    }\n    resetLoc = () => {\n        this.setState({ locationLat: null,locationLong:null,toggle:false })\n    }\n    receiveResultOper(result) {\n        let operArr = [];\n        let CloudArr = [];\n\n\n    }\n\n    receiveResultOrg(result) {\n        if(result.error) {\n            this.props.handleAlertInfo('error',result.error)\n        } else {\n            _self.groupJoin(result,'organization')\n        }\n    }\n    receiveResultCloudlet(result) {\n        if(result.error) {\n            this.props.handleAlertInfo('error',result.error)\n        } else {\n            _self.groupJoin(result,'cloudlet')\n        }\n    }\n    receiveResultFlavor(result) {\n        if(result.error) {\n            this.props.handleAlertInfo('error',result.error)\n        } else {\n            _self.groupJoin(result,'flavor')\n        }\n    }\n\n    generateCloudletItem(result) {\n        let keys = this.state.keys;\n        let cloudlet = aggregate.groupBy(result, 'CloudletName')\n    }\n    groupJoin(result,cmpt){\n\n        this.props.data.handleLoadingSpinner(false);\n\n        if(cmpt == 'organization'){\n            this.setState({organizeData : this.state.organizeData.concat(result)});\n        }\n        else if(cmpt == 'cloudlet') {\n            this.setState({cloudletData : this.state.cloudletData.concat(result)});\n        }\n        else if(cmpt == 'flavor') {\n            this.setState({flavorData : this.state.flavorData.concat(result)});\n        }\n\n\n        if(this.state.organizeData.length === this.regionCount && this.state.cloudletData.length  === this.regionCount && this.state.flavorData.length  === this.regionCount) {\n            let clusterInst = this.state.organizeData;\n            let cloudlet = this.state.cloudletData;\n            let arr =[]\n            clusterInst.map((itemCinst,i) => {\n                cloudlet.map((itemClet,j) => {\n                    if(itemCinst.Cloudlet == itemClet.CloudletName) {\n                        itemCinst.CloudletLocation = itemClet.CloudletLocation;\n                    }\n                })\n                arr.push(itemCinst)\n            })\n            //TODO: 20190516 set devData\n\n        }\n    }\n    resetDevData(keys,field) {\n        let tabNo = 0;\n        let filteredKeys = aggregate.removeDuplicate(keys)\n        let _keys = Object.assign({},_self.state.devData.keys[tabNo]);\n        if(_keys[field]) {\n            _keys[field].items = filteredKeys;\n            _self.setState({keys: _keys})\n        }\n\n    }\n    resetDevInputData(keys,field) {\n        let tabNo = 0;\n\n    }\n\n    onChangeFormState = (state,value) => {\n        let organizKeys = [];\n        let flavorKeys = [];\n        let regions = aggregate.groupBy(_self.state.cloudletData, 'Region')\n        if(state === 'Region') {\n            let organiz = _self.state.organizeData;\n            organiz.map(\n                (aa) => organizKeys.push(aa.Organization)\n            )\n            _self.resetDevData(organizKeys, 'OrganizationName');\n            //\n            let operatorKeys = [];\n            setTimeout(() => {\n                let flavor = aggregate.groupBy(_self.state.flavorData, 'Region');\n                if(flavor) {\n                    if(flavor[_self.props.selectedRegion]) flavor[_self.props.selectedRegion].map((ff) => flavorKeys.push(ff.FlavorName));\n                    _self.resetDevData(flavorKeys, 'Flavor')\n                    let operators = regions[_self.props.selectedRegion];\n                    if(operators) {\n                        operators.map(\n                            (aa) => operatorKeys.push(aa.Operator)\n                        )\n                        _self.resetDevData(operatorKeys, 'Operator');\n                    } else {\n                        _self.resetDevData(operatorKeys, 'Operator');\n                    }\n                } else {\n                    _self.resetDevData(flavorKeys, 'Flavor');\n                }\n\n            }, 500)\n\n\n        } else if(state === 'OrganizationName') {\n            let operatorKeys = [];\n            setTimeout(() => {\n                let operators = regions[_self.props.selectedRegion];\n                if(operators) {\n                    operators.map(\n                        (aa) => operatorKeys.push(aa.Operator)\n                    )\n                    _self.resetDevData(operatorKeys, 'Operator');\n                    _self.setState({activeIndex:0})\n                    //TODO: 20190521 display cloudlet positioned on map\n\n                }\n            }, 500)\n        } else if(state === 'Operator') {\n            let cloudletKeys = [];\n            setTimeout(() => {\n                let regionArray = regions[_self.props.selectedRegion];\n                if(regionArray) {\n                    let cloudlets = aggregate.groupBy(regionArray, 'Operator')\n                    if(cloudlets && cloudlets[_self.props.selectedOperator]){\n                        cloudlets[_self.props.selectedOperator].map(\n                            (aa) => cloudletKeys.push(aa.CloudletName)\n                        )\n                        _self.resetDevData(cloudletKeys, 'Cloudlet');\n                    } else {\n                        //this.props.handleAlertInfo('error','There is no Cloudlets in the Region')\n                    }\n\n                } else {\n                    //this.props.handleAlertInfo('error','There is no operators in')\n                }\n            }, 500)\n            _self.setState({activeIndex:0})\n        } else if(state === 'Flavor') {\n\n            setTimeout(() => {\n                _self.setFlavorNode([_self.props.masterNumber,_self.props.nodeNumber]);\n                //change TAB\n                if(this.state.clusterShow) _self.setState({activeIndex:1})\n            }, 500)\n        } else if(state === 'NumberOfNode') {\n            setTimeout(() => {\n                //create node as inserted number\n                _self.setFlavorNode([_self.props.masterNumber,_self.props.nodeNumber]);\n                _self.setState({activeIndex:1})\n            }, 500)\n        } else if(state === 'DeploymentType') {\n            _self.setState({activeIndex:0})\n        } else if(state === 'Cloudlet'){\n            this.state.cloudletData.map((item) => {\n                if(item.Region === this.props.selectedRegion && item.Operator === this.props.selectedOperator){\n                    value.map((_item) => {\n                        if(_item == item.CloudletName){\n                            let location = {region:'',name:'', lat:String(item.CloudletLocation.latitude), long:String(item.CloudletLocation.longitude)};\n                            this.props.handleGetRegion(location);\n                        }\n                    })\n                    if(value.length == 0) this.setState({locData:[]})\n                }\n            })\n        }\n    }\n    setFlavorNode(keys, flavor) {\n        let master = [];\n        for( var i=0; i<Number(keys[0]); i++) {\n            master.push(i)\n        }\n        let nodes = [];\n        for( var j=0; j<Number(keys[1])+1; j++) {\n            nodes.push(j)\n        }\n        const getChild = (value, idx) => (\n            {\n                \"name\": value,\n                \"value\": idx === 0 ? 200 : 200,\n                \"color\": idx === 0 ? \"#ff7d77\" : \"#a2cbff\"\n            }\n        )\n        let flconfig = {\n            \"name\": 'NO Name',\n            \"children\": [\n                {\n                    \"name\": \"Master\",\n                    \"children\": nodes.map((node, i) => getChild(flavor,i))\n                }\n\n            ]\n        }\n        _self.setState({flavorConfig:flconfig, clusterName:_self.props.clusterName})\n    }\n\n    getDataDeveloper = (region,regionArr) => {\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        let rgn = [];\n        //this.setState({devData:[]})\n        if(region !== 'All'){\n            rgn = [region]\n        } else {\n            rgn = (regionArr)?regionArr:this.props.regionInfo.region;\n        }\n\n        rgn.map((item) => {\n            services.getMCService('ShowCloudlet',{token:store ? store.userToken : 'null', region:item}, _self.receiveResultCloudlet)\n            services.getMCService('ShowFlavor',{token:store ? store.userToken : 'null', region:item}, _self.receiveResultFlavor)\n\n        })\n\n        services.getMCService('showOrg',{token:store ? store.userToken : 'null'}, _self.receiveResultOrg, _self)\n    }\n    handleTabChange = (e, { activeIndex }) => this.setState({ activeIndex })\n    componentDidMount() {\n        // if(localStorage.selectMenu == 'Cluster Instances') this.getDataDeveloper(this.props.data.region)\n    }\n    componentWillUnmount(){\n        this.props.handleGetRegion(null);\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.regionInfo.region.length && !this.state.regionToggle) {\n            _self.setState({regionToggle:true})\n            if(localStorage.selectMenu == 'Cluster Instances') this.getDataDeveloper(nextProps.data.region,nextProps.regionInfo.region)\n        }\n        \n        if(nextProps.data) this.setState({devData: nextProps.data, keys:nextProps.keys})\n        //reset cluster and node count\n        if(nextProps.nodeNumber || nextProps.selectedFlavor) {\n            this.setFlavorNode([nextProps.masterNumber,nextProps.nodeNumber],nextProps.selectedFlavor);\n        }\n\n        // case click a region on the map\n        if(nextProps.getRegion) {\n            let data = {CloudletLocation: {latitude: Number(nextProps.getRegion.lat), longitude: Number(nextProps.getRegion.long)}};\n            this.setState({\n                regionInfo:nextProps.getRegion,\n                locData:(localStorage.selectMenu == 'Cluster Instances')?this.state.locData.concat(data):[data],\n                locationLat:nextProps.getRegion.lat,\n                locationLong:nextProps.getRegion.long\n            })\n            // if(nextProps.getRegion.lat == '' && nextProps.getRegion.long == ''){\n            //     this.setState({locData:[]})\n            // }\n            this.props.handleGetRegion(null);\n        }\n\n    }\n\n    gotoUrl(num) {\n        _self.props.history.push({\n            pathname: '/site4',\n            search: 'pg='+num\n        });\n        _self.props.history.location.search = 'pg='+num;\n        _self.props.handleChangeSite({mainPath:'/site4', subPath: 'pg='+num})\n    }\n\n    clusterHide = (value) => {\n        if(value === 'Docker' && panes.length == 2) {\n            panes.pop();\n            this.setState({clusterShow:false})\n        }\n        if(value === 'Kubernetes' && panes.length == 1){\n            panes.push({ menuItem: 'Show Cluster', render: (props) => <Tab.Pane>{clusterNode(props)}</Tab.Pane> })\n            this.setState({clusterShow:true})\n        } \n    }\n    handleChangeLong = (e, {value}) => {\n        // if(value == '-') {\n        //     this.setState({ locationLong: value })\n        //     return\n        // }\n        let onlyNum = value;\n        let count = [];\n        if(onlyNum.match(/[.]/g) != null) {\n            count = onlyNum.match(/[.]/g)\n        }\n        if(onlyNum > 180 || onlyNum < -180 || /[^-0-9.]/g.test(onlyNum) || count.length > 1) {\n            this.setState({longerror:'-180 ~ 180'})\n            e.target.value=null;\n            return\n        }\n\n        if(onlyNum != 0) {\n            onlyNum = onlyNum.replace(/(^0+)/, \"\")\n        } \n\n        this.setState({ locationLong: onlyNum, longerror:'' })\n        this.locationValue(onlyNum,this.state.locationLat)\n    }\n    handleChangeLat = (e, {value}) => {\n        let onlyNum = value;\n        let count = [];\n        if(onlyNum.match(/[.]/g) != null) {\n            count = onlyNum.match(/[.]/g)\n        }\n        if(onlyNum > 90 || onlyNum < -90 || /[^-0-9.]/g.test(onlyNum) || count.length > 1) {\n            this.setState({laterror:'-90 ~ 90'})\n            e.target.value=null;\n            return\n        }\n        \n        if(onlyNum != 0) {\n            onlyNum = onlyNum.replace(/(^0+)/, \"\")\n        } \n        this.setState({ locationLat: onlyNum, laterror:'' })\n        this.locationValue(this.state.locationLong,onlyNum)\n    }\n    locationValue = (long,lat) => {\n        if(long && lat){\n            this.setState({ locationLongLat: [Number(long),Number(lat)] })\n\n        } else {\n            this.setState({ locationLongLat: null})\n        }\n        // handle input value to input filed that lat/long fileds as redux\n        let location = {region:'',name:'', lat:lat, long:long}\n        console.log(\"locationlocationlocation\",location)\n        _self.props.handleGetRegion(location)\n\n        // handle send value to map for indicate lat/long\n\n    }\n\n    render() {\n        const { activeIndex, clusterName } = this.state;\n        let {data, dimmer, selected} = this.props;\n        return (\n            <Grid>\n                <Grid.Row columns={2} className=\"grid_map_container\">\n                    <Grid.Column width={8} className=\"left\">\n                        <SiteFourCreateFormDefault data={this.state.devData} pId={0} getUserRole={this.props.getUserRole}\n                                                   gotoUrl={this.gotoUrl} clusterHide={this.clusterHide}\n                                                   toggleSubmit={this.props.toggleSubmit}\n                                                   validError={this.props.validError}\n                                                   onSubmit={() => console.log('submit form')}\n                                                   selected={this.props.selectedRegion}\n                                                   regionInfo={this.state.regionInfo}\n                                                   dimmer={dimmer}\n                                                   handleChangeLat={this.handleChangeLat}\n                                                   handleChangeLong={this.handleChangeLong}\n                                                   onChangeState={this.onChangeFormState}\n                                                   latError={this.state.laterror}\n                                                   longError={this.state.longerror}>\n\n                        </SiteFourCreateFormDefault>\n                    </Grid.Column>\n                    <Grid.Column width={8} className=\"right\">\n                        <Tab className=\"globe_map\" activeIndex={activeIndex} clusterName={clusterName} onTabChange={this.handleTabChange} panes={panes}{...this.state}></Tab>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    let account = state.registryAccount.account;\n    let dimm =  state.btnMnmt;\n    let accountInfo = account ? account + Math.random()*10000 : null;\n    let dimmInfo = dimm ? dimm : null;\n    let submitVal = null;\n    let selectedRegion = null;\n    let selectedCloudlet = null;\n    let selectedOperator = null;\n    let selectedFlavor = null;\n    let flavors = null;\n    let formValues = null;\n    let clusterName = null;\n    let masterNumber = null;\n    let nodeNumber = null;\n    let getRegion = (state.getRegion)?state.getRegion.region:null\n    let regionInfo = (state.regionInfo)?state.regionInfo:null;\n    if(state.form.createAppFormDefault) {\n        formValues = state.form.createAppFormDefault.values;\n        if(state.form.createAppFormDefault.values.Region !== \"\") {\n            selectedRegion = state.form.createAppFormDefault.values.Region;\n            //하위 오퍼레이터 리스트 아이템 변경\n        }\n        if(state.form.createAppFormDefault.values.Cloudlet !== \"\") {\n            selectedCloudlet = state.form.createAppFormDefault.values.Cloudlet;\n        }\n        if(state.form.createAppFormDefault.values.Operator !== \"\") {\n            selectedOperator = state.form.createAppFormDefault.values.Operator;\n        }\n        if(state.form.createAppFormDefault.values.Flavor !== \"\") {\n            selectedFlavor = state.form.createAppFormDefault.values.Flavor;\n        }\n        if(state.form.createAppFormDefault.values.NumberOfNode !== \"\") {\n            nodeNumber = state.form.createAppFormDefault.values.NumberOfNode;\n            masterNumber = 1;\n        }\n\n    }\n\n\n\n    return {\n        selectedRegion, selectedOperator, clusterName, formValues, selectedFlavor, masterNumber, nodeNumber, getRegion,\n        regionInfo: regionInfo\n    }\n};\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleChangeSite: (data) => { dispatch(actions.changeSite(data))},\n        handleInjectDeveloper: (data) => { dispatch(actions.registDeveloper(data))},\n        handleLoadingSpinner: (data) => { dispatch(actions.loadingSpinner(data))},\n        handleGetRegion: (data) => { dispatch(actions.getRegion(data)) },\n        handleAlertInfo: (mode,msg) => { dispatch(actions.alertInfo(mode,msg))}\n    };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(SiteFourCreateInstForm));\n"]},"metadata":{},"sourceType":"module"}