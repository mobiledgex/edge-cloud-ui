{"ast":null,"code":"// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Basic JavaScript BN library - subset useful for RSA encryption.\n// Bits per digit\nvar dbits; // JavaScript engine analysis\n\nvar canary = 0xdeadbeefcafe;\nvar j_lm = (canary & 0xffffff) == 0xefcafe; // (public) Constructor\n\nfunction BigInteger(a, b, c) {\n  if (a != null) if (\"number\" == typeof a) this.fromNumber(a, b, c);else if (b == null && \"string\" != typeof a) this.fromString(a, 256);else this.fromString(a, b);\n} // return new, unset BigInteger\n\n\nfunction nbi() {\n  return new BigInteger(null);\n} // am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n\n\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    var v = x * this[i++] + w[j] + c;\n    c = Math.floor(v / 0x4000000);\n    w[j++] = v & 0x3ffffff;\n  }\n\n  return c;\n} // am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n\n\nfunction am2(i, x, w, j, c, n) {\n  var xl = x & 0x7fff,\n      xh = x >> 15;\n\n  while (--n >= 0) {\n    var l = this[i] & 0x7fff;\n    var h = this[i++] >> 15;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n    w[j++] = l & 0x3fffffff;\n  }\n\n  return c;\n} // Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\n\n\nfunction am3(i, x, w, j, c, n) {\n  var xl = x & 0x3fff,\n      xh = x >> 14;\n\n  while (--n >= 0) {\n    var l = this[i] & 0x3fff;\n    var h = this[i++] >> 14;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n    c = (l >> 28) + (m >> 14) + xh * h;\n    w[j++] = l & 0xfffffff;\n  }\n\n  return c;\n}\n/*\nif(j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n}\nelse if(j_lm && (navigator.appName != \"Netscape\")) {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\n*/\n// force am3 because nodejs will complain undefined navigator\n\n\ndbits = 28;\nBigInteger.prototype.am = am3;\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions\n\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\n\nfor (vv = 0; vv <= 9; ++vv) {\n  BI_RC[rr++] = vv;\n}\n\nrr = \"a\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) {\n  BI_RC[rr++] = vv;\n}\n\nrr = \"A\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) {\n  BI_RC[rr++] = vv;\n}\n\nfunction int2char(n) {\n  return BI_RM.charAt(n);\n}\n\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n} // (protected) copy this to r\n\n\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) {\n    r[i] = this[i];\n  }\n\n  r.t = this.t;\n  r.s = this.s;\n} // (protected) set from integer value x, -DV <= x < DV\n\n\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = x < 0 ? -1 : 0;\n  if (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;\n} // return bigint initialized to value\n\n\nfunction nbv(i) {\n  var r = nbi();\n  r.fromInt(i);\n  return r;\n} // (protected) set from string and radix\n\n\nfunction bnpFromString(s, b) {\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8; // byte array\n  else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {\n      this.fromRadix(s, b);\n      return;\n    }\n  this.t = 0;\n  this.s = 0;\n  var i = s.length,\n      mi = false,\n      sh = 0;\n\n  while (--i >= 0) {\n    var x = k == 8 ? s[i] & 0xff : intAt(s, i);\n\n    if (x < 0) {\n      if (s.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n\n    mi = false;\n    if (sh == 0) this[this.t++] = x;else if (sh + k > this.DB) {\n      this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n      this[this.t++] = x >> this.DB - sh;\n    } else this[this.t - 1] |= x << sh;\n    sh += k;\n    if (sh >= this.DB) sh -= this.DB;\n  }\n\n  if (k == 8 && (s[0] & 0x80) != 0) {\n    this.s = -1;\n    if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n  }\n\n  this.clamp();\n  if (mi) BigInteger.ZERO.subTo(this, this);\n} // (protected) clamp off excess high words\n\n\nfunction bnpClamp() {\n  var c = this.s & this.DM;\n\n  while (this.t > 0 && this[this.t - 1] == c) {\n    --this.t;\n  }\n} // (public) return string representation in given radix\n\n\nfunction bnToString(b) {\n  if (this.s < 0) return \"-\" + this.negate().toString(b);\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);\n  var km = (1 << k) - 1,\n      d,\n      m = false,\n      r = \"\",\n      i = this.t;\n  var p = this.DB - i * this.DB % k;\n\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) > 0) {\n      m = true;\n      r = int2char(d);\n    }\n\n    while (i >= 0) {\n      if (p < k) {\n        d = (this[i] & (1 << p) - 1) << k - p;\n        d |= this[--i] >> (p += this.DB - k);\n      } else {\n        d = this[i] >> (p -= k) & km;\n\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n\n      if (d > 0) m = true;\n      if (m) r += int2char(d);\n    }\n  }\n\n  return m ? r : \"0\";\n} // (public) -this\n\n\nfunction bnNegate() {\n  var r = nbi();\n  BigInteger.ZERO.subTo(this, r);\n  return r;\n} // (public) |this|\n\n\nfunction bnAbs() {\n  return this.s < 0 ? this.negate() : this;\n} // (public) return + if this > a, - if this < a, 0 if equal\n\n\nfunction bnCompareTo(a) {\n  var r = this.s - a.s;\n  if (r != 0) return r;\n  var i = this.t;\n  r = i - a.t;\n  if (r != 0) return this.s < 0 ? -r : r;\n\n  while (--i >= 0) {\n    if ((r = this[i] - a[i]) != 0) return r;\n  }\n\n  return 0;\n} // returns bit length of the integer x\n\n\nfunction nbits(x) {\n  var r = 1,\n      t;\n\n  if ((t = x >>> 16) != 0) {\n    x = t;\n    r += 16;\n  }\n\n  if ((t = x >> 8) != 0) {\n    x = t;\n    r += 8;\n  }\n\n  if ((t = x >> 4) != 0) {\n    x = t;\n    r += 4;\n  }\n\n  if ((t = x >> 2) != 0) {\n    x = t;\n    r += 2;\n  }\n\n  if ((t = x >> 1) != 0) {\n    x = t;\n    r += 1;\n  }\n\n  return r;\n} // (public) return the number of bits in \"this\"\n\n\nfunction bnBitLength() {\n  if (this.t <= 0) return 0;\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n} // (protected) r = this << n*DB\n\n\nfunction bnpDLShiftTo(n, r) {\n  var i;\n\n  for (i = this.t - 1; i >= 0; --i) {\n    r[i + n] = this[i];\n  }\n\n  for (i = n - 1; i >= 0; --i) {\n    r[i] = 0;\n  }\n\n  r.t = this.t + n;\n  r.s = this.s;\n} // (protected) r = this >> n*DB\n\n\nfunction bnpDRShiftTo(n, r) {\n  for (var i = n; i < this.t; ++i) {\n    r[i - n] = this[i];\n  }\n\n  r.t = Math.max(this.t - n, 0);\n  r.s = this.s;\n} // (protected) r = this << n\n\n\nfunction bnpLShiftTo(n, r) {\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << cbs) - 1;\n  var ds = Math.floor(n / this.DB),\n      c = this.s << bs & this.DM,\n      i;\n\n  for (i = this.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = this[i] >> cbs | c;\n    c = (this[i] & bm) << bs;\n  }\n\n  for (i = ds - 1; i >= 0; --i) {\n    r[i] = 0;\n  }\n\n  r[ds] = c;\n  r.t = this.t + ds + 1;\n  r.s = this.s;\n  r.clamp();\n} // (protected) r = this >> n\n\n\nfunction bnpRShiftTo(n, r) {\n  r.s = this.s;\n  var ds = Math.floor(n / this.DB);\n\n  if (ds >= this.t) {\n    r.t = 0;\n    return;\n  }\n\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << bs) - 1;\n  r[0] = this[ds] >> bs;\n\n  for (var i = ds + 1; i < this.t; ++i) {\n    r[i - ds - 1] |= (this[i] & bm) << cbs;\n    r[i - ds] = this[i] >> bs;\n  }\n\n  if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n  r.t = this.t - ds;\n  r.clamp();\n} // (protected) r = this - a\n\n\nfunction bnpSubTo(a, r) {\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n\n  while (i < m) {\n    c += this[i] - a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n\n  if (a.t < this.t) {\n    c -= a.s;\n\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += this.s;\n  } else {\n    c += this.s;\n\n    while (i < a.t) {\n      c -= a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c -= a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n} // (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyTo(a, r) {\n  var x = this.abs(),\n      y = a.abs();\n  var i = x.t;\n  r.t = i + y.t;\n\n  while (--i >= 0) {\n    r[i] = 0;\n  }\n\n  for (i = 0; i < y.t; ++i) {\n    r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n  }\n\n  r.s = 0;\n  r.clamp();\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n} // (protected) r = this^2, r != this (HAC 14.16)\n\n\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2 * x.t;\n\n  while (--i >= 0) {\n    r[i] = 0;\n  }\n\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1);\n\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV;\n      r[i + x.t + 1] = 1;\n    }\n  }\n\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n  r.s = 0;\n  r.clamp();\n} // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\n\n\nfunction bnpDivRemTo(m, q, r) {\n  var pm = m.abs();\n  if (pm.t <= 0) return;\n  var pt = this.abs();\n\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0);\n    if (r != null) this.copyTo(r);\n    return;\n  }\n\n  if (r == null) r = nbi();\n  var y = nbi(),\n      ts = this.s,\n      ms = m.s;\n  var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y);\n    pt.lShiftTo(nsh, r);\n  } else {\n    pm.copyTo(y);\n    pt.copyTo(r);\n  }\n\n  var ys = y.t;\n  var y0 = y[ys - 1];\n  if (y0 == 0) return;\n  var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n  var d1 = this.FV / yt,\n      d2 = (1 << this.F1) / yt,\n      e = 1 << this.F2;\n  var i = r.t,\n      j = i - ys,\n      t = q == null ? nbi() : q;\n  y.dlShiftTo(j, t);\n\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t, r);\n  }\n\n  BigInteger.ONE.dlShiftTo(ys, t);\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\n  while (y.t < ys) {\n    y[y.t++] = 0;\n  }\n\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n      // Try it out\n      y.dlShiftTo(j, t);\n      r.subTo(t, r);\n\n      while (r[i] < --qd) {\n        r.subTo(t, r);\n      }\n    }\n  }\n\n  if (q != null) {\n    r.drShiftTo(ys, q);\n    if (ts != ms) BigInteger.ZERO.subTo(q, q);\n  }\n\n  r.t = ys;\n  r.clamp();\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n\n  if (ts < 0) BigInteger.ZERO.subTo(r, r);\n} // (public) this mod a\n\n\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a, null, r);\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  return r;\n} // Modular reduction using \"classic\" algorithm\n\n\nfunction Classic(m) {\n  this.m = m;\n}\n\nfunction cConvert(x) {\n  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;\n}\n\nfunction cRevert(x) {\n  return x;\n}\n\nfunction cReduce(x) {\n  x.divRemTo(this.m, null, x);\n}\n\nfunction cMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nfunction cSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo; // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0;\n  var x = this[0];\n  if ((x & 1) == 0) return 0;\n  var y = x & 3; // y == 1/x mod 2^2\n\n  y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n\n  y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n\n  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\n  y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n\n  return y > 0 ? this.DV - y : -y;\n} // Montgomery reduction\n\n\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp & 0x7fff;\n  this.mph = this.mp >> 15;\n  this.um = (1 << m.DB - 15) - 1;\n  this.mt2 = 2 * m.t;\n} // xR mod m\n\n\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t, r);\n  r.divRemTo(this.m, null, r);\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  return r;\n} // x/R mod m\n\n\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n} // x = x/R mod m (HAC 14.32)\n\n\nfunction montReduce(x) {\n  while (x.t <= this.mt2) {\n    // pad x so am has enough room later\n    x[x.t++] = 0;\n  }\n\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff;\n    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call\n\n    j = i + this.m.t;\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry\n\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV;\n      x[++j]++;\n    }\n  }\n\n  x.clamp();\n  x.drShiftTo(this.m.t, x);\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n} // r = \"x^2/R mod m\"; x != r\n\n\nfunction montSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n} // r = \"xy/R mod m\"; x,y != r\n\n\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even\n\nfunction bnpIsEven() {\n  return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n} // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\n\nfunction bnpExp(e, z) {\n  if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(),\n      r2 = nbi(),\n      g = z.convert(this),\n      i = nbits(e) - 1;\n  g.copyTo(r);\n\n  while (--i >= 0) {\n    z.sqrTo(r, r2);\n    if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {\n      var t = r;\n      r = r2;\n      r2 = t;\n    }\n  }\n\n  return z.revert(r);\n} // (public) this^e % m, 0 <= e < 2^32\n\n\nfunction bnModPowInt(e, m) {\n  var z;\n  if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);\n  return this.exp(e, z);\n} // protected\n\n\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp; // public\n\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt; // \"constants\"\n\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1); // Starting jsbn2.js\n// Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Extended JavaScript BN functions, required for RSA private ops.\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n// (public)\n\nfunction bnClone() {\n  var r = nbi();\n  this.copyTo(r);\n  return r;\n} // (public) return value as integer\n\n\nfunction bnIntValue() {\n  if (this.s < 0) {\n    if (this.t == 1) return this[0] - this.DV;else if (this.t == 0) return -1;\n  } else if (this.t == 1) return this[0];else if (this.t == 0) return 0; // assumes 16 < DB < 32\n\n\n  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n} // (public) return value as byte\n\n\nfunction bnByteValue() {\n  return this.t == 0 ? this.s : this[0] << 24 >> 24;\n} // (public) return value as short (assumes DB>=16)\n\n\nfunction bnShortValue() {\n  return this.t == 0 ? this.s : this[0] << 16 >> 16;\n} // (protected) return x s.t. r^x < DV\n\n\nfunction bnpChunkSize(r) {\n  return Math.floor(Math.LN2 * this.DB / Math.log(r));\n} // (public) 0 if this == 0, 1 if this > 0\n\n\nfunction bnSigNum() {\n  if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;\n} // (protected) convert to radix string\n\n\nfunction bnpToRadix(b) {\n  if (b == null) b = 10;\n  if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b, cs);\n  var d = nbv(a),\n      y = nbi(),\n      z = nbi(),\n      r = \"\";\n  this.divRemTo(d, y, z);\n\n  while (y.signum() > 0) {\n    r = (a + z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d, y, z);\n  }\n\n  return z.intValue().toString(b) + r;\n} // (protected) convert from radix string\n\n\nfunction bnpFromRadix(s, b) {\n  this.fromInt(0);\n  if (b == null) b = 10;\n  var cs = this.chunkSize(b);\n  var d = Math.pow(b, cs),\n      mi = false,\n      j = 0,\n      w = 0;\n\n  for (var i = 0; i < s.length; ++i) {\n    var x = intAt(s, i);\n\n    if (x < 0) {\n      if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n      continue;\n    }\n\n    w = b * w + x;\n\n    if (++j >= cs) {\n      this.dMultiply(d);\n      this.dAddOffset(w, 0);\n      j = 0;\n      w = 0;\n    }\n  }\n\n  if (j > 0) {\n    this.dMultiply(Math.pow(b, j));\n    this.dAddOffset(w, 0);\n  }\n\n  if (mi) BigInteger.ZERO.subTo(this, this);\n} // (protected) alternate constructor\n\n\nfunction bnpFromNumber(a, b, c) {\n  if (\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if (a < 2) this.fromInt(1);else {\n      this.fromNumber(a, c);\n      if (!this.testBit(a - 1)) // force MSB set\n        this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n      if (this.isEven()) this.dAddOffset(1, 0); // force odd\n\n      while (!this.isProbablePrime(b)) {\n        this.dAddOffset(2, 0);\n        if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n      }\n    }\n  } else {\n    // new BigInteger(int,RNG)\n    var x = new Array(),\n        t = a & 7;\n    x.length = (a >> 3) + 1;\n    b.nextBytes(x);\n    if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;\n    this.fromString(x, 256);\n  }\n} // (public) convert to bigendian byte array\n\n\nfunction bnToByteArray() {\n  var i = this.t,\n      r = new Array();\n  r[0] = this.s;\n  var p = this.DB - i * this.DB % 8,\n      d,\n      k = 0;\n\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;\n\n    while (i >= 0) {\n      if (p < 8) {\n        d = (this[i] & (1 << p) - 1) << 8 - p;\n        d |= this[--i] >> (p += this.DB - 8);\n      } else {\n        d = this[i] >> (p -= 8) & 0xff;\n\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n\n      if ((d & 0x80) != 0) d |= -256;\n      if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n      if (k > 0 || d != this.s) r[k++] = d;\n    }\n  }\n\n  return r;\n}\n\nfunction bnEquals(a) {\n  return this.compareTo(a) == 0;\n}\n\nfunction bnMin(a) {\n  return this.compareTo(a) < 0 ? this : a;\n}\n\nfunction bnMax(a) {\n  return this.compareTo(a) > 0 ? this : a;\n} // (protected) r = this op a (bitwise)\n\n\nfunction bnpBitwiseTo(a, op, r) {\n  var i,\n      f,\n      m = Math.min(a.t, this.t);\n\n  for (i = 0; i < m; ++i) {\n    r[i] = op(this[i], a[i]);\n  }\n\n  if (a.t < this.t) {\n    f = a.s & this.DM;\n\n    for (i = m; i < this.t; ++i) {\n      r[i] = op(this[i], f);\n    }\n\n    r.t = this.t;\n  } else {\n    f = this.s & this.DM;\n\n    for (i = m; i < a.t; ++i) {\n      r[i] = op(f, a[i]);\n    }\n\n    r.t = a.t;\n  }\n\n  r.s = op(this.s, a.s);\n  r.clamp();\n} // (public) this & a\n\n\nfunction op_and(x, y) {\n  return x & y;\n}\n\nfunction bnAnd(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_and, r);\n  return r;\n} // (public) this | a\n\n\nfunction op_or(x, y) {\n  return x | y;\n}\n\nfunction bnOr(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_or, r);\n  return r;\n} // (public) this ^ a\n\n\nfunction op_xor(x, y) {\n  return x ^ y;\n}\n\nfunction bnXor(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_xor, r);\n  return r;\n} // (public) this & ~a\n\n\nfunction op_andnot(x, y) {\n  return x & ~y;\n}\n\nfunction bnAndNot(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_andnot, r);\n  return r;\n} // (public) ~this\n\n\nfunction bnNot() {\n  var r = nbi();\n\n  for (var i = 0; i < this.t; ++i) {\n    r[i] = this.DM & ~this[i];\n  }\n\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n} // (public) this << n\n\n\nfunction bnShiftLeft(n) {\n  var r = nbi();\n  if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);\n  return r;\n} // (public) this >> n\n\n\nfunction bnShiftRight(n) {\n  var r = nbi();\n  if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);\n  return r;\n} // return index of lowest 1-bit in x, x < 2^31\n\n\nfunction lbit(x) {\n  if (x == 0) return -1;\n  var r = 0;\n\n  if ((x & 0xffff) == 0) {\n    x >>= 16;\n    r += 16;\n  }\n\n  if ((x & 0xff) == 0) {\n    x >>= 8;\n    r += 8;\n  }\n\n  if ((x & 0xf) == 0) {\n    x >>= 4;\n    r += 4;\n  }\n\n  if ((x & 3) == 0) {\n    x >>= 2;\n    r += 2;\n  }\n\n  if ((x & 1) == 0) ++r;\n  return r;\n} // (public) returns index of lowest 1-bit (or -1 if none)\n\n\nfunction bnGetLowestSetBit() {\n  for (var i = 0; i < this.t; ++i) {\n    if (this[i] != 0) return i * this.DB + lbit(this[i]);\n  }\n\n  if (this.s < 0) return this.t * this.DB;\n  return -1;\n} // return number of 1 bits in x\n\n\nfunction cbit(x) {\n  var r = 0;\n\n  while (x != 0) {\n    x &= x - 1;\n    ++r;\n  }\n\n  return r;\n} // (public) return number of set bits\n\n\nfunction bnBitCount() {\n  var r = 0,\n      x = this.s & this.DM;\n\n  for (var i = 0; i < this.t; ++i) {\n    r += cbit(this[i] ^ x);\n  }\n\n  return r;\n} // (public) true iff nth bit is set\n\n\nfunction bnTestBit(n) {\n  var j = Math.floor(n / this.DB);\n  if (j >= this.t) return this.s != 0;\n  return (this[j] & 1 << n % this.DB) != 0;\n} // (protected) this op (1<<n)\n\n\nfunction bnpChangeBit(n, op) {\n  var r = BigInteger.ONE.shiftLeft(n);\n  this.bitwiseTo(r, op, r);\n  return r;\n} // (public) this | (1<<n)\n\n\nfunction bnSetBit(n) {\n  return this.changeBit(n, op_or);\n} // (public) this & ~(1<<n)\n\n\nfunction bnClearBit(n) {\n  return this.changeBit(n, op_andnot);\n} // (public) this ^ (1<<n)\n\n\nfunction bnFlipBit(n) {\n  return this.changeBit(n, op_xor);\n} // (protected) r = this + a\n\n\nfunction bnpAddTo(a, r) {\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n\n  while (i < m) {\n    c += this[i] + a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n\n  if (a.t < this.t) {\n    c += a.s;\n\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += this.s;\n  } else {\n    c += this.s;\n\n    while (i < a.t) {\n      c += a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;\n  r.t = i;\n  r.clamp();\n} // (public) this + a\n\n\nfunction bnAdd(a) {\n  var r = nbi();\n  this.addTo(a, r);\n  return r;\n} // (public) this - a\n\n\nfunction bnSubtract(a) {\n  var r = nbi();\n  this.subTo(a, r);\n  return r;\n} // (public) this * a\n\n\nfunction bnMultiply(a) {\n  var r = nbi();\n  this.multiplyTo(a, r);\n  return r;\n} // (public) this^2\n\n\nfunction bnSquare() {\n  var r = nbi();\n  this.squareTo(r);\n  return r;\n} // (public) this / a\n\n\nfunction bnDivide(a) {\n  var r = nbi();\n  this.divRemTo(a, r, null);\n  return r;\n} // (public) this % a\n\n\nfunction bnRemainder(a) {\n  var r = nbi();\n  this.divRemTo(a, null, r);\n  return r;\n} // (public) [this/a,this%a]\n\n\nfunction bnDivideAndRemainder(a) {\n  var q = nbi(),\n      r = nbi();\n  this.divRemTo(a, q, r);\n  return new Array(q, r);\n} // (protected) this *= n, this >= 0, 1 < n < DV\n\n\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n  ++this.t;\n  this.clamp();\n} // (protected) this += n << w words, this >= 0\n\n\nfunction bnpDAddOffset(n, w) {\n  if (n == 0) return;\n\n  while (this.t <= w) {\n    this[this.t++] = 0;\n  }\n\n  this[w] += n;\n\n  while (this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if (++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n} // A \"null\" reducer\n\n\nfunction NullExp() {}\n\nfunction nNop(x) {\n  return x;\n}\n\nfunction nMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n}\n\nfunction nSqrTo(x, r) {\n  x.squareTo(r);\n}\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo; // (public) this^e\n\nfunction bnPow(e) {\n  return this.exp(e, new NullExp());\n} // (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyLowerTo(a, n, r) {\n  var i = Math.min(this.t + a.t, n);\n  r.s = 0; // assumes a,this >= 0\n\n  r.t = i;\n\n  while (i > 0) {\n    r[--i] = 0;\n  }\n\n  var j;\n\n  for (j = r.t - this.t; i < j; ++i) {\n    r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n  }\n\n  for (j = Math.min(a.t, n); i < j; ++i) {\n    this.am(0, a[i], r, i, 0, n - i);\n  }\n\n  r.clamp();\n} // (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyUpperTo(a, n, r) {\n  --n;\n  var i = r.t = this.t + a.t - n;\n  r.s = 0; // assumes a,this >= 0\n\n  while (--i >= 0) {\n    r[i] = 0;\n  }\n\n  for (i = Math.max(n - this.t, 0); i < a.t; ++i) {\n    r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n  }\n\n  r.clamp();\n  r.drShiftTo(1, r);\n} // Barrett modular reduction\n\n\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = nbi();\n  this.q3 = nbi();\n  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\n\nfunction barrettConvert(x) {\n  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }\n}\n\nfunction barrettRevert(x) {\n  return x;\n} // x = x mod m (HAC 14.42)\n\n\nfunction barrettReduce(x) {\n  x.drShiftTo(this.m.t - 1, this.r2);\n\n  if (x.t > this.m.t + 1) {\n    x.t = this.m.t + 1;\n    x.clamp();\n  }\n\n  this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n  this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n\n  while (x.compareTo(this.r2) < 0) {\n    x.dAddOffset(1, this.m.t + 1);\n  }\n\n  x.subTo(this.r2, x);\n\n  while (x.compareTo(this.m) >= 0) {\n    x.subTo(this.m, x);\n  }\n} // r = x^2 mod m; x != r\n\n\nfunction barrettSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n} // r = x*y mod m; x,y != r\n\n\nfunction barrettMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo; // (public) this^e % m (HAC 14.85)\n\nfunction bnModPow(e, m) {\n  var i = e.bitLength(),\n      k,\n      r = nbv(1),\n      z;\n  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n  if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m); // precomputation\n\n  var g = new Array(),\n      n = 3,\n      k1 = k - 1,\n      km = (1 << k) - 1;\n  g[1] = z.convert(this);\n\n  if (k > 1) {\n    var g2 = nbi();\n    z.sqrTo(g[1], g2);\n\n    while (n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2, g[n - 2], g[n]);\n      n += 2;\n    }\n  }\n\n  var j = e.t - 1,\n      w,\n      is1 = true,\n      r2 = nbi(),\n      t;\n  i = nbits(e[j]) - 1;\n\n  while (j >= 0) {\n    if (i >= k1) w = e[j] >> i - k1 & km;else {\n      w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n      if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n    }\n    n = k;\n\n    while ((w & 1) == 0) {\n      w >>= 1;\n      --n;\n    }\n\n    if ((i -= n) < 0) {\n      i += this.DB;\n      --j;\n    }\n\n    if (is1) {\n      // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2);\n        z.sqrTo(r2, r);\n        n -= 2;\n      }\n\n      if (n > 0) z.sqrTo(r, r2);else {\n        t = r;\n        r = r2;\n        r2 = t;\n      }\n      z.mulTo(r2, g[w], r);\n    }\n\n    while (j >= 0 && (e[j] & 1 << i) == 0) {\n      z.sqrTo(r, r2);\n      t = r;\n      r = r2;\n      r2 = t;\n\n      if (--i < 0) {\n        i = this.DB - 1;\n        --j;\n      }\n    }\n  }\n\n  return z.revert(r);\n} // (public) gcd(this,a) (HAC 14.54)\n\n\nfunction bnGCD(a) {\n  var x = this.s < 0 ? this.negate() : this.clone();\n  var y = a.s < 0 ? a.negate() : a.clone();\n\n  if (x.compareTo(y) < 0) {\n    var t = x;\n    x = y;\n    y = t;\n  }\n\n  var i = x.getLowestSetBit(),\n      g = y.getLowestSetBit();\n  if (g < 0) return x;\n  if (i < g) g = i;\n\n  if (g > 0) {\n    x.rShiftTo(g, x);\n    y.rShiftTo(g, y);\n  }\n\n  while (x.signum() > 0) {\n    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n\n    if (x.compareTo(y) >= 0) {\n      x.subTo(y, x);\n      x.rShiftTo(1, x);\n    } else {\n      y.subTo(x, y);\n      y.rShiftTo(1, y);\n    }\n  }\n\n  if (g > 0) y.lShiftTo(g, y);\n  return y;\n} // (protected) this % n, n < 2^26\n\n\nfunction bnpModInt(n) {\n  if (n <= 0) return 0;\n  var d = this.DV % n,\n      r = this.s < 0 ? n - 1 : 0;\n  if (this.t > 0) if (d == 0) r = this[0] % n;else for (var i = this.t - 1; i >= 0; --i) {\n    r = (d * r + this[i]) % n;\n  }\n  return r;\n} // (public) 1/this % m (HAC 14.61)\n\n\nfunction bnModInverse(m) {\n  var ac = m.isEven();\n  if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;\n  var u = m.clone(),\n      v = this.clone();\n  var a = nbv(1),\n      b = nbv(0),\n      c = nbv(0),\n      d = nbv(1);\n\n  while (u.signum() != 0) {\n    while (u.isEven()) {\n      u.rShiftTo(1, u);\n\n      if (ac) {\n        if (!a.isEven() || !b.isEven()) {\n          a.addTo(this, a);\n          b.subTo(m, b);\n        }\n\n        a.rShiftTo(1, a);\n      } else if (!b.isEven()) b.subTo(m, b);\n\n      b.rShiftTo(1, b);\n    }\n\n    while (v.isEven()) {\n      v.rShiftTo(1, v);\n\n      if (ac) {\n        if (!c.isEven() || !d.isEven()) {\n          c.addTo(this, c);\n          d.subTo(m, d);\n        }\n\n        c.rShiftTo(1, c);\n      } else if (!d.isEven()) d.subTo(m, d);\n\n      d.rShiftTo(1, d);\n    }\n\n    if (u.compareTo(v) >= 0) {\n      u.subTo(v, u);\n      if (ac) a.subTo(c, a);\n      b.subTo(d, b);\n    } else {\n      v.subTo(u, v);\n      if (ac) c.subTo(a, c);\n      d.subTo(b, d);\n    }\n  }\n\n  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n  if (d.compareTo(m) >= 0) return d.subtract(m);\n  if (d.signum() < 0) d.addTo(m, d);else return d;\n  if (d.signum() < 0) return d.add(m);else return d;\n}\n\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; // (public) test primality with certainty >= 1-.5^t\n\nfunction bnIsProbablePrime(t) {\n  var i,\n      x = this.abs();\n\n  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n    for (i = 0; i < lowprimes.length; ++i) {\n      if (x[0] == lowprimes[i]) return true;\n    }\n\n    return false;\n  }\n\n  if (x.isEven()) return false;\n  i = 1;\n\n  while (i < lowprimes.length) {\n    var m = lowprimes[i],\n        j = i + 1;\n\n    while (j < lowprimes.length && m < lplim) {\n      m *= lowprimes[j++];\n    }\n\n    m = x.modInt(m);\n\n    while (i < j) {\n      if (m % lowprimes[i++] == 0) return false;\n    }\n  }\n\n  return x.millerRabin(t);\n} // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n\n\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE);\n  var k = n1.getLowestSetBit();\n  if (k <= 0) return false;\n  var r = n1.shiftRight(k);\n  t = t + 1 >> 1;\n  if (t > lowprimes.length) t = lowprimes.length;\n  var a = nbi();\n\n  for (var i = 0; i < t; ++i) {\n    //Pick bases at random, instead of starting at 2\n    a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n    var y = a.modPow(r, this);\n\n    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1;\n\n      while (j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2, this);\n        if (y.compareTo(BigInteger.ONE) == 0) return false;\n      }\n\n      if (y.compareTo(n1) != 0) return false;\n    }\n  }\n\n  return true;\n} // protected\n\n\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin; // public\n\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime; // JSBN-specific extension\n\nBigInteger.prototype.square = bnSquare; // BigInteger interfaces not implemented in jsbn:\n// BigInteger(int signum, byte[] magnitude)\n// double doubleValue()\n// float floatValue()\n// int hashCode()\n// long longValue()\n// static BigInteger valueOf(long val)\n\nmodule.exports = BigInteger;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/react-native-rsa/lib/jsbn.js"],"names":["dbits","canary","j_lm","BigInteger","a","b","c","fromNumber","fromString","nbi","am1","i","x","w","j","n","v","Math","floor","am2","xl","xh","l","h","m","am3","prototype","am","DB","DM","DV","BI_FP","FV","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","s","bnpCopyTo","r","t","bnpFromInt","nbv","fromInt","bnpFromString","k","fromRadix","length","mi","sh","clamp","ZERO","subTo","bnpClamp","bnToString","negate","toString","toRadix","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","convert","revert","mulTo","sqrTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","bnModPowInt","isEven","exp","bitLength","modPowInt","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","u","subtract","add","lowprimes","lplim","bnIsProbablePrime","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","random","modPow","byteValue","shortValue","toByteArray","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","multiply","remainder","divideAndRemainder","modInverse","gcd","square","module","exports"],"mappings":"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","sourcesContent":["// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Basic JavaScript BN library - subset useful for RSA encryption.\n\n// Bits per digit\nvar dbits;\n\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary&0xffffff)==0xefcafe);\n\n// (public) Constructor\nfunction BigInteger(a,b,c) {\n  if(a != null)\n    if(\"number\" == typeof a) this.fromNumber(a,b,c);\n    else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n    else this.fromString(a,b);\n}\n\n// return new, unset BigInteger\nfunction nbi() { return new BigInteger(null); }\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i,x,w,j,c,n) {\n  while(--n >= 0) {\n    var v = x*this[i++]+w[j]+c;\n    c = Math.floor(v/0x4000000);\n    w[j++] = v&0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i,x,w,j,c,n) {\n  var xl = x&0x7fff, xh = x>>15;\n  while(--n >= 0) {\n    var l = this[i]&0x7fff;\n    var h = this[i++]>>15;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n    w[j++] = l&0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i,x,w,j,c,n) {\n  var xl = x&0x3fff, xh = x>>14;\n  while(--n >= 0) {\n    var l = this[i]&0x3fff;\n    var h = this[i++]>>14;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n    c = (l>>28)+(m>>14)+xh*h;\n    w[j++] = l&0xfffffff;\n  }\n  return c;\n}\n\n/*\nif(j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n}\nelse if(j_lm && (navigator.appName != \"Netscape\")) {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\n*/\n\n// force am3 because nodejs will complain undefined navigator\ndbits = 28;\nBigInteger.prototype.am = am3;\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1<<dbits)-1);\nBigInteger.prototype.DV = (1<<dbits);\n\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2,BI_FP);\nBigInteger.prototype.F1 = BI_FP-dbits;\nBigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr,vv;\nrr = \"0\".charCodeAt(0);\nfor(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) { return BI_RM.charAt(n); }\nfunction intAt(s,i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return (c==null)?-1:c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = (x<0)?-1:0;\n  if(x > 0) this[0] = x;\n  else if(x < -1) this[0] = x+this.DV;\n  else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n// (protected) set from string and radix\nfunction bnpFromString(s,b) {\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 256) k = 8; // byte array\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else { this.fromRadix(s,b); return; }\n  this.t = 0;\n  this.s = 0;\n  var i = s.length, mi = false, sh = 0;\n  while(--i >= 0) {\n    var x = (k==8)?s[i]&0xff:intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n    mi = false;\n    if(sh == 0)\n      this[this.t++] = x;\n    else if(sh+k > this.DB) {\n      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n      this[this.t++] = (x>>(this.DB-sh));\n    }\n    else\n      this[this.t-1] |= x<<sh;\n    sh += k;\n    if(sh >= this.DB) sh -= this.DB;\n  }\n  if(k == 8 && (s[0]&0x80) != 0) {\n    this.s = -1;\n    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n  }\n  this.clamp();\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s&this.DM;\n  while(this.t > 0 && this[this.t-1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  if(this.s < 0) return \"-\"+this.negate().toString(b);\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else return this.toRadix(b);\n  var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n  var p = this.DB-(i*this.DB)%k;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n    while(i >= 0) {\n      if(p < k) {\n        d = (this[i]&((1<<p)-1))<<(k-p);\n        d |= this[--i]>>(p+=this.DB-k);\n      }\n      else {\n        d = (this[i]>>(p-=k))&km;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if(d > 0) m = true;\n      if(m) r += int2char(d);\n    }\n  }\n  return m?r:\"0\";\n}\n\n// (public) -this\nfunction bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n// (public) |this|\nfunction bnAbs() { return (this.s<0)?this.negate():this; }\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s-a.s;\n  if(r != 0) return r;\n  var i = this.t;\n  r = i-a.t;\n  if(r != 0) return (this.s<0)?-r:r;\n  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n  return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1, t;\n  if((t=x>>>16) != 0) { x = t; r += 16; }\n  if((t=x>>8) != 0) { x = t; r += 8; }\n  if((t=x>>4) != 0) { x = t; r += 4; }\n  if((t=x>>2) != 0) { x = t; r += 2; }\n  if((t=x>>1) != 0) { x = t; r += 1; }\n  return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if(this.t <= 0) return 0;\n  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n,r) {\n  var i;\n  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n  for(i = n-1; i >= 0; --i) r[i] = 0;\n  r.t = this.t+n;\n  r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n,r) {\n  for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n  r.t = Math.max(this.t-n,0);\n  r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n,r) {\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<cbs)-1;\n  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n  for(i = this.t-1; i >= 0; --i) {\n    r[i+ds+1] = (this[i]>>cbs)|c;\n    c = (this[i]&bm)<<bs;\n  }\n  for(i = ds-1; i >= 0; --i) r[i] = 0;\n  r[ds] = c;\n  r.t = this.t+ds+1;\n  r.s = this.s;\n  r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n,r) {\n  r.s = this.s;\n  var ds = Math.floor(n/this.DB);\n  if(ds >= this.t) { r.t = 0; return; }\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<bs)-1;\n  r[0] = this[ds]>>bs;\n  for(var i = ds+1; i < this.t; ++i) {\n    r[i-ds-1] |= (this[i]&bm)<<cbs;\n    r[i-ds] = this[i]>>bs;\n  }\n  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n  r.t = this.t-ds;\n  r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this[i]-a[i];\n    r[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c -= a.s;\n    while(i < this.t) {\n      c += this[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  }\n  else {\n    c += this.s;\n    while(i < a.t) {\n      c -= a[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c -= a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c < -1) r[i++] = this.DV+c;\n  else if(c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a,r) {\n  var x = this.abs(), y = a.abs();\n  var i = x.t;\n  r.t = i+y.t;\n  while(--i >= 0) r[i] = 0;\n  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n  r.s = 0;\n  r.clamp();\n  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2*x.t;\n  while(--i >= 0) r[i] = 0;\n  for(i = 0; i < x.t-1; ++i) {\n    var c = x.am(i,x[i],r,2*i,0,1);\n    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n      r[i+x.t] -= x.DV;\n      r[i+x.t+1] = 1;\n    }\n  }\n  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n  r.s = 0;\n  r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m,q,r) {\n  var pm = m.abs();\n  if(pm.t <= 0) return;\n  var pt = this.abs();\n  if(pt.t < pm.t) {\n    if(q != null) q.fromInt(0);\n    if(r != null) this.copyTo(r);\n    return;\n  }\n  if(r == null) r = nbi();\n  var y = nbi(), ts = this.s, ms = m.s;\n  var nsh = this.DB-nbits(pm[pm.t-1]);\t// normalize modulus\n  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n  else { pm.copyTo(y); pt.copyTo(r); }\n  var ys = y.t;\n  var y0 = y[ys-1];\n  if(y0 == 0) return;\n  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n  var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n  y.dlShiftTo(j,t);\n  if(r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t,r);\n  }\n  BigInteger.ONE.dlShiftTo(ys,t);\n  t.subTo(y,y);\t// \"negative\" y so we can replace sub with am later\n  while(y.t < ys) y[y.t++] = 0;\n  while(--j >= 0) {\n    // Estimate quotient digit\n    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {\t// Try it out\n      y.dlShiftTo(j,t);\n      r.subTo(t,r);\n      while(r[i] < --qd) r.subTo(t,r);\n    }\n  }\n  if(q != null) {\n    r.drShiftTo(ys,q);\n    if(ts != ms) BigInteger.ZERO.subTo(q,q);\n  }\n  r.t = ys;\n  r.clamp();\n  if(nsh > 0) r.rShiftTo(nsh,r);\t// Denormalize remainder\n  if(ts < 0) BigInteger.ZERO.subTo(r,r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a,null,r);\n  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n  return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) { this.m = m; }\nfunction cConvert(x) {\n  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n  else return x;\n}\nfunction cRevert(x) { return x; }\nfunction cReduce(x) { x.divRemTo(this.m,null,x); }\nfunction cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\nfunction cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if(this.t < 1) return 0;\n  var x = this[0];\n  if((x&1) == 0) return 0;\n  var y = x&3;\t\t// y == 1/x mod 2^2\n  y = (y*(2-(x&0xf)*y))&0xf;\t// y == 1/x mod 2^4\n  y = (y*(2-(x&0xff)*y))&0xff;\t// y == 1/x mod 2^8\n  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;\t// y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = (y*(2-x*y%this.DV))%this.DV;\t\t// y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return (y>0)?this.DV-y:-y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp&0x7fff;\n  this.mph = this.mp>>15;\n  this.um = (1<<(m.DB-15))-1;\n  this.mt2 = 2*m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t,r);\n  r.divRemTo(this.m,null,r);\n  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n  return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while(x.t <= this.mt2)\t// pad x so am has enough room later\n    x[x.t++] = 0;\n  for(var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i]&0x7fff;\n    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i+this.m.t;\n    x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n    // propagate carry\n    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t,x);\n  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e,z) {\n  if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n  g.copyTo(r);\n  while(--i >= 0) {\n    z.sqrTo(r,r2);\n    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n    else { var t = r; r = r2; r2 = t; }\n  }\n  return z.revert(r);\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e,m) {\n  var z;\n  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n  return this.exp(e,z);\n}\n\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n// Starting jsbn2.js\n\n// Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Extended JavaScript BN functions, required for RSA private ops.\n\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n\n// (public)\nfunction bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n// (public) return value as integer\nfunction bnIntValue() {\n  if(this.s < 0) {\n    if(this.t == 1) return this[0]-this.DV;\n    else if(this.t == 0) return -1;\n  }\n  else if(this.t == 1) return this[0];\n  else if(this.t == 0) return 0;\n  // assumes 16 < DB < 32\n  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n}\n\n// (public) return value as byte\nfunction bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n// (public) return value as short (assumes DB>=16)\nfunction bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n// (protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n// (public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\n  if(this.s < 0) return -1;\n  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n  else return 1;\n}\n\n// (protected) convert to radix string\nfunction bnpToRadix(b) {\n  if(b == null) b = 10;\n  if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b,cs);\n  var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n  this.divRemTo(d,y,z);\n  while(y.signum() > 0) {\n    r = (a+z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d,y,z);\n  }\n  return z.intValue().toString(b) + r;\n}\n\n// (protected) convert from radix string\nfunction bnpFromRadix(s,b) {\n  this.fromInt(0);\n  if(b == null) b = 10;\n  var cs = this.chunkSize(b);\n  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n  for(var i = 0; i < s.length; ++i) {\n    var x = intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n      continue;\n    }\n    w = b*w+x;\n    if(++j >= cs) {\n      this.dMultiply(d);\n      this.dAddOffset(w,0);\n      j = 0;\n      w = 0;\n    }\n  }\n  if(j > 0) {\n    this.dMultiply(Math.pow(b,j));\n    this.dAddOffset(w,0);\n  }\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) alternate constructor\nfunction bnpFromNumber(a,b,c) {\n  if(\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if(a < 2) this.fromInt(1);\n    else {\n      this.fromNumber(a,c);\n      if(!this.testBit(a-1))\t// force MSB set\n        this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n      if(this.isEven()) this.dAddOffset(1,0); // force odd\n      while(!this.isProbablePrime(b)) {\n        this.dAddOffset(2,0);\n        if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n      }\n    }\n  }\n  else {\n    // new BigInteger(int,RNG)\n    var x = new Array(), t = a&7;\n    x.length = (a>>3)+1;\n    b.nextBytes(x);\n    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n    this.fromString(x,256);\n  }\n}\n\n// (public) convert to bigendian byte array\nfunction bnToByteArray() {\n  var i = this.t, r = new Array();\n  r[0] = this.s;\n  var p = this.DB-(i*this.DB)%8, d, k = 0;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n      r[k++] = d|(this.s<<(this.DB-p));\n    while(i >= 0) {\n      if(p < 8) {\n        d = (this[i]&((1<<p)-1))<<(8-p);\n        d |= this[--i]>>(p+=this.DB-8);\n      }\n      else {\n        d = (this[i]>>(p-=8))&0xff;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if((d&0x80) != 0) d |= -256;\n      if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n      if(k > 0 || d != this.s) r[k++] = d;\n    }\n  }\n  return r;\n}\n\nfunction bnEquals(a) { return(this.compareTo(a)==0); }\nfunction bnMin(a) { return(this.compareTo(a)<0)?this:a; }\nfunction bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n// (protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a,op,r) {\n  var i, f, m = Math.min(a.t,this.t);\n  for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n  if(a.t < this.t) {\n    f = a.s&this.DM;\n    for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n    r.t = this.t;\n  }\n  else {\n    f = this.s&this.DM;\n    for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n    r.t = a.t;\n  }\n  r.s = op(this.s,a.s);\n  r.clamp();\n}\n\n// (public) this & a\nfunction op_and(x,y) { return x&y; }\nfunction bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n// (public) this | a\nfunction op_or(x,y) { return x|y; }\nfunction bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n// (public) this ^ a\nfunction op_xor(x,y) { return x^y; }\nfunction bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n// (public) this & ~a\nfunction op_andnot(x,y) { return x&~y; }\nfunction bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n// (public) ~this\nfunction bnNot() {\n  var r = nbi();\n  for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n}\n\n// (public) this << n\nfunction bnShiftLeft(n) {\n  var r = nbi();\n  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n  return r;\n}\n\n// (public) this >> n\nfunction bnShiftRight(n) {\n  var r = nbi();\n  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n  return r;\n}\n\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n  if(x == 0) return -1;\n  var r = 0;\n  if((x&0xffff) == 0) { x >>= 16; r += 16; }\n  if((x&0xff) == 0) { x >>= 8; r += 8; }\n  if((x&0xf) == 0) { x >>= 4; r += 4; }\n  if((x&3) == 0) { x >>= 2; r += 2; }\n  if((x&1) == 0) ++r;\n  return r;\n}\n\n// (public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n  for(var i = 0; i < this.t; ++i)\n    if(this[i] != 0) return i*this.DB+lbit(this[i]);\n  if(this.s < 0) return this.t*this.DB;\n  return -1;\n}\n\n// return number of 1 bits in x\nfunction cbit(x) {\n  var r = 0;\n  while(x != 0) { x &= x-1; ++r; }\n  return r;\n}\n\n// (public) return number of set bits\nfunction bnBitCount() {\n  var r = 0, x = this.s&this.DM;\n  for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n  return r;\n}\n\n// (public) true iff nth bit is set\nfunction bnTestBit(n) {\n  var j = Math.floor(n/this.DB);\n  if(j >= this.t) return(this.s!=0);\n  return((this[j]&(1<<(n%this.DB)))!=0);\n}\n\n// (protected) this op (1<<n)\nfunction bnpChangeBit(n,op) {\n  var r = BigInteger.ONE.shiftLeft(n);\n  this.bitwiseTo(r,op,r);\n  return r;\n}\n\n// (public) this | (1<<n)\nfunction bnSetBit(n) { return this.changeBit(n,op_or); }\n\n// (public) this & ~(1<<n)\nfunction bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n// (public) this ^ (1<<n)\nfunction bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n// (protected) r = this + a\nfunction bnpAddTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this[i]+a[i];\n    r[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c += a.s;\n    while(i < this.t) {\n      c += this[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  }\n  else {\n    c += this.s;\n    while(i < a.t) {\n      c += a[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c > 0) r[i++] = c;\n  else if(c < -1) r[i++] = this.DV+c;\n  r.t = i;\n  r.clamp();\n}\n\n// (public) this + a\nfunction bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n// (public) this - a\nfunction bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n// (public) this * a\nfunction bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n// (public) this^2\nfunction bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n// (public) this / a\nfunction bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n// (public) this % a\nfunction bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n// (public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n  var q = nbi(), r = nbi();\n  this.divRemTo(a,q,r);\n  return new Array(q,r);\n}\n\n// (protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0,n-1,this,0,0,this.t);\n  ++this.t;\n  this.clamp();\n}\n\n// (protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n,w) {\n  if(n == 0) return;\n  while(this.t <= w) this[this.t++] = 0;\n  this[w] += n;\n  while(this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if(++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n}\n\n// A \"null\" reducer\nfunction NullExp() {}\nfunction nNop(x) { return x; }\nfunction nMulTo(x,y,r) { x.multiplyTo(y,r); }\nfunction nSqrTo(x,r) { x.squareTo(r); }\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n// (public) this^e\nfunction bnPow(e) { return this.exp(e,new NullExp()); }\n\n// (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a,n,r) {\n  var i = Math.min(this.t+a.t,n);\n  r.s = 0; // assumes a,this >= 0\n  r.t = i;\n  while(i > 0) r[--i] = 0;\n  var j;\n  for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n  r.clamp();\n}\n\n// (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a,n,r) {\n  --n;\n  var i = r.t = this.t+a.t-n;\n  r.s = 0; // assumes a,this >= 0\n  while(--i >= 0) r[i] = 0;\n  for(i = Math.max(n-this.t,0); i < a.t; ++i)\n    r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n  r.clamp();\n  r.drShiftTo(1,r);\n}\n\n// Barrett modular reduction\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = nbi();\n  this.q3 = nbi();\n  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\n\nfunction barrettConvert(x) {\n  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n  else if(x.compareTo(this.m) < 0) return x;\n  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n}\n\nfunction barrettRevert(x) { return x; }\n\n// x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n  x.drShiftTo(this.m.t-1,this.r2);\n  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n  x.subTo(this.r2,x);\n  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = x^2 mod m; x != r\nfunction barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = x*y mod m; x,y != r\nfunction barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e,m) {\n  var i = e.bitLength(), k, r = nbv(1), z;\n  if(i <= 0) return r;\n  else if(i < 18) k = 1;\n  else if(i < 48) k = 3;\n  else if(i < 144) k = 4;\n  else if(i < 768) k = 5;\n  else k = 6;\n  if(i < 8)\n    z = new Classic(m);\n  else if(m.isEven())\n    z = new Barrett(m);\n  else\n    z = new Montgomery(m);\n\n  // precomputation\n  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n  g[1] = z.convert(this);\n  if(k > 1) {\n    var g2 = nbi();\n    z.sqrTo(g[1],g2);\n    while(n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2,g[n-2],g[n]);\n      n += 2;\n    }\n  }\n\n  var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n  i = nbits(e[j])-1;\n  while(j >= 0) {\n    if(i >= k1) w = (e[j]>>(i-k1))&km;\n    else {\n      w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n    }\n\n    n = k;\n    while((w&1) == 0) { w >>= 1; --n; }\n    if((i -= n) < 0) { i += this.DB; --j; }\n    if(is1) {\t// ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    }\n    else {\n      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n      z.mulTo(r2,g[w],r);\n    }\n\n    while(j >= 0 && (e[j]&(1<<i)) == 0) {\n      z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n      if(--i < 0) { i = this.DB-1; --j; }\n    }\n  }\n  return z.revert(r);\n}\n\n// (public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n  var x = (this.s<0)?this.negate():this.clone();\n  var y = (a.s<0)?a.negate():a.clone();\n  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n  var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n  if(g < 0) return x;\n  if(i < g) g = i;\n  if(g > 0) {\n    x.rShiftTo(g,x);\n    y.rShiftTo(g,y);\n  }\n  while(x.signum() > 0) {\n    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n    if(x.compareTo(y) >= 0) {\n      x.subTo(y,x);\n      x.rShiftTo(1,x);\n    }\n    else {\n      y.subTo(x,y);\n      y.rShiftTo(1,y);\n    }\n  }\n  if(g > 0) y.lShiftTo(g,y);\n  return y;\n}\n\n// (protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n  if(n <= 0) return 0;\n  var d = this.DV%n, r = (this.s<0)?n-1:0;\n  if(this.t > 0)\n    if(d == 0) r = this[0]%n;\n    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n  return r;\n}\n\n// (public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n  var ac = m.isEven();\n  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n  var u = m.clone(), v = this.clone();\n  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n  while(u.signum() != 0) {\n    while(u.isEven()) {\n      u.rShiftTo(1,u);\n      if(ac) {\n        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n        a.rShiftTo(1,a);\n      }\n      else if(!b.isEven()) b.subTo(m,b);\n      b.rShiftTo(1,b);\n    }\n    while(v.isEven()) {\n      v.rShiftTo(1,v);\n      if(ac) {\n        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n        c.rShiftTo(1,c);\n      }\n      else if(!d.isEven()) d.subTo(m,d);\n      d.rShiftTo(1,d);\n    }\n    if(u.compareTo(v) >= 0) {\n      u.subTo(v,u);\n      if(ac) a.subTo(c,a);\n      b.subTo(d,b);\n    }\n    else {\n      v.subTo(u,v);\n      if(ac) c.subTo(a,c);\n      d.subTo(b,d);\n    }\n  }\n  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n  if(d.compareTo(m) >= 0) return d.subtract(m);\n  if(d.signum() < 0) d.addTo(m,d); else return d;\n  if(d.signum() < 0) return d.add(m); else return d;\n}\n\nvar lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\nvar lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n// (public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n  var i, x = this.abs();\n  if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n    for(i = 0; i < lowprimes.length; ++i)\n      if(x[0] == lowprimes[i]) return true;\n    return false;\n  }\n  if(x.isEven()) return false;\n  i = 1;\n  while(i < lowprimes.length) {\n    var m = lowprimes[i], j = i+1;\n    while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n    m = x.modInt(m);\n    while(i < j) if(m%lowprimes[i++] == 0) return false;\n  }\n  return x.millerRabin(t);\n}\n\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE);\n  var k = n1.getLowestSetBit();\n  if(k <= 0) return false;\n  var r = n1.shiftRight(k);\n  t = (t+1)>>1;\n  if(t > lowprimes.length) t = lowprimes.length;\n  var a = nbi();\n  for(var i = 0; i < t; ++i) {\n    //Pick bases at random, instead of starting at 2\n    a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n    var y = a.modPow(r,this);\n    if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1;\n      while(j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2,this);\n        if(y.compareTo(BigInteger.ONE) == 0) return false;\n      }\n      if(y.compareTo(n1) != 0) return false;\n    }\n  }\n  return true;\n}\n\n// protected\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n\n// public\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n// JSBN-specific extension\nBigInteger.prototype.square = bnSquare;\n\n// BigInteger interfaces not implemented in jsbn:\n\n// BigInteger(int signum, byte[] magnitude)\n// double doubleValue()\n// float floatValue()\n// int hashCode()\n// long longValue()\n// static BigInteger valueOf(long val)\n\n\nmodule.exports = BigInteger;"]},"metadata":{},"sourceType":"script"}