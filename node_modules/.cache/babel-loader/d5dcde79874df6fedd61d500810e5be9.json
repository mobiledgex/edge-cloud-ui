{"ast":null,"code":"/*\n{\n            \"result\": {\n                \"fields\": [],\n                \"key\": {\n                    \"operator_key\": {\n                        \"name\": \"TDG\"\n                    },\n                    \"name\": \"bonn-niantic\"\n                },\n                \"access_uri\": \"\",\n                \"location\": {\n                    \"latitude\": 50.737,\n                    \"longitude\": 7.098,\n                    \"horizontal_accuracy\": 0,\n                    \"vertical_accuracy\": 0,\n                    \"altitude\": 0,\n                    \"course\": 0,\n                    \"speed\": 0,\n                    \"timestamp\": {\n                        \"seconds\": \"0\",\n                        \"nanos\": 0\n                    }\n                },\n                \"ip_support\": \"IpSupportDynamic\",\n                \"static_ips\": \"\",\n                \"num_dynamic_ips\": 5\n            }\n        }\n//\n\n */\nimport * as moment from 'moment';\n\nvar trimData = function trimData(datas) {\n  var newData = datas.splice(0, 1);\n  return datas;\n};\n\nvar week_kr = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\nvar week = moment().format('E');\nvar getWeek = week_kr[week - 1];\n\nvar numberDes = function numberDes(a, b) {\n  return b - a;\n};\n/*\n\n0: \"time\"\n1: \"100ms\"\n2: \"10ms\"\n3: \"25ms\"\n4: \"50ms\"\n5: \"5ms\"\n6: \"app\"\n7: \"cloudlet\"\n8: \"dev\"\n9: \"errs\"\n10: \"id\"\n11: \"inf\"\n12: \"method\"\n13: \"oper\"\n14: \"reqs\"\n15: \"ver\"\n\n */\n\n\nvar colors = ['#22cccc', '#6699ff', '#aa77ff', '#ff8e06'];\nvar fontColor = 'rgba(255,255,255,.5)';\n\nvar generateData = function generateData(datas) {\n  var result = datas;\n  var values = [];\n\n  if (result && result[0].series) {\n    result.map(function (data, i) {\n      data.series.map(function (serie) {\n        serie.values.map(function (value) {\n          var item = {\n            time: '',\n            app: '',\n            cloudlet: '',\n            dev: '',\n            method: '',\n            oper: '',\n            reqs: ''\n          };\n          item.time = value[0];\n          item.app = value[6];\n          item.cloudlet = value[7];\n          item.dev = value[8];\n          item.method = value[12];\n          item.oper = value[13];\n          item.reqs = value[14];\n          values.push(item);\n        });\n      });\n    });\n  } else {\n    console.log('there is no result');\n  } //ascending or descending\n  //values.sort(numberDes);\n  //values.reverse();\n\n\n  return values;\n};\n\nvar retunDate = function retunDate(str) {\n  var year = str.substring(0, 4);\n  var month = str.substring(4, 6);\n  var day = str.substring(6, 8);\n  var hour = str.substring(8, 10);\n  var minute = str.substring(10, 12); //var second = str.substring(12, 14);\n\n  var date = new Date(year, month - 1, day, hour, minute);\n  return moment(date).format('hh:mm');\n};\n\nvar FormatDmeMethod = function FormatDmeMethod(props) {\n  return generateData(props);\n};\n\nexport default FormatDmeMethod;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/services/formatter/formatDmeMethod.js"],"names":["moment","trimData","datas","newData","splice","week_kr","week","format","getWeek","numberDes","a","b","colors","fontColor","generateData","result","values","series","map","data","i","serie","value","item","time","app","cloudlet","dev","method","oper","reqs","push","console","log","retunDate","str","year","substring","month","day","hour","minute","date","Date","FormatDmeMethod","props"],"mappings":"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","sourcesContent":["/*\n{\n            \"result\": {\n                \"fields\": [],\n                \"key\": {\n                    \"operator_key\": {\n                        \"name\": \"TDG\"\n                    },\n                    \"name\": \"bonn-niantic\"\n                },\n                \"access_uri\": \"\",\n                \"location\": {\n                    \"latitude\": 50.737,\n                    \"longitude\": 7.098,\n                    \"horizontal_accuracy\": 0,\n                    \"vertical_accuracy\": 0,\n                    \"altitude\": 0,\n                    \"course\": 0,\n                    \"speed\": 0,\n                    \"timestamp\": {\n                        \"seconds\": \"0\",\n                        \"nanos\": 0\n                    }\n                },\n                \"ip_support\": \"IpSupportDynamic\",\n                \"static_ips\": \"\",\n                \"num_dynamic_ips\": 5\n            }\n        }\n//\n\n */\n\n\nimport * as moment from 'moment';\n\nlet trimData = (datas) => {\n    let newData = datas.splice(0,1);\n    return datas ;\n}\nconst week_kr = [\"월\",\"화\",\"수\",\"목\",\"금\",\"토\",\"일\"]\nlet week = moment().format('E');\nlet getWeek = week_kr[(week-1)];\nconst numberDes =(a,b)=> (\n    b-a\n)\n\n/*\n\n0: \"time\"\n1: \"100ms\"\n2: \"10ms\"\n3: \"25ms\"\n4: \"50ms\"\n5: \"5ms\"\n6: \"app\"\n7: \"cloudlet\"\n8: \"dev\"\n9: \"errs\"\n10: \"id\"\n11: \"inf\"\n12: \"method\"\n13: \"oper\"\n14: \"reqs\"\n15: \"ver\"\n\n */\nvar colors = ['#22cccc', '#6699ff','#aa77ff', '#ff8e06' ];\nvar fontColor = 'rgba(255,255,255,.5)' ;\n\nlet generateData = (datas) => {\n\n    let result = datas;\n    let values = [];\n\n    if(result && result[0].series){\n        result.map((data, i) => {\n            data.series.map((serie)=>{\n                serie.values.map((value)=>{\n                    let item = {time:'',app:'', cloudlet:'', dev:'', method:'', oper:'', reqs:''}\n                    item.time = value[0]\n                    item.app = value[6]\n                    item.cloudlet = value[7]\n                    item.dev = value[8]\n                    item.method = value[12]\n                    item.oper = value[13]\n                    item.reqs = value[14]\n                    values.push(item)\n                })\n            })\n        })\n    } else {\n        console.log('there is no result')\n    }\n\n    //ascending or descending\n\n    //values.sort(numberDes);\n    //values.reverse();\n\n    return values\n\n}\nconst retunDate = (str) => {\n    var year = str.substring(0, 4);\n    var month = str.substring(4, 6);\n    var day = str.substring(6, 8);\n    var hour = str.substring(8, 10);\n    var minute = str.substring(10, 12);\n    //var second = str.substring(12, 14);\n    var date = new Date(year, month-1, day, hour, minute);\n    return moment(date).format('hh:mm');\n}\nconst FormatDmeMethod = (props) => (\n    generateData(props)\n)\n\nexport default FormatDmeMethod;\n"]},"metadata":{},"sourceType":"module"}