{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/analysticViewZone.js\";\nimport React from 'react';\nimport { Dropdown, Button, Header, Tab } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport sizeMe from 'react-sizeme';\nimport ResizeSensor from './ResizeSensor';\nimport * as actions from '../actions';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport CPUMEMListView from './usage/cpumemoryListView';\nimport ApplicationView from '../components/applicationView';\nimport DailyReportView from '../components/dailyReportView';\nimport NetworkTcpUdpView from '../components/networkTcpUdpView';\nimport NetworkTcpUdpComposeView from '../components/networkTcpUdpComposeView';\nimport SelectFromTo from '../components/selectFromTo';\nimport * as serviceCluster from '../services/service_instance_service';\nimport * as serviceCompute from '../services/service_compute_service';\nimport './styles.css';\nvar ReactGridLayout = WidthProvider(RGL);\nvar headerStyle = {\n  backgroundImage: 'url()'\n};\nvar horizon = 6;\nvar vertical = 13;\nvar layout = [{\n  \"w\": 6,\n  \"h\": 13,\n  \"x\": 0,\n  \"y\": 0,\n  \"i\": \"0\",\n  \"moved\": false,\n  \"static\": false,\n  \"title\": \"Cluster Health\"\n}, {\n  \"w\": 6,\n  \"h\": 13,\n  \"x\": 6,\n  \"y\": 0,\n  \"i\": \"1\",\n  \"moved\": false,\n  \"static\": false,\n  \"title\": \"Application Statistics\"\n}, {\n  \"w\": 6,\n  \"h\": 8,\n  \"x\": 0,\n  \"y\": 13,\n  \"i\": \"2\",\n  \"moved\": false,\n  \"static\": false,\n  \"title\": \"Network I/O Trend\"\n}, {\n  \"w\": 6,\n  \"h\": 8,\n  \"x\": 6,\n  \"y\": 13,\n  \"i\": \"3\",\n  \"moved\": false,\n  \"static\": false,\n  \"title\": \"Network I/O Trend\"\n}];\nvar panes = [{\n  menuItem: 'TCP'\n}, {\n  menuItem: 'UDP'\n}];\nvar _self = null;\n\nvar AnalysticViewZone =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AnalysticViewZone, _React$Component);\n\n  function AnalysticViewZone(props) {\n    var _this;\n\n    _classCallCheck(this, AnalysticViewZone);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnalysticViewZone).call(this, props));\n\n    _this.onHandleClick = function (e, data) {\n      this.props.handleChangeSite(data.children.props.to);\n    };\n\n    _this.makeHeader_noChild = function (title) {\n      return React.createElement(Header, {\n        className: \"panel_title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, title);\n    };\n\n    _this.makeHeader_date = function (title) {\n      return React.createElement(Header, {\n        className: \"panel_title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexGrow: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, title));\n    };\n\n    _this.makeHeader_select = function (title) {\n      return React.createElement(Header, {\n        className: \"panel_title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexGrow: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, title), React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexGrow: 2,\n          alignSelf: 'flex-end'\n        },\n        className: \"panel_title_filter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }));\n    };\n\n    _this.makeHeader_switch = function (title, index) {\n      return React.createElement(Header, {\n        className: \"panel_title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexGrow: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, title), React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        className: \"panel_title_filter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        className: \"tcpudpSwich\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Button, {\n        positive: index === 0 ? true : false,\n        onClick: function onClick(e, _ref) {\n          var value = _ref.value;\n          return _this.handleTabChange('tcp');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"TCP\"), React.createElement(Button, {\n        positive: index === 1 ? true : false,\n        onClick: function onClick(e, _ref2) {\n          var value = _ref2.value;\n          return _this.handleTabChange('udp');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"UDP\"))));\n    };\n\n    _this.onResize = function () {\n      // if neither width nor height is provided via props\n      if (!_this.props.width) {\n        _this.setState({\n          width: _this.mount.clientWidth //width: 1600\n\n        });\n      }\n\n      if (!_this.props.height) {\n        _this.setState({\n          height: _this.mount.clientHeight //height: 900\n\n        });\n      }\n    };\n\n    _this.makeForm = function (cluster, store) {\n      return {\n        \"token\": store,\n        \"params\": {\n          \"region\": \"US\",\n          \"clusterinst\": {\n            \"cluster_key\": {\n              \"name\": \"mmmm\"\n            },\n            \"cloudlet_key\": {\n              \"operator_key\": {\n                \"name\": \"TDG\"\n              },\n              \"name\": \"mexplat-stage-bonn-cloudlet\"\n            },\n            \"developer\": \"MobiledgeX\"\n          },\n          \"selector\": \"cpu\",\n          \"starttime\": \"2019-07-17T22:39:58Z\",\n          \"endtime\": \"2019-07-17T22:45:10Z\"\n        }\n      };\n    };\n\n    _this.onHandleClick = _this.onHandleClick.bind(_assertThisInitialized(_this));\n\n    var layout = _this.generateLayout();\n\n    _this.state = {\n      layout: layout,\n      listData: [{\n        alarm: '3',\n        dName: 'Cluster-A',\n        values: {\n          cpu: 35,\n          mem: 55,\n          sys: 33,\n          net: [10, 15],\n          time: '2019-07-19 12:00:00'\n        }\n      }, {\n        alarm: '5',\n        dName: 'Cluster-B',\n        values: {\n          cpu: 78,\n          mem: 78,\n          sys: 12,\n          net: [7, 12],\n          time: '2019-07-19 12:00:00'\n        }\n      }, {\n        alarm: '1',\n        dName: 'Cluster-C',\n        values: {\n          cpu: 32,\n          mem: 33,\n          sys: 67,\n          net: [3, 18],\n          time: '2019-07-19 12:00:00'\n        }\n      }, {\n        alarm: '2',\n        dName: 'Cluster-D',\n        values: {\n          cpu: 23,\n          mem: 46,\n          sys: 41,\n          net: [11, 14],\n          time: '2019-07-19 12:00:00'\n        }\n      }, {\n        alarm: '4',\n        dName: 'Cluster-E',\n        values: {\n          cpu: 55,\n          mem: 67,\n          sys: 23,\n          net: [7, 11],\n          time: '2019-07-19 12:00:00'\n        }\n      }],\n      networkData: [],\n      tcpudpClusterData: [],\n      tcpudpData: null,\n      activeIndex: 'tcp',\n      tcpPositive: true,\n      udpPositive: false,\n      listCluster: null,\n      selectedCloudlet: 'barcelona-mexdemo',\n      applications: null\n    };\n    _this.state.optionOne = [{\n      key: 'itm_1',\n      value: 'cpu',\n      text: 'CPU Usage'\n    }, {\n      key: 'itm_2',\n      value: 'memory',\n      text: 'MEM Usage'\n    }, {\n      key: 'itm_3',\n      value: 'filesys',\n      text: 'FileSys Usage'\n    }];\n    _self = _assertThisInitialized(_this);\n    _this.interval = null;\n    _this.intervalTab = null; //before MWC show.... untile 2019.02.30\n\n    _this.clusters = [];\n    _this.tcpudpCloumns = ['tcpConns', 'tcpRetrans', 'udpRecv', 'udpRecvErr', 'udpSend'];\n    _this.applications = [{\n      cloudlet: 'barcelona-mexdemo',\n      clusters: [{\n        cluster: 'tdg-barcelona-niantic',\n        apps: [''],\n        shortApps: ['neon2']\n      }, {\n        cluster: 'tdg-barcelona-mobiledgex-demoapp',\n        apps: [],\n        shortApps: ['mobiledgexsdkdemo', 'facedetectiondemo']\n      }]\n    }, {\n      cloudlet: 'sk-mwc',\n      clusters: [{\n        cluster: 'skt-barcelona-1000realities',\n        apps: ['thousandrealitiesapp', 'facedetectiondemo', 'mobiledgexsdkdemo']\n      }]\n    }];\n    return _this;\n  }\n\n  _createClass(AnalysticViewZone, [{\n    key: \"handleTabChange\",\n    value: function handleTabChange(activeIndex) {\n      if (activeIndex === 'tcp') {\n        this.setState({\n          tcpPositive: true\n        });\n        this.setState({\n          udpPositive: false\n        });\n      } else {\n        this.setState({\n          tcpPositive: false\n        });\n        this.setState({\n          udpPositive: true\n        });\n      }\n\n      this.setState({\n        activeIndex: activeIndex\n      });\n      this.forceUpdate();\n    }\n  }, {\n    key: \"generateDOM\",\n    value: function generateDOM(_applications) {\n      var _this2 = this;\n\n      return layout.map(function (item, i) {\n        return React.createElement(\"div\", {\n          className: \"round_panel\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, i === 1 ? _this2.makeHeader_date(item.title) : i === 2 ? _this2.makeHeader_switch(item.title, 0) : i === 3 ? _this2.makeHeader_switch(item.title, 1) : _this2.makeHeader_noChild(item.title), i === 0 ? React.createElement(CPUMEMListView, {\n          listData: _this2.state.listData,\n          cloudlets: _this2.cloudlets,\n          clusters: _this2.clusters,\n          applications: _applications,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }) : i === 1 ? React.createElement(ApplicationView, {\n          cloudlets: _this2.cloudlets,\n          clusters: _this2.clusters,\n          applications: _applications,\n          selectedCloudlet: _this2.state.selectedCloudlet,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }) : i === 2 ? React.createElement(NetworkTcpUdpComposeView, {\n          applications: _applications,\n          selectedCloudlet: _this2.state.selectedCloudlet,\n          activeIndex: _this2.state.activeIndex,\n          netName: 'TCP',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }) : i === 3 ? React.createElement(NetworkTcpUdpComposeView, {\n          applications: _applications,\n          selectedCloudlet: _this2.state.selectedCloudlet,\n          activeIndex: _this2.state.activeIndex,\n          netName: 'UDP',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }) : React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, item.i));\n      });\n    }\n  }, {\n    key: \"generateLayout\",\n    value: function generateLayout() {\n      var p = this.props;\n      return layout;\n    }\n  }, {\n    key: \"onLayoutChange\",\n    value: function onLayoutChange(layout) {//this.props.onLayoutChange(layout);\n    }\n  }, {\n    key: \"receiveClusterInfo\",\n    value: function receiveClusterInfo(result) {//_self.setState({listData:result})\n    }\n  }, {\n    key: \"receiveClusterApp\",\n    value: function receiveClusterApp(result) {\n      var appIndex = null;\n      result.map(function (obj) {\n        return obj.map(function (obj2) {\n          return obj2.series.map(function (seri) {\n            return seri.columns.map(function (column, i) {\n              return column === 'app' ? appIndex = i : null;\n            });\n          });\n        });\n      });\n      console.log('app index = ', appIndex);\n      var appNames = [];\n\n      if (appIndex) {\n        result.map(function (obj) {\n          return obj.map(function (obj2) {\n            return obj2.series.map(function (seri, i) {\n              return seri.values.map(function (value) {\n                appNames.push({\n                  app: value[appIndex],\n                  cluster: value[appIndex + 1]\n                });\n              });\n            });\n          });\n        });\n        console.log('app names = ', appNames);\n      } //appName 중에  neon2 인것 찾기\n\n\n      var selectedApp = 'neon2';\n      appNames.map(function (obj) {\n        if (obj.app.indexOf(selectedApp) > -1) {\n          _self.applications[0].clusters[0].apps[0] = obj.app;\n        }\n      });\n      console.log('set aplications ==', _self.applications, _self.state.applications);\n\n      _self.setState({\n        applications: _self.applications\n      });\n    }\n  }, {\n    key: \"getClusterHealth\",\n    value: function getClusterHealth(store) {\n      if (_self.clusters.length) serviceCluster.getClusterHealth(_self.clusters, _self.receiveClusterInfo);\n    }\n  }, {\n    key: \"getAppClusterApp\",\n    value: function getAppClusterApp() {\n      // 클러스터에 해당하는 앱의 이름\n      serviceCluster.getAppClusterApp(this.clusters, _self.receiveClusterApp);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this3 = this;\n\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n\n      if (nextProps.clusterInstData && nextProps.clusterInstData.length) {\n        nextProps.clusterInstData.map(function (cluster) {\n          _this3.clusters.push(_this3.makeForm(cluster, store ? store.userToken : 'null'));\n        });\n\n        _self.getClusterHealth(store ? store.userToken : 'null');\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n      _self.interval = setInterval(function () {\n        _self.getClusterHealth(store);\n      }, 300000);\n      var _this$props$size = this.props.size,\n          width = _this$props$size.width,\n          height = _this$props$size.height;\n      var rowHeight = 100; // h=3 then height = 30 * 3 = 90px\n\n      var divideH = height / rowHeight;\n      var newHOne = Math.round(divideH * (2 / 3) - 1.5);\n      var newHTwo = Math.round(divideH * (1 / 3));\n      var resizeLayout = [{\n        \"w\": 6,\n        \"h\": newHOne,\n        \"x\": 0,\n        \"y\": 0,\n        \"i\": \"0\",\n        \"moved\": false,\n        \"static\": false,\n        \"title\": \"Cluster Health\"\n      }, {\n        \"w\": 6,\n        \"h\": newHOne,\n        \"x\": 6,\n        \"y\": 0,\n        \"i\": \"1\",\n        \"moved\": false,\n        \"static\": false,\n        \"title\": \"Application Statistics\"\n      }, {\n        \"w\": 6,\n        \"h\": newHTwo,\n        \"x\": 0,\n        \"y\": newHOne,\n        \"i\": \"2\",\n        \"moved\": false,\n        \"static\": false,\n        \"title\": \"Network I/O Trend\"\n      }, {\n        \"w\": 6,\n        \"h\": newHTwo,\n        \"x\": 6,\n        \"y\": newHOne,\n        \"i\": \"3\",\n        \"moved\": false,\n        \"static\": false,\n        \"title\": \"Network I/O Trend\"\n      }];\n      this.setState({\n        layout: resizeLayout\n      }); // _self.intervalTab = setInterval((e) => {\n      //     _self.handleTabChange(e, (_self.state.activeIndex === 0)? {activeIndex:1} : {activeIndex:0})\n      // }, 6000)\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(_self.interval);\n      clearInterval(_self.intervalTab);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ReactGridLayout, Object.assign({\n        style: {\n          backgroundColor: 'green !important',\n          height: '100%'\n        },\n        layout: this.state.layout,\n        onLayoutChange: this.onLayoutChange\n      }, this.props, {\n        useCSSTransforms: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }), this.generateDOM(this.state.applications));\n    }\n  }]);\n\n  return AnalysticViewZone;\n}(React.Component);\n\nAnalysticViewZone.defaultProps = {\n  className: \"layout\",\n  items: 20,\n  rowHeight: 100,\n  cols: 12,\n  width: 1900\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleChangeSite: function handleChangeSite(data) {\n      dispatch(actions.changeSite(data));\n    },\n    handleInjectData: function handleInjectData(data) {\n      dispatch(actions.injectData(data));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchProps)(sizeMe({\n  monitorHeight: true\n})(AnalysticViewZone));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/analysticViewZone.js"],"names":["React","Dropdown","Button","Header","Tab","connect","sizeMe","ResizeSensor","actions","RGL","WidthProvider","CPUMEMListView","ApplicationView","DailyReportView","NetworkTcpUdpView","NetworkTcpUdpComposeView","SelectFromTo","serviceCluster","serviceCompute","ReactGridLayout","headerStyle","backgroundImage","horizon","vertical","layout","panes","menuItem","_self","AnalysticViewZone","props","onHandleClick","e","data","handleChangeSite","children","to","makeHeader_noChild","title","makeHeader_date","display","flexGrow","makeHeader_select","alignSelf","makeHeader_switch","index","value","handleTabChange","onResize","width","setState","mount","clientWidth","height","clientHeight","makeForm","cluster","store","bind","generateLayout","state","listData","alarm","dName","values","cpu","mem","sys","net","time","networkData","tcpudpClusterData","tcpudpData","activeIndex","tcpPositive","udpPositive","listCluster","selectedCloudlet","applications","optionOne","key","text","interval","intervalTab","clusters","tcpudpCloumns","cloudlet","apps","shortApps","forceUpdate","_applications","map","item","i","cloudlets","p","result","appIndex","obj","obj2","series","seri","columns","column","console","log","appNames","push","app","selectedApp","indexOf","length","getClusterHealth","receiveClusterInfo","getAppClusterApp","receiveClusterApp","nextProps","nextContext","localStorage","PROJECT_INIT","JSON","parse","clusterInstData","userToken","setInterval","size","rowHeight","divideH","newHOne","Math","round","newHTwo","resizeLayout","clearInterval","backgroundColor","onLayoutChange","generateDOM","Component","defaultProps","className","items","cols","mapDispatchProps","dispatch","changeSite","handleInjectData","injectData","monitorHeight"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,GAAnC,QAA8C,mBAA9C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,OAAOC,GAAP,IAAcC,aAAd,QAAmC,mBAAnC;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,wBAAP,MAAqC,wCAArC;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,KAAKC,cAAZ,MAAgC,sCAAhC;AACA,OAAO,KAAKC,cAAZ,MAAgC,qCAAhC;AAEA,OAAO,cAAP;AAEA,IAAMC,eAAe,GAAGT,aAAa,CAACD,GAAD,CAArC;AAGA,IAAMW,WAAW,GAAG;AAChBC,EAAAA,eAAe,EAAE;AADD,CAApB;AAGA,IAAIC,OAAO,GAAG,CAAd;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,MAAM,GAAG,CACT;AAAC,OAAI,CAAL;AAAO,OAAI,EAAX;AAAc,OAAI,CAAlB;AAAoB,OAAI,CAAxB;AAA0B,OAAI,GAA9B;AAAkC,WAAQ,KAA1C;AAAgD,YAAS,KAAzD;AAAgE,WAAQ;AAAxE,CADS,EAET;AAAC,OAAI,CAAL;AAAO,OAAI,EAAX;AAAc,OAAI,CAAlB;AAAoB,OAAI,CAAxB;AAA0B,OAAI,GAA9B;AAAkC,WAAQ,KAA1C;AAAgD,YAAS,KAAzD;AAAgE,WAAQ;AAAxE,CAFS,EAGT;AAAC,OAAI,CAAL;AAAO,OAAI,CAAX;AAAa,OAAI,CAAjB;AAAmB,OAAI,EAAvB;AAA0B,OAAI,GAA9B;AAAkC,WAAQ,KAA1C;AAAgD,YAAS,KAAzD;AAAgE,WAAQ;AAAxE,CAHS,EAIT;AAAC,OAAI,CAAL;AAAO,OAAI,CAAX;AAAa,OAAI,CAAjB;AAAmB,OAAI,EAAvB;AAA0B,OAAI,GAA9B;AAAkC,WAAQ,KAA1C;AAAgD,YAAS,KAAzD;AAAgE,WAAQ;AAAxE,CAJS,CAAb;AAKA,IAAMC,KAAK,GAAG,CACV;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CADU,EAEV;AAAEA,EAAAA,QAAQ,EAAE;AAAZ,CAFU,CAAd;AAIA,IAAIC,KAAK,GAAG,IAAZ;;IACMC,iB;;;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,2FAAMA,KAAN;;AADe,UAuDnBC,aAvDmB,GAuDH,UAASC,CAAT,EAAYC,IAAZ,EAAkB;AAC9B,WAAKH,KAAL,CAAWI,gBAAX,CAA4BD,IAAI,CAACE,QAAL,CAAcL,KAAd,CAAoBM,EAAhD;AACH,KAzDkB;;AAAA,UAqEnBC,kBArEmB,GAqEC,UAACC,KAAD;AAAA,aAChB,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCA,KAAjC,CADgB;AAAA,KArED;;AAAA,UAwEnBC,eAxEmB,GAwEF,UAACD,KAAD;AAAA,aACb,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,KAAK,EAAE;AAACE,UAAAA,OAAO,EAAC,MAAT;AAAiBC,UAAAA,QAAQ,EAAC;AAA1B,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2CH,KAA3C,CADJ,CADa;AAAA,KAxEE;;AAAA,UA8EnBI,iBA9EmB,GA8EA,UAACJ,KAAD;AAAA,aACf,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,KAAK,EAAE;AAACE,UAAAA,OAAO,EAAC,MAAT;AAAiBC,UAAAA,QAAQ,EAAC;AAA1B,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2CH,KAA3C,CADJ,EAEI;AAAK,QAAA,KAAK,EAAE;AAACE,UAAAA,OAAO,EAAC,MAAT;AAAiBC,UAAAA,QAAQ,EAAC,CAA1B;AAA6BE,UAAAA,SAAS,EAAC;AAAvC,SAAZ;AAAgE,QAAA,SAAS,EAAC,oBAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADe;AAAA,KA9EA;;AAAA,UAsFnBC,iBAtFmB,GAsFA,UAACN,KAAD,EAAQO,KAAR;AAAA,aACf,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,KAAK,EAAE;AAACL,UAAAA,OAAO,EAAC,MAAT;AAAiBC,UAAAA,QAAQ,EAAC;AAA1B,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2CH,KAA3C,CADJ,EAEI;AAAK,QAAA,KAAK,EAAE;AAACE,UAAAA,OAAO,EAAC;AAAT,SAAZ;AAA8B,QAAA,SAAS,EAAC,oBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD,CAAQ,KAAR;AAAc,QAAA,SAAS,EAAC,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEK,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqB,KAAvC;AAA8C,QAAA,OAAO,EAAE,iBAACb,CAAD;AAAA,cAAIc,KAAJ,QAAIA,KAAJ;AAAA,iBAAa,MAAKC,eAAL,CAAqB,KAArB,CAAb;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI,oBAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEF,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqB,KAAvC;AAA+C,QAAA,OAAO,EAAE,iBAACb,CAAD;AAAA,cAAIc,KAAJ,SAAIA,KAAJ;AAAA,iBAAa,MAAKC,eAAL,CAAqB,KAArB,CAAb;AAAA,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,CADJ,CAFJ,CADe;AAAA,KAtFA;;AAAA,UAiGnBC,QAjGmB,GAiGR,YAAM;AACb;AACA,UAAI,CAAC,MAAKlB,KAAL,CAAWmB,KAAhB,EAAuB;AACnB,cAAKC,QAAL,CAAc;AACVD,UAAAA,KAAK,EAAE,MAAKE,KAAL,CAAWC,WADR,CAEV;;AAFU,SAAd;AAIH;;AACD,UAAI,CAAC,MAAKtB,KAAL,CAAWuB,MAAhB,EAAwB;AACpB,cAAKH,QAAL,CAAc;AACVG,UAAAA,MAAM,EAAE,MAAKF,KAAL,CAAWG,YADT,CAEV;;AAFU,SAAd;AAIH;AAEJ,KAhHkB;;AAAA,UAuMnBC,QAvMmB,GAuMR,UAACC,OAAD,EAAUC,KAAV;AAAA,aACP;AACI,iBAAQA,KADZ;AAEI,kBAAS;AACL,oBAAS,IADJ;AAEL,yBAAc;AACV,2BAAc;AAAC,sBAAO;AAAR,aADJ;AAEV,4BAAe;AACX,8BAAe;AAAC,wBAAO;AAAR,eADJ;AAEX,sBAAO;AAFI,aAFL;AAMV,yBAAY;AANF,WAFT;AAUL,sBAAW,KAVN;AAWL,uBAAY,sBAXP;AAYL,qBAAU;AAZL;AAFb,OADO;AAAA,KAvMQ;;AAEf,UAAK1B,aAAL,GAAqB,MAAKA,aAAL,CAAmB2B,IAAnB,+BAArB;;AACA,QAAMjC,MAAM,GAAG,MAAKkC,cAAL,EAAf;;AACA,UAAKC,KAAL,GAAa;AACTnC,MAAAA,MAAM,EAANA,MADS;AAEToC,MAAAA,QAAQ,EAAG,CACP;AAACC,QAAAA,KAAK,EAAC,GAAP;AAAYC,QAAAA,KAAK,EAAC,WAAlB;AAA+BC,QAAAA,MAAM,EAAC;AAACC,UAAAA,GAAG,EAAC,EAAL;AAASC,UAAAA,GAAG,EAAC,EAAb;AAAiBC,UAAAA,GAAG,EAAC,EAArB;AAAyBC,UAAAA,GAAG,EAAC,CAAC,EAAD,EAAI,EAAJ,CAA7B;AAAsCC,UAAAA,IAAI,EAAC;AAA3C;AAAtC,OADO,EAEP;AAACP,QAAAA,KAAK,EAAC,GAAP;AAAYC,QAAAA,KAAK,EAAC,WAAlB;AAA+BC,QAAAA,MAAM,EAAC;AAACC,UAAAA,GAAG,EAAC,EAAL;AAASC,UAAAA,GAAG,EAAC,EAAb;AAAiBC,UAAAA,GAAG,EAAC,EAArB;AAAyBC,UAAAA,GAAG,EAAC,CAAC,CAAD,EAAG,EAAH,CAA7B;AAAqCC,UAAAA,IAAI,EAAC;AAA1C;AAAtC,OAFO,EAGP;AAACP,QAAAA,KAAK,EAAC,GAAP;AAAYC,QAAAA,KAAK,EAAC,WAAlB;AAA+BC,QAAAA,MAAM,EAAC;AAACC,UAAAA,GAAG,EAAC,EAAL;AAASC,UAAAA,GAAG,EAAC,EAAb;AAAiBC,UAAAA,GAAG,EAAC,EAArB;AAAyBC,UAAAA,GAAG,EAAC,CAAC,CAAD,EAAG,EAAH,CAA7B;AAAqCC,UAAAA,IAAI,EAAC;AAA1C;AAAtC,OAHO,EAIP;AAACP,QAAAA,KAAK,EAAC,GAAP;AAAYC,QAAAA,KAAK,EAAC,WAAlB;AAA+BC,QAAAA,MAAM,EAAC;AAACC,UAAAA,GAAG,EAAC,EAAL;AAASC,UAAAA,GAAG,EAAC,EAAb;AAAiBC,UAAAA,GAAG,EAAC,EAArB;AAAyBC,UAAAA,GAAG,EAAC,CAAC,EAAD,EAAI,EAAJ,CAA7B;AAAsCC,UAAAA,IAAI,EAAC;AAA3C;AAAtC,OAJO,EAKP;AAACP,QAAAA,KAAK,EAAC,GAAP;AAAYC,QAAAA,KAAK,EAAC,WAAlB;AAA+BC,QAAAA,MAAM,EAAC;AAACC,UAAAA,GAAG,EAAC,EAAL;AAASC,UAAAA,GAAG,EAAC,EAAb;AAAiBC,UAAAA,GAAG,EAAC,EAArB;AAAyBC,UAAAA,GAAG,EAAC,CAAC,CAAD,EAAG,EAAH,CAA7B;AAAqCC,UAAAA,IAAI,EAAC;AAA1C;AAAtC,OALO,CAFF;AASTC,MAAAA,WAAW,EAAC,EATH;AAUTC,MAAAA,iBAAiB,EAAC,EAVT;AAWTC,MAAAA,UAAU,EAAC,IAXF;AAYTC,MAAAA,WAAW,EAAC,KAZH;AAaTC,MAAAA,WAAW,EAAC,IAbH;AAcTC,MAAAA,WAAW,EAAC,KAdH;AAeTC,MAAAA,WAAW,EAAC,IAfH;AAgBTC,MAAAA,gBAAgB,EAAC,mBAhBR;AAiBTC,MAAAA,YAAY,EAAC;AAjBJ,KAAb;AAmBA,UAAKlB,KAAL,CAAWmB,SAAX,GAAuB,CACnB;AAACC,MAAAA,GAAG,EAAC,OAAL;AAAclC,MAAAA,KAAK,EAAC,KAApB;AAA2BmC,MAAAA,IAAI,EAAC;AAAhC,KADmB,EAEnB;AAACD,MAAAA,GAAG,EAAC,OAAL;AAAclC,MAAAA,KAAK,EAAC,QAApB;AAA8BmC,MAAAA,IAAI,EAAC;AAAnC,KAFmB,EAGnB;AAACD,MAAAA,GAAG,EAAC,OAAL;AAAclC,MAAAA,KAAK,EAAC,SAApB;AAA+BmC,MAAAA,IAAI,EAAC;AAApC,KAHmB,CAAvB;AAKArD,IAAAA,KAAK,gCAAL;AAEA,UAAKsD,QAAL,GAAgB,IAAhB;AACA,UAAKC,WAAL,GAAmB,IAAnB,CA/Be,CAiCf;;AACA,UAAKC,QAAL,GAAgB,EAAhB;AACA,UAAKC,aAAL,GAAqB,CAAC,UAAD,EAAa,YAAb,EAA2B,SAA3B,EAAsC,YAAtC,EAAoD,SAApD,CAArB;AACA,UAAKP,YAAL,GAAoB,CAChB;AAACQ,MAAAA,QAAQ,EAAC,mBAAV;AACIF,MAAAA,QAAQ,EAAC,CACL;AAAC5B,QAAAA,OAAO,EAAC,uBAAT;AAAkC+B,QAAAA,IAAI,EAAC,CAAC,EAAD,CAAvC;AAA6CC,QAAAA,SAAS,EAAC,CAAC,OAAD;AAAvD,OADK,EAEL;AAAChC,QAAAA,OAAO,EAAC,kCAAT;AACI+B,QAAAA,IAAI,EAAC,EADT;AAEIC,QAAAA,SAAS,EAAC,CAAC,mBAAD,EAAsB,mBAAtB;AAFd,OAFK;AADb,KADgB,EAUhB;AAACF,MAAAA,QAAQ,EAAC,QAAV;AACIF,MAAAA,QAAQ,EAAC,CACL;AAAC5B,QAAAA,OAAO,EAAC,6BAAT;AAAwC+B,QAAAA,IAAI,EAAC,CAAC,sBAAD,EAAwB,mBAAxB,EAA4C,mBAA5C;AAA7C,OADK;AADb,KAVgB,CAApB;AApCe;AAqDlB;;;;oCAKgBd,W,EAAa;AAC1B,UAAGA,WAAW,KAAK,KAAnB,EAAyB;AACrB,aAAKvB,QAAL,CAAc;AAACwB,UAAAA,WAAW,EAAC;AAAb,SAAd;AACA,aAAKxB,QAAL,CAAc;AAACyB,UAAAA,WAAW,EAAC;AAAb,SAAd;AACH,OAHD,MAGO;AACH,aAAKzB,QAAL,CAAc;AAACwB,UAAAA,WAAW,EAAC;AAAb,SAAd;AACA,aAAKxB,QAAL,CAAc;AAACyB,UAAAA,WAAW,EAAC;AAAb,SAAd;AACH;;AACD,WAAKzB,QAAL,CAAc;AAAEuB,QAAAA,WAAW,EAACA;AAAd,OAAd;AACA,WAAKgB,WAAL;AACH;;;gCA6CWC,a,EAAe;AAAA;;AAEvB,aAAOjE,MAAM,CAACkE,GAAP,CAAW,UAACC,IAAD,EAAOC,CAAP;AAAA,eACd;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAEA,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAESA,CAAC,KAAK,CAAP,GAAW,MAAI,CAACtD,eAAL,CAAqBqD,IAAI,CAACtD,KAA1B,CAAX,GACCuD,CAAC,KAAK,CAAP,GAAW,MAAI,CAACjD,iBAAL,CAAuBgD,IAAI,CAACtD,KAA5B,EAAmC,CAAnC,CAAX,GACCuD,CAAC,KAAK,CAAP,GAAW,MAAI,CAACjD,iBAAL,CAAuBgD,IAAI,CAACtD,KAA5B,EAAmC,CAAnC,CAAX,GAAmD,MAAI,CAACD,kBAAL,CAAwBuD,IAAI,CAACtD,KAA7B,CAJ3D,EAOSuD,CAAC,KAAK,CAAP,GAAW,oBAAC,cAAD;AAAgB,UAAA,QAAQ,EAAE,MAAI,CAACjC,KAAL,CAAWC,QAArC;AAA+C,UAAA,SAAS,EAAE,MAAI,CAACiC,SAA/D;AAA0E,UAAA,QAAQ,EAAE,MAAI,CAACV,QAAzF;AAAmG,UAAA,YAAY,EAAEM,aAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX,GACGG,CAAC,KAAK,CAAP,GAAW,oBAAC,eAAD;AAAiB,UAAA,SAAS,EAAE,MAAI,CAACC,SAAjC;AAA4C,UAAA,QAAQ,EAAE,MAAI,CAACV,QAA3D;AAAqE,UAAA,YAAY,EAAEM,aAAnF;AAAkG,UAAA,gBAAgB,EAAE,MAAI,CAAC9B,KAAL,CAAWiB,gBAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX,GACCgB,CAAC,KAAK,CAAP,GAAW,oBAAC,wBAAD;AAA0B,UAAA,YAAY,EAAEH,aAAxC;AAAuD,UAAA,gBAAgB,EAAE,MAAI,CAAC9B,KAAL,CAAWiB,gBAApF;AAAuG,UAAA,WAAW,EAAE,MAAI,CAACjB,KAAL,CAAWa,WAA/H;AAA4I,UAAA,OAAO,EAAE,KAArJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX,GACCoB,CAAC,KAAK,CAAP,GAAW,oBAAC,wBAAD;AAA0B,UAAA,YAAY,EAAEH,aAAxC;AAAuD,UAAA,gBAAgB,EAAE,MAAI,CAAC9B,KAAL,CAAWiB,gBAApF;AAAuG,UAAA,WAAW,EAAE,MAAI,CAACjB,KAAL,CAAWa,WAA/H;AAA4I,UAAA,OAAO,EAAE,KAArJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX,GACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOmB,IAAI,CAACC,CAAZ,CAXV,CADc;AAAA,OAAX,CAAP;AAiBH;;;qCAEgB;AACb,UAAME,CAAC,GAAG,KAAKjE,KAAf;AAEA,aAAOL,MAAP;AACH;;;mCAEcA,M,EAAQ,CACnB;AAEH;;;uCACkBuE,M,EAAQ,CACvB;AACH;;;sCAGiBA,M,EAAQ;AAEtB,UAAIC,QAAQ,GAAG,IAAf;AACAD,MAAAA,MAAM,CAACL,GAAP,CAAW,UAACO,GAAD;AAAA,eACPA,GAAG,CAACP,GAAJ,CAAQ,UAACQ,IAAD;AAAA,iBACJA,IAAI,CAACC,MAAL,CAAYT,GAAZ,CAAgB,UAACU,IAAD;AAAA,mBACZA,IAAI,CAACC,OAAL,CAAaX,GAAb,CAAiB,UAACY,MAAD,EAASV,CAAT;AAAA,qBACZU,MAAM,KAAK,KAAZ,GAAoBN,QAAQ,GAAGJ,CAA/B,GAAmC,IADtB;AAAA,aAAjB,CADY;AAAA,WAAhB,CADI;AAAA,SAAR,CADO;AAAA,OAAX;AAUAW,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BR,QAA5B;AACA,UAAIS,QAAQ,GAAG,EAAf;;AACA,UAAGT,QAAH,EAAY;AACRD,QAAAA,MAAM,CAACL,GAAP,CAAW,UAACO,GAAD;AAAA,iBACPA,GAAG,CAACP,GAAJ,CAAQ,UAACQ,IAAD;AAAA,mBACJA,IAAI,CAACC,MAAL,CAAYT,GAAZ,CAAgB,UAACU,IAAD,EAAOR,CAAP;AAAA,qBACZQ,IAAI,CAACrC,MAAL,CAAY2B,GAAZ,CAAgB,UAAC7C,KAAD,EAAW;AACvB4D,gBAAAA,QAAQ,CAACC,IAAT,CAAc;AAACC,kBAAAA,GAAG,EAAC9D,KAAK,CAACmD,QAAD,CAAV;AAAsBzC,kBAAAA,OAAO,EAACV,KAAK,CAACmD,QAAQ,GAAC,CAAV;AAAnC,iBAAd;AACH,eAFD,CADY;AAAA,aAAhB,CADI;AAAA,WAAR,CADO;AAAA,SAAX;AAUAO,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,QAA5B;AACH,OA3BqB,CA6BtB;;;AACA,UAAIG,WAAW,GAAG,OAAlB;AAEAH,MAAAA,QAAQ,CAACf,GAAT,CAAa,UAACO,GAAD,EAAS;AAClB,YAAGA,GAAG,CAACU,GAAJ,CAAQE,OAAR,CAAgBD,WAAhB,IAA+B,CAAC,CAAnC,EAAqC;AACjCjF,UAAAA,KAAK,CAACkD,YAAN,CAAmB,CAAnB,EAAsBM,QAAtB,CAA+B,CAA/B,EAAkCG,IAAlC,CAAuC,CAAvC,IAA4CW,GAAG,CAACU,GAAhD;AACH;AACJ,OAJD;AAKAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC7E,KAAK,CAACkD,YAAxC,EAAsDlD,KAAK,CAACgC,KAAN,CAAYkB,YAAlE;;AACAlD,MAAAA,KAAK,CAACsB,QAAN,CAAe;AAAC4B,QAAAA,YAAY,EAAClD,KAAK,CAACkD;AAApB,OAAf;AAEH;;;qCAEiBrB,K,EAAO;AACrB,UAAG7B,KAAK,CAACwD,QAAN,CAAe2B,MAAlB,EAA0B7F,cAAc,CAAC8F,gBAAf,CAAiCpF,KAAK,CAACwD,QAAvC,EAAiDxD,KAAK,CAACqF,kBAAvD;AAC7B;;;uCACkB;AACf;AACA/F,MAAAA,cAAc,CAACgG,gBAAf,CAAgC,KAAK9B,QAArC,EAA+CxD,KAAK,CAACuF,iBAArD;AACH;;;8CAsByBC,S,EAAWC,W,EAAa;AAAA;;AAC9C,UAAI5D,KAAK,GAAG6D,YAAY,CAACC,YAAb,GAA4BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,YAAxB,CAA5B,GAAoE,IAAhF;;AACA,UAAGH,SAAS,CAACM,eAAV,IAA6BN,SAAS,CAACM,eAAV,CAA0BX,MAA1D,EAAkE;AAC9DK,QAAAA,SAAS,CAACM,eAAV,CAA0B/B,GAA1B,CAA8B,UAACnC,OAAD,EAAa;AACvC,UAAA,MAAI,CAAC4B,QAAL,CAAcuB,IAAd,CAAmB,MAAI,CAACpD,QAAL,CAAcC,OAAd,EAAuBC,KAAK,GAAGA,KAAK,CAACkE,SAAT,GAAqB,MAAjD,CAAnB;AACH,SAFD;;AAGA/F,QAAAA,KAAK,CAACoF,gBAAN,CAAuBvD,KAAK,GAAGA,KAAK,CAACkE,SAAT,GAAqB,MAAjD;AACH;AACJ;;;wCAEmB;AAChB,UAAIlE,KAAK,GAAG6D,YAAY,CAACC,YAAb,GAA4BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,YAAxB,CAA5B,GAAoE,IAAhF;AACA3F,MAAAA,KAAK,CAACsD,QAAN,GAAiB0C,WAAW,CAAC,YAAM;AAC/BhG,QAAAA,KAAK,CAACoF,gBAAN,CAAuBvD,KAAvB;AACH,OAF2B,EAEzB,MAFyB,CAA5B;AAFgB,6BAKM,KAAK3B,KAAL,CAAW+F,IALjB;AAAA,UAKX5E,KALW,oBAKXA,KALW;AAAA,UAKJI,MALI,oBAKJA,MALI;AAMhB,UAAIyE,SAAS,GAAG,GAAhB,CANgB,CAMK;;AACrB,UAAIC,OAAO,GAAI1E,MAAM,GAAGyE,SAAxB;AAEA,UAAIE,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,IAAE,IAAE,CAAJ,CAAP,GAAgB,GAA3B,CAAd;AACA,UAAII,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWH,OAAO,IAAE,IAAE,CAAJ,CAAlB,CAAd;AAEA,UAAIK,YAAY,GAAG,CACf;AAAC,aAAI,CAAL;AAAO,aAAIJ,OAAX;AAAmB,aAAI,CAAvB;AAAyB,aAAI,CAA7B;AAA+B,aAAI,GAAnC;AAAuC,iBAAQ,KAA/C;AAAqD,kBAAS,KAA9D;AAAqE,iBAAQ;AAA7E,OADe,EAEf;AAAC,aAAI,CAAL;AAAO,aAAIA,OAAX;AAAmB,aAAI,CAAvB;AAAyB,aAAI,CAA7B;AAA+B,aAAI,GAAnC;AAAuC,iBAAQ,KAA/C;AAAqD,kBAAS,KAA9D;AAAqE,iBAAQ;AAA7E,OAFe,EAGf;AAAC,aAAI,CAAL;AAAO,aAAIG,OAAX;AAAmB,aAAI,CAAvB;AAAyB,aAAIH,OAA7B;AAAqC,aAAI,GAAzC;AAA6C,iBAAQ,KAArD;AAA2D,kBAAS,KAApE;AAA2E,iBAAQ;AAAnF,OAHe,EAIf;AAAC,aAAI,CAAL;AAAO,aAAIG,OAAX;AAAmB,aAAI,CAAvB;AAAyB,aAAIH,OAA7B;AAAqC,aAAI,GAAzC;AAA6C,iBAAQ,KAArD;AAA2D,kBAAS,KAApE;AAA2E,iBAAQ;AAAnF,OAJe,CAAnB;AAMA,WAAK9E,QAAL,CAAc;AAACzB,QAAAA,MAAM,EAAC2G;AAAR,OAAd,EAlBgB,CAoBhB;AACA;AACA;AACH;;;2CACsB;AACnBC,MAAAA,aAAa,CAACzG,KAAK,CAACsD,QAAP,CAAb;AACAmD,MAAAA,aAAa,CAACzG,KAAK,CAACuD,WAAP,CAAb;AACH;;;6BAEQ;AAEL,aACI,oBAAC,eAAD;AAAiB,QAAA,KAAK,EAAE;AAACmD,UAAAA,eAAe,EAAC,kBAAjB;AAAqCjF,UAAAA,MAAM,EAAC;AAA5C,SAAxB;AACI,QAAA,MAAM,EAAE,KAAKO,KAAL,CAAWnC,MADvB;AAEI,QAAA,cAAc,EAAE,KAAK8G;AAFzB,SAGQ,KAAKzG,KAHb;AAII,QAAA,gBAAgB,EAAE,KAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMK,KAAK0G,WAAL,CAAiB,KAAK5E,KAAL,CAAWkB,YAA5B,CANL,CADJ;AAUH;;;;EA/Q2B7E,KAAK,CAACwI,S;;AAAhC5G,iB,CAgRK6G,Y,GAAe;AAClBC,EAAAA,SAAS,EAAE,QADO;AAElBC,EAAAA,KAAK,EAAE,EAFW;AAGlBd,EAAAA,SAAS,EAAE,GAHO;AAIlBe,EAAAA,IAAI,EAAE,EAJY;AAKlB5F,EAAAA,KAAK,EAAE;AALW,C;;AAU1B,IAAM6F,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD,EAAc;AACnC,SAAO;AACH7G,IAAAA,gBAAgB,EAAE,0BAACD,IAAD,EAAU;AAAE8G,MAAAA,QAAQ,CAACtI,OAAO,CAACuI,UAAR,CAAmB/G,IAAnB,CAAD,CAAR;AAAmC,KAD9D;AAEHgH,IAAAA,gBAAgB,EAAE,0BAAChH,IAAD,EAAU;AAAE8G,MAAAA,QAAQ,CAACtI,OAAO,CAACyI,UAAR,CAAmBjH,IAAnB,CAAD,CAAR;AAAmC;AAF9D,GAAP;AAIH,CALD;;AAOA,eAAe3B,OAAO,CAAC,IAAD,EAAOwI,gBAAP,CAAP,CAAgCvI,MAAM,CAAC;AAAE4I,EAAAA,aAAa,EAAE;AAAjB,CAAD,CAAN,CAAgCtH,iBAAhC,CAAhC,CAAf","sourcesContent":["import React from 'react';\nimport { Dropdown, Button, Header, Tab } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport sizeMe from 'react-sizeme';\nimport ResizeSensor from './ResizeSensor';\nimport * as actions from '../actions';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport CPUMEMListView from './usage/cpumemoryListView';\nimport ApplicationView from '../components/applicationView';\nimport DailyReportView from '../components/dailyReportView';\nimport NetworkTcpUdpView from '../components/networkTcpUdpView';\nimport NetworkTcpUdpComposeView from '../components/networkTcpUdpComposeView';\nimport SelectFromTo from '../components/selectFromTo';\n\nimport * as serviceCluster from '../services/service_instance_service';\nimport * as serviceCompute from '../services/service_compute_service';\n\nimport './styles.css';\n\nconst ReactGridLayout = WidthProvider(RGL);\n\n\nconst headerStyle = {\n    backgroundImage: 'url()'\n}\nvar horizon = 6;\nvar vertical = 13;\nvar layout = [\n    {\"w\":6,\"h\":13,\"x\":0,\"y\":0,\"i\":\"0\",\"moved\":false,\"static\":false, \"title\":\"Cluster Health\"},\n    {\"w\":6,\"h\":13,\"x\":6,\"y\":0,\"i\":\"1\",\"moved\":false,\"static\":false, \"title\":\"Application Statistics\"},\n    {\"w\":6,\"h\":8,\"x\":0,\"y\":13,\"i\":\"2\",\"moved\":false,\"static\":false, \"title\":\"Network I/O Trend\"},\n    {\"w\":6,\"h\":8,\"x\":6,\"y\":13,\"i\":\"3\",\"moved\":false,\"static\":false, \"title\":\"Network I/O Trend\"}];\nconst panes = [\n    { menuItem: 'TCP' },\n    { menuItem: 'UDP' },\n]\nlet _self = null;\nclass AnalysticViewZone extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onHandleClick = this.onHandleClick.bind(this);\n        const layout = this.generateLayout();\n        this.state = {\n            layout,\n            listData : [\n                {alarm:'3', dName:'Cluster-A', values:{cpu:35, mem:55, sys:33, net:[10,15], time:'2019-07-19 12:00:00'}},\n                {alarm:'5', dName:'Cluster-B', values:{cpu:78, mem:78, sys:12, net:[7,12], time:'2019-07-19 12:00:00'}},\n                {alarm:'1', dName:'Cluster-C', values:{cpu:32, mem:33, sys:67, net:[3,18], time:'2019-07-19 12:00:00'}},\n                {alarm:'2', dName:'Cluster-D', values:{cpu:23, mem:46, sys:41, net:[11,14], time:'2019-07-19 12:00:00'}},\n                {alarm:'4', dName:'Cluster-E', values:{cpu:55, mem:67, sys:23, net:[7,11], time:'2019-07-19 12:00:00'}}\n            ],\n            networkData:[],\n            tcpudpClusterData:[],\n            tcpudpData:null,\n            activeIndex:'tcp',\n            tcpPositive:true,\n            udpPositive:false,\n            listCluster:null,\n            selectedCloudlet:'barcelona-mexdemo',\n            applications:null\n        };\n        this.state.optionOne = [\n            {key:'itm_1', value:'cpu', text:'CPU Usage'},\n            {key:'itm_2', value:'memory', text:'MEM Usage'},\n            {key:'itm_3', value:'filesys', text:'FileSys Usage'}\n            ]\n        _self = this;\n\n        this.interval = null;\n        this.intervalTab = null;\n\n        //before MWC show.... untile 2019.02.30\n        this.clusters = [];\n        this.tcpudpCloumns = ['tcpConns', 'tcpRetrans', 'udpRecv', 'udpRecvErr', 'udpSend'];\n        this.applications = [\n            {cloudlet:'barcelona-mexdemo',\n                clusters:[\n                    {cluster:'tdg-barcelona-niantic', apps:[''], shortApps:['neon2']},\n                    {cluster:'tdg-barcelona-mobiledgex-demoapp',\n                        apps:[],\n                        shortApps:['mobiledgexsdkdemo', 'facedetectiondemo']\n                    }\n                ]\n            },\n            {cloudlet:'sk-mwc',\n                clusters:[\n                    {cluster:'skt-barcelona-1000realities', apps:['thousandrealitiesapp','facedetectiondemo','mobiledgexsdkdemo']}\n                ]\n            }\n        ]\n\n    }\n\n    onHandleClick = function(e, data) {\n        this.props.handleChangeSite(data.children.props.to)\n    }\n    handleTabChange (activeIndex) {\n        if(activeIndex === 'tcp'){\n            this.setState({tcpPositive:true})\n            this.setState({udpPositive:false})\n        } else {\n            this.setState({tcpPositive:false})\n            this.setState({udpPositive:true})\n        }\n        this.setState({ activeIndex:activeIndex })\n        this.forceUpdate();\n    }\n    makeHeader_noChild =(title)=> (\n        <Header className='panel_title'>{title}</Header>\n    )\n    makeHeader_date =(title)=> (\n        <Header className='panel_title'>\n            <div style={{display:'flex', flexGrow:8}}>{title}</div>\n            {/* <SelectFromTo></SelectFromTo> */}\n        </Header>\n    )\n    makeHeader_select =(title)=> (\n        <Header className='panel_title'>\n            <div style={{display:'flex', flexGrow:8}}>{title}</div>\n            <div style={{display:'flex', flexGrow:2, alignSelf:'flex-end'}} className='panel_title_filter'>\n                {/*<Dropdown placeholder='CPU Usage' fluid search selection options={this.state.optionOne} />*/}\n            </div>\n        </Header>\n    )\n    makeHeader_switch =(title, index)=> (\n        <Header className='panel_title'>\n            <div style={{display:'flex', flexGrow:1}}>{title}</div>\n            <div style={{display:'flex'}} className='panel_title_filter'>\n                <Button.Group className='tcpudpSwich'>\n                    <Button positive={index === 0 ? true : false} onClick={(e,{value})=>this.handleTabChange('tcp')}>TCP</Button>\n                    <Button positive={index === 1 ? true : false}  onClick={(e,{value})=>this.handleTabChange('udp')}>UDP</Button>\n                </Button.Group>\n            </div>\n        </Header>\n    )\n    onResize = () => {\n        // if neither width nor height is provided via props\n        if (!this.props.width) {\n            this.setState({\n                width: this.mount.clientWidth,\n                //width: 1600\n            });\n        }\n        if (!this.props.height) {\n            this.setState({\n                height: this.mount.clientHeight,\n                //height: 900\n            });\n        }\n\n    };\n    generateDOM(_applications) {\n\n        return layout.map((item, i) => (\n            <div className=\"round_panel\" key={i} >\n                {\n                    (i === 1)? this.makeHeader_date(item.title) :\n                    (i === 2)? this.makeHeader_switch(item.title, 0) :\n                    (i === 3)? this.makeHeader_switch(item.title, 1) : this.makeHeader_noChild(item.title)\n                }\n                {\n                    (i === 0)? <CPUMEMListView listData={this.state.listData} cloudlets={this.cloudlets} clusters={this.clusters} applications={_applications}></CPUMEMListView>\n                    : (i === 1)? <ApplicationView cloudlets={this.cloudlets} clusters={this.clusters} applications={_applications} selectedCloudlet={this.state.selectedCloudlet}/>\n                    : (i === 2)? <NetworkTcpUdpComposeView applications={_applications} selectedCloudlet={this.state.selectedCloudlet}  activeIndex={this.state.activeIndex} netName={'TCP'}/>\n                    : (i === 3)? <NetworkTcpUdpComposeView applications={_applications} selectedCloudlet={this.state.selectedCloudlet}  activeIndex={this.state.activeIndex} netName={'UDP'}/>\n                    : <span>{item.i}</span>\n                }\n\n            </div>\n        ))\n    }\n\n    generateLayout() {\n        const p = this.props;\n\n        return layout\n    }\n\n    onLayoutChange(layout) {\n        //this.props.onLayoutChange(layout);\n\n    }\n    receiveClusterInfo(result) {\n        //_self.setState({listData:result})\n    }\n\n\n    receiveClusterApp(result) {\n\n        let appIndex = null;\n        result.map((obj) => (\n            obj.map((obj2) => (\n                obj2.series.map((seri) => (\n                    seri.columns.map((column, i) => (\n                        (column === 'app')? appIndex = i : null\n                    ))\n\n                ))\n            ))\n        ))\n        console.log('app index = ', appIndex)\n        let appNames = [];\n        if(appIndex){\n            result.map((obj) => (\n                obj.map((obj2) => (\n                    obj2.series.map((seri, i) => (\n                        seri.values.map((value) => {\n                            appNames.push({app:value[appIndex], cluster:value[appIndex+1]})\n                        })\n\n                    ))\n                ))\n            ))\n            console.log('app names = ', appNames)\n        }\n\n        //appName 중에  neon2 인것 찾기\n        let selectedApp = 'neon2';\n\n        appNames.map((obj) => {\n            if(obj.app.indexOf(selectedApp) > -1){\n                _self.applications[0].clusters[0].apps[0] = obj.app\n            }\n        })\n        console.log('set aplications ==', _self.applications, _self.state.applications)\n        _self.setState({applications:_self.applications})\n\n    }\n\n    getClusterHealth (store) {\n        if(_self.clusters.length) serviceCluster.getClusterHealth( _self.clusters, _self.receiveClusterInfo)\n    }\n    getAppClusterApp() {\n        // 클러스터에 해당하는 앱의 이름\n        serviceCluster.getAppClusterApp(this.clusters, _self.receiveClusterApp);\n    }\n\n    makeForm = (cluster, store) => (\n        {\n            \"token\":store,\n            \"params\":{\n                \"region\":\"US\",\n                \"clusterinst\":{\n                    \"cluster_key\":{\"name\":\"mmmm\"},\n                    \"cloudlet_key\":{\n                        \"operator_key\":{\"name\":\"TDG\"},\n                        \"name\":\"mexplat-stage-bonn-cloudlet\"\n                    },\n                    \"developer\":\"MobiledgeX\"\n                },\n                \"selector\":\"cpu\",\n                \"starttime\":\"2019-07-17T22:39:58Z\",\n                \"endtime\":\"2019-07-17T22:45:10Z\"\n            }\n\n        }\n    )\n    componentWillReceiveProps(nextProps, nextContext) {\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        if(nextProps.clusterInstData && nextProps.clusterInstData.length) {\n            nextProps.clusterInstData.map((cluster) => {\n                this.clusters.push(this.makeForm(cluster, store ? store.userToken : 'null'));\n            })\n            _self.getClusterHealth(store ? store.userToken : 'null')\n        }\n    }\n\n    componentDidMount() {\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        _self.interval = setInterval(() => {\n            _self.getClusterHealth(store);\n        }, 300000)\n        let {width, height} = this.props.size;\n        let rowHeight = 100; // h=3 then height = 30 * 3 = 90px\n        let divideH = (height / rowHeight);\n\n        let newHOne = Math.round(divideH*(2/3) - 1.5);\n        let newHTwo = Math.round(divideH*(1/3));\n\n        let resizeLayout = [\n            {\"w\":6,\"h\":newHOne,\"x\":0,\"y\":0,\"i\":\"0\",\"moved\":false,\"static\":false, \"title\":\"Cluster Health\"},\n            {\"w\":6,\"h\":newHOne,\"x\":6,\"y\":0,\"i\":\"1\",\"moved\":false,\"static\":false, \"title\":\"Application Statistics\"},\n            {\"w\":6,\"h\":newHTwo,\"x\":0,\"y\":newHOne,\"i\":\"2\",\"moved\":false,\"static\":false, \"title\":\"Network I/O Trend\"},\n            {\"w\":6,\"h\":newHTwo,\"x\":6,\"y\":newHOne,\"i\":\"3\",\"moved\":false,\"static\":false, \"title\":\"Network I/O Trend\"}]\n\n        this.setState({layout:resizeLayout})\n\n        // _self.intervalTab = setInterval((e) => {\n        //     _self.handleTabChange(e, (_self.state.activeIndex === 0)? {activeIndex:1} : {activeIndex:0})\n        // }, 6000)\n    }\n    componentWillUnmount() {\n        clearInterval(_self.interval)\n        clearInterval(_self.intervalTab)\n    }\n\n    render() {\n\n        return (\n            <ReactGridLayout style={{backgroundColor:'green !important', height:'100%'}}\n                layout={this.state.layout}\n                onLayoutChange={this.onLayoutChange}\n                {...this.props}\n                useCSSTransforms={false}\n            >\n                {this.generateDOM(this.state.applications)}\n            </ReactGridLayout>\n        );\n    }\n    static defaultProps = {\n        className: \"layout\",\n        items: 20,\n        rowHeight: 100,\n        cols: 12,\n        width: 1900\n    };\n}\n\n\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleChangeSite: (data) => { dispatch(actions.changeSite(data))},\n        handleInjectData: (data) => { dispatch(actions.injectData(data))}\n    };\n};\n\nexport default connect(null, mapDispatchProps)(sizeMe({ monitorHeight: true })(AnalysticViewZone));\n"]},"metadata":{},"sourceType":"module"}