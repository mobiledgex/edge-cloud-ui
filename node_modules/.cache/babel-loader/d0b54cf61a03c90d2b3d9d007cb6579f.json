{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/chartGauge/gauge.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Motion, spring } from 'react-motion';\nimport * as d3 from \"d3\";\nvar formatInt = d3.format(\".0f\");\nvar formatComma = d3.format(\",\");\nvar formatFloat = d3.format(\".2f\");\nvar formatPercent = d3.format(\".1f\", \".1f\");\nvar divid = 4 / 6; //파이를 1조각에서 6조각으로 더 나눔\n// let ratio = (360 - 60)/360; // 원에서 하단 좌,우 30도 씩 총60도를 빼준 비율\n// let availPie = 360 - 60;\n// let rotateOffset = 180 - 30;\n\nvar ratio = (360 - 90) / 360; // 원에서 하단 좌,우 90도 씩 총180도를 빼준 비율\n\nvar availPie = 360 - 180;\nvar rotateOffset = 180 - 90;\n\nvar Gauge =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Gauge, _Component);\n\n  /*\r\n  out circle size : 245, 116\r\n  gauge_needle_white : 232, 232\r\n   */\n  function Gauge() {\n    var _this;\n\n    _classCallCheck(this, Gauge);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Gauge).call(this));\n\n    _this.makeFormat = function (value) {\n      return value * ratio; // 0 ~ 100\n    };\n\n    _this.makeDegree = function (currentDegrees, self) {\n      var ratioForMax = availPie / self.maxTemper;\n      var degree = currentDegrees * ratioForMax - rotateOffset;\n      return degree;\n    };\n\n    _this.state = {\n      degree: -90,\n      boardSrc: '/assets/gauge/chart_gauge_in_circle_rainbow.png',\n      currentTemp: 0,\n      currentPercentTemp: 0,\n      label: 'NO TITLE',\n      unit: '',\n      g: null\n    };\n    _this.minTemper = 0;\n    _this.maxTemper = 180;\n    _this.roundBoards = ['/assets/gauge/chart_gauge_in_circle_rainbow.png', '/assets/gauge_bk_yellow.png', '/assets/gauge_bk_orange.png', '/assets/gauge_bk_red.png'];\n    _this.fakeDatas = [0, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.52, 1.53];\n    return _this;\n  }\n  /*\r\n  온도가 최소 0일 때 각도는 : -90\r\n  온도가 최대 100일 때 각도는 : 90\r\n  100:180 = 현재온도:?\r\n   */\n\n\n  _createClass(Gauge, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var self = this;\n      var delay = 3; //seconds\n\n      var count = 0;\n\n      var interval = function interval() {\n        //let currentTemper =  Math.random()*this.maxTemper;// 0 ~ 100\n        var fnum = Math.round(Math.random() * 9);\n        var currentTemper = _this2.fakeDatas[0]; // 0 ~ 100\n\n        var currentDegrees = currentTemper * ratio; // 0 ~ 100\n        //let currentTemper =  0;\n        //currentTemper = formatPercent(currentTemper);\n        //레벨에 따른 배경 색 변경\n        // let statusBoard =\n        //     (currentTemper < 1.5) ? this.roundBoards[0] :\n        //     (currentTemper >= 1.5 && currentTemper < 2.0) ? this.roundBoards[1] :\n        //     (currentTemper >= 2.0 && currentTemper < 2.5) ? this.roundBoards[2] :\n        //     (currentTemper >= 2.5) ? this.roundBoards[3] : this.roundBoards[0];\n\n        var statusBoard = _this2.roundBoards[0]; //self.setState({currentTemp:currentTemper, degree: self.makeDegree(currentDegrees, self), boardSrc: statusBoard, label:this.props.label})\n\n        count++;\n\n        if (count > self.fakeDatas.length) {\n          count = 0;\n        } //setTimeout(interval, 1000 * delay);\n\n      };\n\n      setTimeout(interval, 500);\n      this.renderGauge(0, {}, 'Cores', '');\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      /*\r\n      compareMethod:\"gt\"\r\n      critical1:28\r\n      curr:-1\r\n      major1:27\r\n      minor1:26\r\n       */\n      //console.log('20191009 ----- gauge receive data ==== '+nextProps.data)\n      if (nextProps && nextProps.data) {\n        this.maxTemper = nextProps.data[1];\n        this.renderGauge(nextProps.data[0], {\n          critical1: nextProps.data.critical1,\n          critical2: nextProps.data.critical2,\n          major1: nextProps.data.major1,\n          major2: nextProps.data.major2,\n          minor1: nextProps.data.minor1,\n          minor2: nextProps.data.minor2\n        }, nextProps.type, nextProps.title);\n        this.setState({\n          label: nextProps.label,\n          unit: nextProps.unit,\n          type: nextProps.type\n        });\n      } else {}\n    }\n  }, {\n    key: \"renderGauge\",\n    value: function renderGauge(value, limits, type, title) {\n      var self = this; //let currentTemper =  Math.random()*this.maxTemper;// 0 ~ 100\n\n      var currentTemper = value;\n\n      if (type === 'humi') {\n        currentTemper = Number(formatPercent(currentTemper));\n      } else if (type === 'Cores') {\n        currentTemper = currentTemper;\n      }\n\n      ;\n\n      if (type === 'GB') {\n        currentTemper = currentTemper / 1000;\n      } else if (type === 'TB') {\n        currentTemper = currentTemper / (1000 * 1000);\n      }\n\n      var statusBoard = this.roundBoards[0];\n\n      if (type === 'temp') {\n        statusBoard = currentTemper < limits.minor1 && currentTemper > limits.major1 ? this.roundBoards[1] : currentTemper >= limits.major1 && currentTemper < limits.critical1 ? this.roundBoards[2] : currentTemper >= limits.critical1 ? this.roundBoards[3] : this.roundBoards[0];\n      }\n\n      if (type === 'pue') {\n        statusBoard = currentTemper < limits.minor1 && currentTemper > limits.major1 ? this.roundBoards[1] : currentTemper >= limits.major1 && currentTemper < limits.critical1 ? this.roundBoards[2] : currentTemper >= limits.critical1 ? this.roundBoards[3] : this.roundBoards[0];\n      }\n\n      if (type === 'humi') {\n        if (currentTemper > limits.minor1 && currentTemper < limits.minor2) {\n          //정상\n          statusBoard = this.roundBoards[0];\n        } else {\n          //임계치 초과\n          //minor(min)\n          if (currentTemper <= limits.minor1 && currentTemper > limits.major1) statusBoard = this.roundBoards[1]; //minor(max)\n\n          if (currentTemper >= limits.minor2 && currentTemper < limits.major2) statusBoard = this.roundBoards[1]; //major(min)\n\n          if (currentTemper <= limits.major1 && currentTemper > limits.critical1) statusBoard = this.roundBoards[2]; //major(max)\n\n          if (currentTemper >= limits.major2 && currentTemper < limits.critical2) statusBoard = this.roundBoards[2]; //critical(min/max)\n\n          if (currentTemper <= limits.critical1 || currentTemper >= limits.critical2) statusBoard = this.roundBoards[3];\n        }\n      } //degree : 바늘의 각도\n      //총270도에서 sections개수(12, 20)개로 나누고 눈금단위를 5로 설정 (60, 100)\n\n      /*\r\n      let totalValue = this.props.sections.length * 5;\r\n      let currentValue = (270 * value) / totalValue;\r\n      let rate = 0.75 / this.props.sections;\r\n      self.setState({currentTemp:currentTemper, degree: (currentValue)- 135, boardSrc: statusBoard})\r\n      */\n\n\n      var percentVal = 0;\n      if (value) percentVal = formatFloat(value / self.maxTemper * 100);\n      console.log('20191030 percent value == ', percentVal, \" : degree == \", self.makeDegree(value, self));\n      if (value) self.setState({\n        currentTemp: percentVal,\n        degree: self.makeDegree(value, self),\n        boardSrc: statusBoard,\n        label: title\n      });\n    }\n  }, {\n    key: \"_percToDeg\",\n    value: function _percToDeg(perc) {\n      return perc * 360;\n    }\n  }, {\n    key: \"_percToRad\",\n    value: function _percToRad(perc) {\n      return this._degToRad(this._percToDeg(perc));\n    }\n  }, {\n    key: \"_degToRad\",\n    value: function _degToRad(deg) {\n      return deg * Math.PI / 180.5;\n    }\n  }, {\n    key: \"_deg2rad\",\n    value: function _deg2rad(deg) {\n      return deg / 180 * Math.PI;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var degree = this.state.degree;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cloudlet_monitoring_charts_gauge_wrapper_bg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: this.state.boardSrc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"cloudlet_monitoring_charts_gauge_wrapper_needle\",\n        ref: function ref(_ref) {\n          return _this3.needleImg = _ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Motion, {\n        key: degree,\n        defaultStyle: {\n          rotate: 0,\n          scale: 1\n        },\n        style: {\n          rotate: spring(degree),\n          scale: spring(1)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, function (style) {\n        return React.createElement(\"div\", {\n          className: \"cloudlet_monitoring_charts_gauge_wrapper_needle_img\",\n          style: {\n            transform: \"rotate( \".concat(style.rotate, \"deg )\"),\n            height: 185,\n            width: 185\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: \"/assets/gauge/gauge_needle_white.png\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return Gauge;\n}(Component);\n\nexport default Gauge;","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/chartGauge/gauge.js"],"names":["React","Component","Fragment","Motion","spring","d3","formatInt","format","formatComma","formatFloat","formatPercent","divid","ratio","availPie","rotateOffset","Gauge","makeFormat","value","makeDegree","currentDegrees","self","ratioForMax","maxTemper","degree","state","boardSrc","currentTemp","currentPercentTemp","label","unit","g","minTemper","roundBoards","fakeDatas","delay","count","interval","fnum","Math","round","random","currentTemper","statusBoard","length","setTimeout","renderGauge","nextProps","data","critical1","critical2","major1","major2","minor1","minor2","type","title","setState","limits","Number","percentVal","console","log","perc","_degToRad","_percToDeg","deg","PI","ref","needleImg","rotate","scale","style","transform","height","width"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { Motion, spring } from 'react-motion';\r\nimport * as d3 from \"d3\";\r\n\r\n\r\nconst formatInt = d3.format(\".0f\");\r\nconst formatComma = d3.format(\",\");\r\nconst formatFloat = d3.format(\".2f\");\r\nconst formatPercent = d3.format(\".1f\",\".1f\");\r\nlet divid = 4 / 6; //파이를 1조각에서 6조각으로 더 나눔\r\n// let ratio = (360 - 60)/360; // 원에서 하단 좌,우 30도 씩 총60도를 빼준 비율\r\n// let availPie = 360 - 60;\r\n// let rotateOffset = 180 - 30;\r\n\r\nlet ratio = (360 - 90)/360; // 원에서 하단 좌,우 90도 씩 총180도를 빼준 비율\r\nlet availPie = 360 - 180;\r\nlet rotateOffset = 180 - 90;\r\n\r\nclass Gauge extends Component {\r\n    /*\r\n    out circle size : 245, 116\r\n    gauge_needle_white : 232, 232\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            degree: -90,\r\n            boardSrc:'/assets/gauge/chart_gauge_in_circle_rainbow.png',\r\n            currentTemp:0,\r\n            currentPercentTemp:0,\r\n            label:'NO TITLE',\r\n            unit:'',\r\n            g: null\r\n        }\r\n        this.minTemper = 0;\r\n        this.maxTemper = 180;\r\n        this.roundBoards = ['/assets/gauge/chart_gauge_in_circle_rainbow.png', '/assets/gauge_bk_yellow.png', '/assets/gauge_bk_orange.png', '/assets/gauge_bk_red.png']\r\n\r\n        this.fakeDatas = [0,    1.41,\t1.42,\t1.43,\t1.44,\t1.45,\t1.46,\t1.47,\t1.52,\t1.53]\r\n    }\r\n\r\n    /*\r\n    온도가 최소 0일 때 각도는 : -90\r\n    온도가 최대 100일 때 각도는 : 90\r\n    100:180 = 현재온도:?\r\n     */\r\n    componentDidMount () {\r\n        let self = this;\r\n        let delay = 3; //seconds\r\n        let count = 0;\r\n\r\n        let interval = () => {\r\n            //let currentTemper =  Math.random()*this.maxTemper;// 0 ~ 100\r\n            let fnum = Math.round(Math.random()*9)\r\n            let currentTemper = this.fakeDatas[0] ;// 0 ~ 100\r\n            let currentDegrees = currentTemper * ratio ;// 0 ~ 100\r\n            //let currentTemper =  0;\r\n            //currentTemper = formatPercent(currentTemper);\r\n            //레벨에 따른 배경 색 변경\r\n            // let statusBoard =\r\n            //     (currentTemper < 1.5) ? this.roundBoards[0] :\r\n            //     (currentTemper >= 1.5 && currentTemper < 2.0) ? this.roundBoards[1] :\r\n            //     (currentTemper >= 2.0 && currentTemper < 2.5) ? this.roundBoards[2] :\r\n            //     (currentTemper >= 2.5) ? this.roundBoards[3] : this.roundBoards[0];\r\n            let statusBoard = this.roundBoards[0];\r\n            //self.setState({currentTemp:currentTemper, degree: self.makeDegree(currentDegrees, self), boardSrc: statusBoard, label:this.props.label})\r\n            count ++;\r\n            if(count > self.fakeDatas.length) {\r\n                count = 0;\r\n            }\r\n            //setTimeout(interval, 1000 * delay);\r\n        }\r\n\r\n        setTimeout(interval, 500)\r\n\r\n        this.renderGauge(0, {}, 'Cores', '');\r\n\r\n    }\r\n    componentWillReceiveProps (nextProps) {\r\n        /*\r\n        compareMethod:\"gt\"\r\n        critical1:28\r\n        curr:-1\r\n        major1:27\r\n        minor1:26\r\n         */\r\n        //console.log('20191009 ----- gauge receive data ==== '+nextProps.data)\r\n        if(nextProps && nextProps.data) {\r\n            this.maxTemper = nextProps.data[1];\r\n            this.renderGauge(nextProps.data[0], {critical1: nextProps.data.critical1, critical2: nextProps.data.critical2,\r\n                major1: nextProps.data.major1, major2: nextProps.data.major2,\r\n                minor1: nextProps.data.minor1, minor2: nextProps.data.minor2\r\n            }, nextProps.type, nextProps.title);\r\n            this.setState({label:nextProps.label, unit:nextProps.unit, type:nextProps.type});\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    makeFormat = (value) => {\r\n        return value * ratio ;// 0 ~ 100\r\n    }\r\n    makeDegree = (currentDegrees, self) => {\r\n        let ratioForMax = availPie / self.maxTemper;\r\n        let degree = (currentDegrees*ratioForMax) - rotateOffset;\r\n        return degree;\r\n    }\r\n\r\n    renderGauge(value, limits, type, title) {\r\n        let self = this;\r\n\r\n        //let currentTemper =  Math.random()*this.maxTemper;// 0 ~ 100\r\n        let currentTemper =  value;\r\n        if(type === 'humi') {\r\n            currentTemper = Number(formatPercent(currentTemper))\r\n        } else if(type === 'Cores') {\r\n            currentTemper = currentTemper\r\n        };\r\n        if(type === 'GB'){\r\n            currentTemper = currentTemper/(1000)\r\n        } else if(type === 'TB') {\r\n            currentTemper = currentTemper/(1000*1000)\r\n        }\r\n        let statusBoard = this.roundBoards[0];\r\n\r\n        if(type === 'temp') {\r\n            statusBoard = (currentTemper < limits.minor1 && currentTemper > limits.major1) ? this.roundBoards[1] :\r\n                (currentTemper >= limits.major1 && currentTemper < limits.critical1) ? this.roundBoards[2] :\r\n                    (currentTemper >= limits.critical1) ? this.roundBoards[3] : this.roundBoards[0];\r\n        }\r\n        if(type === 'pue') {\r\n            statusBoard = (currentTemper < limits.minor1 && currentTemper > limits.major1) ? this.roundBoards[1] :\r\n                (currentTemper >= limits.major1 && currentTemper < limits.critical1) ? this.roundBoards[2] :\r\n                    (currentTemper >= limits.critical1) ? this.roundBoards[3] : this.roundBoards[0];\r\n        }\r\n\r\n        if(type === 'humi') {\r\n            if(currentTemper > limits.minor1 && currentTemper < limits.minor2) { //정상\r\n                statusBoard = this.roundBoards[0]\r\n            } else { //임계치 초과\r\n                //minor(min)\r\n                if(currentTemper <= limits.minor1 && currentTemper > limits.major1) statusBoard = this.roundBoards[1];\r\n                //minor(max)\r\n                if(currentTemper >= limits.minor2 && currentTemper < limits.major2) statusBoard = this.roundBoards[1];\r\n                //major(min)\r\n                if(currentTemper <= limits.major1 && currentTemper > limits.critical1) statusBoard = this.roundBoards[2];\r\n                //major(max)\r\n                if(currentTemper >= limits.major2 && currentTemper < limits.critical2) statusBoard = this.roundBoards[2];\r\n                //critical(min/max)\r\n                if(currentTemper <= limits.critical1 || currentTemper >= limits.critical2) statusBoard = this.roundBoards[3];\r\n\r\n            }\r\n        }\r\n\r\n        //degree : 바늘의 각도\r\n        //총270도에서 sections개수(12, 20)개로 나누고 눈금단위를 5로 설정 (60, 100)\r\n        /*\r\n\t\tlet totalValue = this.props.sections.length * 5;\r\n        let currentValue = (270 * value) / totalValue;\r\n        let rate = 0.75 / this.props.sections;\r\n        self.setState({currentTemp:currentTemper, degree: (currentValue)- 135, boardSrc: statusBoard})\r\n\t\t*/\r\n        let percentVal = 0;\r\n        if(value) percentVal = formatFloat((value/self.maxTemper)*100);\r\n\r\n        console.log('20191030 percent value == ', percentVal, \" : degree == \", self.makeDegree(value, self))\r\n\r\n        if(value) self.setState({currentTemp:percentVal, degree: self.makeDegree(value, self), boardSrc: statusBoard, label:title})\r\n\r\n\r\n    }\r\n    _percToDeg(perc) {\r\n        return perc * 360;\r\n    }\r\n\r\n    _percToRad(perc) {\r\n        return this._degToRad(this._percToDeg(perc));\r\n    }\r\n\r\n    _degToRad(deg) {\r\n        return deg * Math.PI / 180.5;\r\n    }\r\n\r\n    _deg2rad(deg) {\r\n        return deg / 180 * Math.PI;\r\n    }\r\n\r\n    render() {\r\n        let {degree} = this.state;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"cloudlet_monitoring_charts_gauge_wrapper_bg\">\r\n                    <img src={this.state.boardSrc} />\r\n                </div>\r\n                {/*<RainbowCircle value={0.5}*/}\r\n                                {/*size={30}*/}\r\n                                {/*radius={100}*/}\r\n                                {/*type={this.props.type}*/}\r\n                                {/*sections={this.props.sections}*/}\r\n                                {/*legend={this.props.legend}*/}\r\n                                {/*label=\"15%\" />*/}\r\n                <div className=\"cloudlet_monitoring_charts_gauge_wrapper_needle\" ref={ref => this.needleImg = ref}>\r\n                    <Motion\r\n                        key={degree}\r\n                        defaultStyle={{ rotate: 0, scale: 1}}\r\n                        style={{ rotate: spring(degree), scale: spring(1)}}\r\n                    >\r\n\r\n                        {style =>\r\n                            (\r\n                                <div className=\"cloudlet_monitoring_charts_gauge_wrapper_needle_img\" style={{transform: `rotate( ${style.rotate}deg )`, height:185, width:185}}>\r\n                                    <img src='/assets/gauge/gauge_needle_white.png' />\r\n                                </div>\r\n                            )\r\n                        }\r\n\r\n                    </Motion>\r\n                </div>\r\n\r\n                {/*<div style={{position:'absolute', top:63, left:0, width:140, backgroundColor:'transparent'}}>*/}\r\n                    {/*<div className={'valueNum'} style={{width:'100%', textAlign:'center', fontSize:20, color:'#bdbdbd'}}>{this.state.label}</div>*/}\r\n                {/*</div>*/}\r\n                {/*<div style={{position:'absolute', top:90, left:0, width:140, backgroundColor:'transparent'}}>*/}\r\n                    {/*<div className={'valueNum'} style={{width:'100%', textAlign:'center', fontSize:30, fontWeight:'bold', color:'#fff'}}>{this.state.currentTemp+\" %\"}</div>*/}\r\n                {/*</div>*/}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Gauge;\r\n"]},"metadata":{},"sourceType":"module"}