{"ast":null,"code":"import _toConsumableArray from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/sites/siteTwo_page_one.js\";\n//tab 클릭 이벤트 받기 redux 구조\n//tab 클릭 이벤트 발생하면 페이지 넘기, 페이지 넘김 애니메이션 적용\nimport React from 'react';\nimport { Grid, Dropdown } from 'semantic-ui-react';\nimport { withRouter } from 'react-router-dom';\nimport Alert from 'react-s-alert'; //\n\nimport AnimatedMap from '../libs/simpleMaps/with-react-motion';\nimport DeveloperSideInfo from '../container/developerSideInfo'; //service\n\nimport * as services from '../services/service_compute_service'; //\n\nimport * as aggregation from '../utils'; //redux\n\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport './siteTwo_page_one.css';\nvar _self = null;\n\nvar ContainerOne = function ContainerOne(props) {\n  return React.createElement(AnimatedMap, {\n    parentProps: props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  });\n};\n\nvar rgn = ['US', 'KR', 'EU'];\n\nvar SiteTwoPageOne =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SiteTwoPageOne, _React$Component);\n\n  function SiteTwoPageOne(props) {\n    var _this;\n\n    _classCallCheck(this, SiteTwoPageOne);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SiteTwoPageOne).call(this, props));\n\n    _this.handleChange = function (e, _ref) {\n      var value = _ref.value;\n      return _this.setState({\n        value: value\n      });\n    };\n\n    _this.handleSearchChange = function (e, _ref2) {\n      var searchQuery = _ref2.searchQuery;\n      return _this.setState({\n        searchQuery: searchQuery\n      });\n    };\n\n    _this.receiveResult = function (result) {\n      if (result.length) {\n        var join = null;\n\n        if (result[0]['Edit']) {\n          join = _self.state.developerData.concat(result);\n        } else {\n          join = _self.state.developerData;\n        }\n\n        if (result.error) {\n          _this.props.handleAlertInfo('error', result.error);\n        } else {\n          _self.setState({\n            developerData: join\n          });\n\n          _self.receiveCloudlet(join);\n        }\n\n        _self.props.handleLoadingSpinner(false);\n      } else {//alert('Loading Fail')\n      }\n    };\n\n    _this.getInfoCloudlet = function (region) {\n      // if(!this.state.liveComp) {\n      //     return;\n      // }\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n\n      _this.setState({\n        devData: []\n      });\n\n      if (region !== 'All') {\n        rgn = [region];\n      }\n\n      rgn.map(function (item, i) {\n        setTimeout(function () {\n          return services.getMCService('ShowCloudlet', {\n            token: store ? store.userToken : 'null',\n            region: item\n          }, _self.receiveResult);\n        }, 500 * i);\n      });\n    };\n\n    _this.getInfoApp = function (region) {\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n      var serviceBody = {};\n      _self.loadCount = 0;\n\n      _this.setState({\n        devData: []\n      });\n\n      if (region !== 'All') {\n        rgn = [region];\n      } else {\n        rgn = ['US', 'KR', 'EU'];\n      }\n\n      rgn.map(function (item) {\n        // All show appInst\n        services.getMCService('ShowAppInst', {\n          token: store ? store.userToken : 'null',\n          region: item\n        }, _self.receiveAppInst);\n      });\n    };\n\n    _this.handleChangeOne = function (e, _ref3) {\n      var value = _ref3.value;\n\n      _self.setState({\n        dropdownValueOne: value\n      }); // _self.setState({dropDownValueTwo:'Select Developer', dropDownValueThree:'Select Cloudlet',\n      //     countryOptionsClou:[{ key: 1000, value: 'default', text: 'Select Cloudlet' }],\n      //     countryOptionsDev:[{ key: 1000, value: 'default', text: 'Select Developer' }], selectedDevelop:''})\n\n\n      if (value !== 'default') {\n        console.log('setDeveloperList...', value);\n\n        _self.setDeveloperList(value);\n\n        _self.setCloudletList(value); //filtering by cloudlet name\n        // let groupby = aggregation.groupBy(_self.state.cloudletsData, 'Operator')\n        // console.log('groupy operator..', groupby)\n        // let groupData = _self.setLocationGroupData(groupby[value]);\n        // if(groupby[value]) _self.setState({locationData:groupData});\n\n      } else {\n        _self.setState({\n          locationData: _self.state.savelocationData\n        });\n      }\n\n      _self.resetMap(false);\n\n      _self.setState({\n        sideVisible: false,\n        condition: 'one'\n      });\n\n      _self.forceUpdate();\n    };\n\n    _this.handleChangeTwo = function (e, _ref4) {\n      var value = _ref4.value;\n      console.log('change2.. value', value);\n\n      _self.resetMap(false);\n\n      _self.setState({\n        sideVisible: false\n      });\n\n      if (value === 'default') {\n        _self.resetMap(false);\n\n        _self.setState({\n          sideVisible: false\n        });\n      } else {\n        //filtering by cloudlet name\n        var groupby = aggregation.groupBy(_self.state.devGroup, 'OrganizationName');\n        var filtered = [];\n        var _cloudlets = [];\n        groupby[value].map(function (obj) {\n          // condition of..\n          if (_self.state.dropdownValueOne !== 'default') {\n            if (_self.state.dropdownValueThree !== 'default') {\n              // operator & cloudlet\n              if (_self.state.dropdownValueOne === obj.Operator && _self.state.dropdownValueThree === obj.Cloudlet) {\n                //TODO: 2019-04-02 setting name of app to\n                _cloudlets.push(obj);\n              }\n            } else {\n              // operator\n              if (_self.state.dropdownValueOne === obj.Operator) {\n                _cloudlets.push(obj);\n              }\n            }\n          }\n        });\n\n        _cloudlets.map(function (cld) {\n          _self.state.cloudletsData.map(function (cloudlet) {\n            if (cloudlet['CloudletName'] === cld['Cloudlet']) {\n              filtered.push(cld);\n            }\n          });\n        });\n\n        if (filtered.length > 0) {\n          _self.setState({\n            locationData: _self.setAppinstGroupData(filtered)\n          });\n        } else {\n          var err = 'There is no result';\n          Alert.error(err, {\n            position: 'top-right',\n            effect: 'slide',\n            timeout: 5000\n          });\n\n          _self.props.handleChangeCity({\n            name: value\n          });\n        }\n      }\n\n      _self.setState({\n        dropdownValueTwo: value,\n        condition: 'two'\n      });\n\n      _self.forceUpdate();\n    };\n\n    _this.handleChangeThree = function (e, _ref5) {\n      var value = _ref5.value;\n\n      if (value === 'default') {\n        console.log('change2.. value', value);\n\n        _self.setState({\n          sideVisible: false\n        });\n      } else {\n        _self.setState({\n          sideVisible: true\n        }); //filtering by cloudlet name\n\n\n        var groupby = aggregation.groupBy(_self.state.cloudletsData, 'CloudletName');\n        console.log('groupy cloudlet..', groupby, groupby[value]);\n\n        if (groupby[value]) {\n          _self.setState({\n            locationData: _self.setLocationGroupData(groupby[value])\n          });\n        } else {\n          var err = 'There is no result';\n          Alert.error(err, {\n            position: 'top-right',\n            effect: 'slide',\n            timeout: 5000\n          });\n        }\n      }\n\n      _self.setState({\n        dropdownValueThree: value,\n        condition: 'three'\n      });\n\n      _self.props.handleChangeCity({\n        name: value\n      });\n\n      _self.forceUpdate();\n    };\n\n    _self = _assertThisInitialized(_this);\n    _self.state = {\n      locationData: null,\n      savelocationData: null,\n      url: '',\n      countryOptionsOper: [{\n        key: 1000,\n        value: 'default',\n        text: 'Select Operator'\n      }],\n      countryOptionsDev: [{\n        key: 1000,\n        value: 'default',\n        text: 'Select Developer'\n      }],\n      countryOptionsClou: [{\n        key: 1000,\n        value: 'default',\n        text: 'Select Cloudlet'\n      }],\n      sideVisible: false,\n      cpuUsage: null,\n      memUsage: null,\n      network: null,\n      everyCall: true,\n      selectedCity: 'dashboard',\n      dropdownValueOne: null,\n      dropdownValueTwo: null,\n      dropdownValueThree: null,\n      operGroup: null,\n      devGroup: [],\n      selectedDevelop: 'Select Develpoer',\n      selectedCloudlet: 'Select Cloudlet',\n      zoom: 'out',\n      isFetching: false,\n      multiple: true,\n      search: true,\n      searchQuery: null,\n      value: [],\n      condition: null,\n      devData: [],\n      developerData: []\n    };\n    _this.timeout = null;\n    _this.timeout2 = null;\n    _this.timeoutOnce = null;\n    return _this;\n  }\n\n  _createClass(SiteTwoPageOne, [{\n    key: \"clearData\",\n    value: function clearData() {\n      //TODO : 각 페이지에 데이터 전달하기 위해 redux 엑션 발생\n      this.props.handleInjectData(null);\n    }\n    /*********************\n     * Call Data from Server as REST\n     **********************/\n\n  }, {\n    key: \"receiveCPUData\",\n    value: function receiveCPUData(data) {\n      //console.log('slected city = '+_self.state.selectedCity);\n      var _data = null;\n      data.map(function (key, i) {\n        if (key.inst.indexOf(_self.state.selectedCity) > -1) _data = data[i];\n      });\n\n      if (_data) {\n        _self.setState({\n          cpuUsage: _data.score\n        });\n\n        _self.props.handleInjectData({\n          cpuUsage: _data.score\n        });\n      }\n    }\n  }, {\n    key: \"receiveMEMData\",\n    value: function receiveMEMData(data) {\n      //console.log('selected city = '+_self.state.selectedCity);\n      var _data = null;\n      data.map(function (key, i) {\n        if (key.inst.indexOf(_self.state.selectedCity) > -1) _data = data[i];\n      });\n\n      if (_data) {\n        _self.setState({\n          memUsage: _data.score\n        });\n\n        _self.props.handleInjectData({\n          memUsage: _data.score\n        });\n      }\n    }\n  }, {\n    key: \"receiveNETData\",\n    value: function receiveNETData(dataIn, dataOut) {\n      var _dataIn = null;\n      dataIn.map(function (key, i) {\n        if (key.inst.indexOf(_self.state.selectedCity) > -1) _dataIn = dataIn[i];\n      });\n      var _dataOut = null;\n      dataOut.map(function (key, i) {\n        if (key.inst.indexOf(_self.state.selectedCity) > -1) _dataOut = dataOut[i];\n      });\n\n      _self.props.handleInjectData({\n        network: {\n          recv: _dataIn,\n          send: _dataOut\n        }\n      });\n    }\n  }, {\n    key: \"receiveFileData\",\n    value: function receiveFileData(data) {\n      var _dataIn = null;\n      data.map(function (key, i) {\n        if (key.inst.indexOf(_self.state.selectedCity) > -1) _dataIn = data[i];\n      });\n      if (_dataIn) _self.props.handleInjectData({\n        filesystemUsage: _dataIn.score\n      });\n    }\n  }, {\n    key: \"receiveCloudlet\",\n    value: function receiveCloudlet(result) {\n      var locatData = _self.setLocationGroupData(result);\n\n      _self.setState({\n        locationData: locatData,\n        savelocationData: locatData,\n        cloudletsData: result\n      }); ////////////\n\n\n      var nameObj = result.map(function (item) {\n        return {\n          operator: item.Operator,\n          cloudlet: item.CloudletName\n        };\n      });\n      console.log('nameObj ', nameObj);\n\n      _self.setState({\n        nameObj: nameObj\n      });\n\n      var operatorsGroup = aggregation.groupBy(nameObj, 'operator');\n      var operKeys = Object.keys(operatorsGroup);\n      console.log('groupbyData operKeys ==>==> ', operKeys);\n      var operators1 = [{\n        key: 1000,\n        value: 'default',\n        text: 'Select Operator'\n      }];\n      var operators2 = operKeys.map(function (opr, i) {\n        return {\n          key: i,\n          value: opr,\n          text: opr\n        };\n      });\n\n      _self.setState({\n        countryOptionsOper: [].concat(operators1, _toConsumableArray(operators2)),\n        operGroup: operatorsGroup\n      }); /////////////\n\n\n      _self.forceUpdate();\n    }\n  }, {\n    key: \"setLocationGroupData\",\n    value: function setLocationGroupData(result) {\n      function reduceUp(value) {\n        return Math.round(value);\n      }\n\n      var locations = result.map(function (item) {\n        return {\n          LAT: reduceUp(item.CloudletLocation.latitude),\n          LON: reduceUp(item.CloudletLocation.longitude),\n          cloudlet: item.CloudletName\n        };\n      });\n      var locationData = [];\n      var groupbyData = aggregation.groupByCompare(locations, ['LAT', 'LON']);\n      console.log('grouby groupbyData = ', groupbyData);\n      var names = [];\n      Object.keys(groupbyData).map(function (key, i) {\n        names[i] = [];\n        groupbyData[key].map(function (data, j) {\n          names[i].push(data['cloudlet']);\n          if (j === groupbyData[key].length - 1) locationData.push({\n            \"name\": names[i],\n            \"coordinates\": [data['LON'], data['LAT']],\n            \"population\": 17843000,\n            \"cost\": groupbyData[key].length\n          });\n        });\n      });\n      console.log('location data ..... data ....data....', locationData);\n      return locationData;\n    }\n  }, {\n    key: \"setAppinstGroupData\",\n    value: function setAppinstGroupData(result) {\n      function reduceUp(value) {\n        return Math.round(value);\n      }\n\n      var locations = [];\n      result.map(function (item) {\n        _self.state.cloudletsData.map(function (cloudlet) {\n          if (item.Cloudlet === cloudlet.CloudletName) locations.push({\n            'LAT': reduceUp(cloudlet.CloudletLocation.latitude),\n            'LON': reduceUp(cloudlet.CloudletLocation.longitude),\n            'cloudlet': cloudlet.CloudletName,\n            'application': item.AppName\n          });\n        });\n      });\n      var locationData = [];\n      var groupbyData = aggregation.groupByCompare(locations, ['LAT', 'LON']);\n      console.log('grouby groupbyData = ', groupbyData);\n      var names = [];\n      Object.keys(groupbyData).map(function (key, i) {\n        names[i] = [];\n        groupbyData[key].map(function (data, j) {\n          names[i].push(data['application']);\n          if (j === groupbyData[key].length - 1) locationData.push({\n            \"name\": names[i],\n            \"coordinates\": [data['LON'], data['LAT']],\n            \"population\": 17843000,\n            \"cost\": groupbyData[key].length\n          });\n        });\n      });\n      return locationData;\n    }\n  }, {\n    key: \"setLocationData\",\n    value: function setLocationData(result) {\n      var locationData = [];\n      result.map(function (data, j) {\n        if (data) locationData.push({\n          \"name\": [data[0]['CloudletName']],\n          \"coordinates\": [data[0]['CloudletLocation']['longitude'], data[0]['CloudletLocation']['latitude']],\n          \"population\": 17843000,\n          \"cost\": data[0]['Operator']\n        });\n      });\n      console.log('location data ..... data ....data....', locationData);\n      return locationData;\n    }\n  }, {\n    key: \"receiveAppInst\",\n    value: function receiveAppInst(result) {\n      if (result.length) {\n        var join = null;\n\n        if (result[0]['Edit']) {\n          join = _self.state.devGroup.concat(result);\n        } else {\n          join = _self.state.devGroup;\n        }\n\n        if (result.error) {\n          this.props.handleAlertInfo('error', result.error);\n        } else {\n          _self.setState({\n            devGroup: join\n          });\n        }\n\n        _self.props.handleLoadingSpinner(false);\n      } else {//alert('Loading Fail')\n      }\n    }\n  }, {\n    key: \"receiveMehodData\",\n    value: function receiveMehodData(result) {\n      //TODO: counts call method from the developers\n      _self.props.handleInjectData({\n        methodCall: result\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      // if(nextProps.tabName !== this.props.tabName){\n      //     return true;\n      // }\n      return true;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      function timeStringToFloat(time) {\n        var startTime = new Date(time);\n        var startMsec = startTime.getMilliseconds();\n        return startMsec;\n      }\n\n      var every = 5000;\n\n      var getDatas = function getDatas(self) {\n        //call data from service\n        var old = new Date('2019-02-22 21:15:20').getTime();\n        var newd = new Date().getTime();\n        var sub = (newd - old) / (60 * 60 * 24);\n        self.timeout = setTimeout(function () {\n          getDatas(self);\n        }, every);\n      };\n\n      if (this.props.tabName === 'pg=1') {\n        this.setState({\n          sideVisible: true\n        });\n      } else {\n        this.setState({\n          sideVisible: false\n        });\n      } //ComputeService.getMCService('ShowCloudlet',{token:store.userToken, region:'US'}, _self.receiveCloudlet)\n\n      /********************************\n       * ---- new connection MC ----\n       * 2019 07 17 start monitoring console\n       ********************************/\n\n\n      var store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null;\n\n      if (store && store.userToken) {\n        this.getInfoCloudlet(this.props.changeRegion);\n        this.userToken = store ? store.userToken : 'null';\n        this.getInfoApp('All');\n      }\n      /*\n      dropdownValueOne:'TDG',\n          dropdownValueTwo:'barcelona-mexdemo',\n          dropdownValueThree:'MobiledgeX SDK Demo',\n       */\n\n\n      _self.timeoutOnce = setTimeout(function () {\n        if (_this2.props.tabName === 'pg=1') {\n          _self.setState({\n            dropdownValueOne: 'TDG'\n          }); //_self.setDeveloperList({value:'TDG'});\n          //_self.setCloudletList({value:'TDG'});\n\n        }\n      }, 2000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.timeout);\n      clearTimeout(this.timeoutOnce);\n      clearInterval(this.timeout2);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log('mapStateToProps receive next props ------->>>>>>', nextProps);\n\n      if (nextProps.city) {\n        console.log('change city >>-->> ', nextProps.city.detailMode);\n\n        if (nextProps.city.detailMode) {\n          this.setState({\n            sideVisible: true\n          });\n          return;\n        } else {\n          this.setState({\n            sideVisible: false\n          });\n        }\n\n        var cityName = String(nextProps.city.name);\n\n        if (cityName !== 'dashboard') {\n          this.zoomIn(nextProps.city.detailMode, nextProps.city.name);\n        } else {\n          console.log('city name .', nextProps.city.name);\n        } //현재 Barcelona == dashboard\n\n\n        var city = nextProps.city.name; // if(nextProps.city.name === 'barcelona' || nextProps.city.name === 'Barcelona') {\n        //     city = 'dashboard'\n        // }\n\n        this.setState({\n          selectedCity: city\n        });\n      }\n    } //go to NEXT\n\n  }, {\n    key: \"gotoNext\",\n    value: function gotoNext(value) {\n      //브라우져 입력창에 주소 기록\n      var mainPath = '/site3';\n      var subPath = 'pg=0';\n\n      _self.props.history.push({\n        pathname: mainPath,\n        search: subPath,\n        state: {\n          cloudlet: _self.state.dropdownValueThree\n        }\n      });\n\n      _self.props.history.location.search = subPath;\n\n      _self.props.handleChangeSite({\n        mainPath: mainPath,\n        subPath: subPath,\n        cloudlet: _self.state.dropdownValueThree\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn(detailMode, obj) {\n      console.log('zoom innnnnnnnnnnnnn', obj);\n\n      _self.setState({\n        sideVisible: detailMode\n      });\n\n      _self.setState({\n        zoom: 'in'\n      });\n\n      var cities = [];\n\n      if (obj !== 'default' && typeof obj === 'object') {\n        obj.map(function (city) {\n          cities.push(city.replace('  /  ', ''));\n        });\n        console.log('cities', cities, _self.state.cloudletsData);\n      } else {\n        cities.push(obj);\n      } //find cloudlet in group\n\n\n      var groupby = aggregation.groupBy(_self.state.cloudletsData, 'CloudletName');\n      var selectedGroup = [];\n      cities.map(function (city) {\n        selectedGroup.push(groupby[city]);\n      });\n      console.log('selected city in group..', groupby, selectedGroup); //set location of cloudlets binded grouped\n\n      _self.setState({\n        locationData: _self.setLocationData(selectedGroup)\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut(detailMode) {\n      _self.setState({\n        sideVisible: detailMode,\n        zoom: 'out'\n      });\n    }\n  }, {\n    key: \"resetMap\",\n    value: function resetMap(detailMode, from) {\n      if (from === 'fromDetail') {\n        _self.setState({\n          locationData: _self.state.savelocationData\n        });\n\n        _self.setState({\n          sideVisible: detailMode\n        });\n      } else {\n        _self.zoomOut(false);\n      }\n\n      _self.forceUpdate();\n    } //reset list of sub dropwDown\n\n  }, {\n    key: \"setDeveloperList\",\n    value: function setDeveloperList(key) {\n      var groupbyDevel = aggregation.groupBy(_self.state.devGroup, 'Operator');\n      var devData = groupbyDevel[key] ? aggregation.groupBy(groupbyDevel[key], 'OrganizationName') : {};\n      var devKeys = Object.keys(devData);\n      var developers1 = [{\n        key: 0,\n        value: 'default',\n        text: 'Select Developer'\n      }];\n      var developers2 = devKeys.map(function (opr, i) {\n        return {\n          key: i + 1,\n          value: opr,\n          text: opr\n        };\n      });\n\n      _self.setState({\n        countryOptionsDev: [].concat(developers1, _toConsumableArray(developers2))\n      });\n\n      _self.forceUpdate(); //&&&&&&&&&& until set MWC &&&&&&&&&&&&&\n\n\n      setTimeout(function () {\n        _self.setState({\n          dropdownValueTwo: 'default'\n        });\n\n        _self.setState({\n          selectedDevelop: 'Select Developer'\n        });\n      }, 4000);\n    }\n  }, {\n    key: \"setCloudletList\",\n    value: function setCloudletList(key) {\n      var operatorsGroup = [];\n\n      _self.state.operGroup[key].map(function (name) {\n        operatorsGroup.push(name);\n      });\n\n      var groupbyDevel = aggregation.groupBy(operatorsGroup, 'cloudlet');\n      var operKeys = Object.keys(groupbyDevel);\n      console.log('groupbyData cloudlet Keys ==>==> ', operKeys);\n      var cloudlets1 = [{\n        key: 0,\n        value: 'default',\n        text: 'Select Cloudlet'\n      }];\n      var cloudlets2 = operKeys.map(function (opr, i) {\n        return {\n          key: i + 1,\n          value: opr,\n          text: opr\n        };\n      });\n\n      _self.setState({\n        countryOptionsClou: [].concat(cloudlets1, _toConsumableArray(cloudlets2))\n      });\n\n      _self.forceUpdate(); //&&&&&&&&&& until set MWC &&&&&&&&&&&&&\n\n\n      setTimeout(function () {\n        _self.setState({\n          dropdownValueThree: 'default'\n        });\n\n        _self.setState({\n          selectedCloudlet: 'Select Cloudlet'\n        });\n      }, 3000);\n    }\n    /*\n      */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        id: \"bodyCont\",\n        className: \"console_body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"console_worldmap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614\n        },\n        __self: this\n      }, React.createElement(ContainerOne, {\n        ref: function ref(_ref6) {\n          return _this3.container = _ref6;\n        },\n        tabIdx: this.props.tabName,\n        data: this.state.locationData,\n        gotoNext: this.gotoNext,\n        zoomIn: this.zoomIn,\n        zoomOut: this.zoomOut,\n        resetMap: this.resetMap,\n        zoom: this.state.zoom,\n        condition: this.state.condition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"console_nav_left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"filter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Operator\",\n        fluid: true,\n        search: true,\n        selection: true,\n        options: this.state.countryOptionsOper,\n        value: this.state.dropdownValueOne,\n        onChange: this.handleChangeOne,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"filter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: this.state.selectedCloudlet,\n        fluid: true,\n        search: true,\n        selection: true,\n        options: this.state.countryOptionsClou,\n        value: this.state.dropdownValueThree,\n        selectedLabel: this.state.selectedCloudlet,\n        onChange: this.handleChangeThree,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"filter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: this.state.selectedDevelop,\n        fluid: true,\n        search: true,\n        selection: true,\n        options: this.state.countryOptionsDev,\n        value: this.state.dropdownValueTwo,\n        selectedLabel: this.state.selectedDevelop,\n        onChange: this.handleChangeTwo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"console_right_content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632\n        },\n        __self: this\n      }, React.createElement(DeveloperSideInfo, {\n        sideVisible: this.state.sideVisible,\n        gotoNext: this.gotoNext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 633\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SiteTwoPageOne;\n}(React.Component);\n\n;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log('mapStateToProps in siteTwo_page_one...', state);\n  return {\n    city: Object.assign({}, state.cityChanger.city),\n    changeRegion: state.changeRegion.region ? state.changeRegion.region : null\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleChangeCity: function handleChangeCity(data) {\n      dispatch(actions.changeCity(data));\n    },\n    handleChangeSite: function handleChangeSite(data) {\n      dispatch(actions.changeSite(data));\n    },\n    handleInjectData: function handleInjectData(data) {\n      dispatch(actions.injectNetworkData(data));\n    },\n    handleAlertInfo: function handleAlertInfo(mode, msg) {\n      dispatch(actions.alertInfo(mode, msg));\n    }\n  };\n};\n\nSiteTwoPageOne.defaultProps = {\n  tabName: 0,\n  onReceive: {\n    data: null\n  }\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(SiteTwoPageOne));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/sites/siteTwo_page_one.js"],"names":["React","Grid","Dropdown","withRouter","Alert","AnimatedMap","DeveloperSideInfo","services","aggregation","connect","actions","_self","ContainerOne","props","rgn","SiteTwoPageOne","handleChange","e","value","setState","handleSearchChange","searchQuery","receiveResult","result","length","join","state","developerData","concat","error","handleAlertInfo","receiveCloudlet","handleLoadingSpinner","getInfoCloudlet","region","store","localStorage","PROJECT_INIT","JSON","parse","devData","map","item","i","setTimeout","getMCService","token","userToken","getInfoApp","serviceBody","loadCount","receiveAppInst","handleChangeOne","dropdownValueOne","console","log","setDeveloperList","setCloudletList","locationData","savelocationData","resetMap","sideVisible","condition","forceUpdate","handleChangeTwo","groupby","groupBy","devGroup","filtered","_cloudlets","obj","dropdownValueThree","Operator","Cloudlet","push","cld","cloudletsData","cloudlet","setAppinstGroupData","err","position","effect","timeout","handleChangeCity","name","dropdownValueTwo","handleChangeThree","setLocationGroupData","url","countryOptionsOper","key","text","countryOptionsDev","countryOptionsClou","cpuUsage","memUsage","network","everyCall","selectedCity","operGroup","selectedDevelop","selectedCloudlet","zoom","isFetching","multiple","search","timeout2","timeoutOnce","handleInjectData","data","_data","inst","indexOf","score","dataIn","dataOut","_dataIn","_dataOut","recv","send","filesystemUsage","locatData","nameObj","operator","CloudletName","operatorsGroup","operKeys","Object","keys","operators1","operators2","opr","reduceUp","Math","round","locations","LAT","CloudletLocation","latitude","LON","longitude","groupbyData","groupByCompare","names","j","AppName","methodCall","nextProps","nextState","timeStringToFloat","time","startTime","Date","startMsec","getMilliseconds","every","getDatas","self","old","getTime","newd","sub","tabName","changeRegion","clearTimeout","clearInterval","city","detailMode","cityName","String","zoomIn","mainPath","subPath","history","pathname","location","handleChangeSite","cities","replace","selectedGroup","setLocationData","from","zoomOut","groupbyDevel","devKeys","developers1","developers2","cloudlets1","cloudlets2","ref","container","gotoNext","Component","mapStateToProps","assign","cityChanger","mapDispatchProps","dispatch","changeCity","changeSite","injectNetworkData","mode","msg","alertInfo","defaultProps","onReceive"],"mappings":";;;;;;;;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAcC,QAAd,QAA8B,mBAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,eAAlB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B,C,CACA;;AACA,OAAO,KAAKC,QAAZ,MAA0B,qCAA1B,C,CACA;;AACA,OAAO,KAAKC,WAAZ,MAA6B,UAA7B,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,OAAO,wBAAP;AAEA,IAAIC,KAAK,GAAG,IAAZ;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;AAAA,SAEjB,oBAAC,WAAD;AAAa,IAAA,WAAW,EAAEA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFiB;AAAA,CAArB;;AAKA,IAAIC,GAAG,GAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,CAAV;;IACMC,c;;;;;AACF,0BAAYF,KAAZ,EAAkB;AAAA;;AAAA;;AACd,wFAAMA,KAAN;;AADc,UAuClBG,YAvCkB,GAuCH,UAACC,CAAD;AAAA,UAAMC,KAAN,QAAMA,KAAN;AAAA,aAAkB,MAAKC,QAAL,CAAc;AAAED,QAAAA,KAAK,EAALA;AAAF,OAAd,CAAlB;AAAA,KAvCG;;AAAA,UAwClBE,kBAxCkB,GAwCG,UAACH,CAAD;AAAA,UAAMI,WAAN,SAAMA,WAAN;AAAA,aAAwB,MAAKF,QAAL,CAAc;AAAEE,QAAAA,WAAW,EAAXA;AAAF,OAAd,CAAxB;AAAA,KAxCH;;AAAA,UAgNlBC,aAhNkB,GAgNF,UAACC,MAAD,EAAY;AACxB,UAAGA,MAAM,CAACC,MAAV,EAAiB;AACb,YAAIC,IAAI,GAAG,IAAX;;AACA,YAAGF,MAAM,CAAC,CAAD,CAAN,CAAU,MAAV,CAAH,EAAsB;AAClBE,UAAAA,IAAI,GAAGd,KAAK,CAACe,KAAN,CAAYC,aAAZ,CAA0BC,MAA1B,CAAiCL,MAAjC,CAAP;AACH,SAFD,MAEO;AACHE,UAAAA,IAAI,GAAGd,KAAK,CAACe,KAAN,CAAYC,aAAnB;AACH;;AAGD,YAAGJ,MAAM,CAACM,KAAV,EAAiB;AACb,gBAAKhB,KAAL,CAAWiB,eAAX,CAA2B,OAA3B,EAAmCP,MAAM,CAACM,KAA1C;AACH,SAFD,MAEO;AACHlB,UAAAA,KAAK,CAACQ,QAAN,CAAe;AAACQ,YAAAA,aAAa,EAACF;AAAf,WAAf;;AACAd,UAAAA,KAAK,CAACoB,eAAN,CAAsBN,IAAtB;AACH;;AACDd,QAAAA,KAAK,CAACE,KAAN,CAAYmB,oBAAZ,CAAiC,KAAjC;AACH,OAhBD,MAgBO,CACH;AACH;AAEJ,KArOiB;;AAAA,UAuOlBC,eAvOkB,GAuOA,UAACC,MAAD,EAAY;AAC1B;AACA;AACA;AACA,UAAIC,KAAK,GAAGC,YAAY,CAACC,YAAb,GAA4BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,YAAxB,CAA5B,GAAoE,IAAhF;;AAEA,YAAKlB,QAAL,CAAc;AAACqB,QAAAA,OAAO,EAAC;AAAT,OAAd;;AACA,UAAGN,MAAM,KAAK,KAAd,EAAoB;AAChBpB,QAAAA,GAAG,GAAG,CAACoB,MAAD,CAAN;AACH;;AACDpB,MAAAA,GAAG,CAAC2B,GAAJ,CAAQ,UAACC,IAAD,EAAOC,CAAP,EAAa;AACjBC,QAAAA,UAAU,CAAC;AAAA,iBAAMrC,QAAQ,CAACsC,YAAT,CAAsB,cAAtB,EAAqC;AAACC,YAAAA,KAAK,EAACX,KAAK,GAAGA,KAAK,CAACY,SAAT,GAAqB,MAAjC;AAAyCb,YAAAA,MAAM,EAACQ;AAAhD,WAArC,EAA4F/B,KAAK,CAACW,aAAlG,CAAN;AAAA,SAAD,EAAyH,MAAMqB,CAA/H,CAAV;AACH,OAFD;AAKH,KAtPiB;;AAAA,UAuPlBK,UAvPkB,GAuPL,UAACd,MAAD,EAAY;AACrB,UAAIC,KAAK,GAAGC,YAAY,CAACC,YAAb,GAA4BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,YAAxB,CAA5B,GAAoE,IAAhF;AACA,UAAIY,WAAW,GAAG,EAAlB;AACAtC,MAAAA,KAAK,CAACuC,SAAN,GAAkB,CAAlB;;AACA,YAAK/B,QAAL,CAAc;AAACqB,QAAAA,OAAO,EAAC;AAAT,OAAd;;AACA,UAAGN,MAAM,KAAK,KAAd,EAAoB;AAChBpB,QAAAA,GAAG,GAAG,CAACoB,MAAD,CAAN;AACH,OAFD,MAEO;AACHpB,QAAAA,GAAG,GAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,CAAN;AACH;;AAEGA,MAAAA,GAAG,CAAC2B,GAAJ,CAAQ,UAACC,IAAD,EAAU;AACd;AACAnC,QAAAA,QAAQ,CAACsC,YAAT,CAAsB,aAAtB,EAAoC;AAACC,UAAAA,KAAK,EAACX,KAAK,GAAGA,KAAK,CAACY,SAAT,GAAqB,MAAjC;AAAyCb,UAAAA,MAAM,EAACQ;AAAhD,SAApC,EAA2F/B,KAAK,CAACwC,cAAjG;AACH,OAHD;AAKP,KAvQiB;;AAAA,UA4alBC,eA5akB,GA4aA,UAACnC,CAAD,SAAgB;AAAA,UAAXC,KAAW,SAAXA,KAAW;;AAE9BP,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAAEkC,QAAAA,gBAAgB,EAAEnC;AAApB,OAAf,EAF8B,CAI9B;AACA;AACA;;;AACA,UAAGA,KAAK,KAAK,SAAb,EAAuB;AACnBoC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCrC,KAAnC;;AACAP,QAAAA,KAAK,CAAC6C,gBAAN,CAAuBtC,KAAvB;;AACAP,QAAAA,KAAK,CAAC8C,eAAN,CAAsBvC,KAAtB,EAHmB,CAInB;AACA;AACA;AACA;AACA;;AACH,OATD,MASO;AACHP,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAACuC,UAAAA,YAAY,EAAC/C,KAAK,CAACe,KAAN,CAAYiC;AAA1B,SAAf;AACH;;AACDhD,MAAAA,KAAK,CAACiD,QAAN,CAAe,KAAf;;AACAjD,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC0C,QAAAA,WAAW,EAAC,KAAb;AAAoBC,QAAAA,SAAS,EAAC;AAA9B,OAAf;;AAEAnD,MAAAA,KAAK,CAACoD,WAAN;AAGH,KArciB;;AAAA,UA6clBC,eA7ckB,GA6cA,UAAC/C,CAAD,SAAgB;AAAA,UAAXC,KAAW,SAAXA,KAAW;AAC9BoC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BrC,KAA/B;;AAEAP,MAAAA,KAAK,CAACiD,QAAN,CAAe,KAAf;;AACAjD,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC0C,QAAAA,WAAW,EAAC;AAAb,OAAf;;AAEA,UAAG3C,KAAK,KAAK,SAAb,EAAuB;AACnBP,QAAAA,KAAK,CAACiD,QAAN,CAAe,KAAf;;AACAjD,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC0C,UAAAA,WAAW,EAAC;AAAb,SAAf;AACH,OAHD,MAGO;AACH;AACA,YAAII,OAAO,GAAGzD,WAAW,CAAC0D,OAAZ,CAAoBvD,KAAK,CAACe,KAAN,CAAYyC,QAAhC,EAA0C,kBAA1C,CAAd;AACA,YAAIC,QAAQ,GAAG,EAAf;AACA,YAAIC,UAAU,GAAG,EAAjB;AAEAJ,QAAAA,OAAO,CAAC/C,KAAD,CAAP,CAAeuB,GAAf,CAAmB,UAAC6B,GAAD,EAAS;AACxB;AACA,cAAG3D,KAAK,CAACe,KAAN,CAAY2B,gBAAZ,KAAiC,SAApC,EAA+C;AAE3C,gBAAG1C,KAAK,CAACe,KAAN,CAAY6C,kBAAZ,KAAmC,SAAtC,EAAiD;AAE7C;AACA,kBAAG5D,KAAK,CAACe,KAAN,CAAY2B,gBAAZ,KAAiCiB,GAAG,CAACE,QAArC,IAAiD7D,KAAK,CAACe,KAAN,CAAY6C,kBAAZ,KAAmCD,GAAG,CAACG,QAA3F,EAAqG;AACjG;AAEAJ,gBAAAA,UAAU,CAACK,IAAX,CAAgBJ,GAAhB;AACH;AAEJ,aATD,MASO;AACH;AACA,kBAAG3D,KAAK,CAACe,KAAN,CAAY2B,gBAAZ,KAAiCiB,GAAG,CAACE,QAAxC,EAAkD;AAC9CH,gBAAAA,UAAU,CAACK,IAAX,CAAgBJ,GAAhB;AACH;AACJ;AACJ;AACJ,SApBD;;AAsBAD,QAAAA,UAAU,CAAC5B,GAAX,CAAe,UAACkC,GAAD,EAAS;AACpBhE,UAAAA,KAAK,CAACe,KAAN,CAAYkD,aAAZ,CAA0BnC,GAA1B,CAA8B,UAACoC,QAAD,EAAc;AACxC,gBAAGA,QAAQ,CAAC,cAAD,CAAR,KAA6BF,GAAG,CAAC,UAAD,CAAnC,EAAiD;AAC7CP,cAAAA,QAAQ,CAACM,IAAT,CAAcC,GAAd;AACH;AACJ,WAJD;AAKH,SAND;;AAQA,YAAGP,QAAQ,CAAC5C,MAAT,GAAkB,CAArB,EAAwB;AACpBb,UAAAA,KAAK,CAACQ,QAAN,CAAe;AAACuC,YAAAA,YAAY,EAAC/C,KAAK,CAACmE,mBAAN,CAA0BV,QAA1B;AAAd,WAAf;AACH,SAFD,MAEO;AACH,cAAIW,GAAG,GAAG,oBAAV;AACA3E,UAAAA,KAAK,CAACyB,KAAN,CAAYkD,GAAZ,EAAiB;AACbC,YAAAA,QAAQ,EAAE,WADG;AAEbC,YAAAA,MAAM,EAAE,OAFK;AAGbC,YAAAA,OAAO,EAAE;AAHI,WAAjB;;AAKAvE,UAAAA,KAAK,CAACE,KAAN,CAAYsE,gBAAZ,CAA6B;AAACC,YAAAA,IAAI,EAAClE;AAAN,WAA7B;AACH;AACJ;;AACDP,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAAEkE,QAAAA,gBAAgB,EAAEnE,KAApB;AAA2B4C,QAAAA,SAAS,EAAC;AAArC,OAAf;;AACAnD,MAAAA,KAAK,CAACoD,WAAN;AACH,KAxgBiB;;AAAA,UAygBlBuB,iBAzgBkB,GAygBE,UAACrE,CAAD,SAAgB;AAAA,UAAXC,KAAW,SAAXA,KAAW;;AAChC,UAAGA,KAAK,KAAK,SAAb,EAAuB;AACnBoC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BrC,KAA/B;;AACAP,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC0C,UAAAA,WAAW,EAAC;AAAb,SAAf;AACH,OAHD,MAGO;AACHlD,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC0C,UAAAA,WAAW,EAAC;AAAb,SAAf,EADG,CAEH;;;AACA,YAAII,OAAO,GAAGzD,WAAW,CAAC0D,OAAZ,CAAoBvD,KAAK,CAACe,KAAN,CAAYkD,aAAhC,EAA+C,cAA/C,CAAd;AACAtB,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCU,OAAjC,EAA0CA,OAAO,CAAC/C,KAAD,CAAjD;;AACA,YAAG+C,OAAO,CAAC/C,KAAD,CAAV,EAAmB;AACfP,UAAAA,KAAK,CAACQ,QAAN,CAAe;AAACuC,YAAAA,YAAY,EAAC/C,KAAK,CAAC4E,oBAAN,CAA2BtB,OAAO,CAAC/C,KAAD,CAAlC;AAAd,WAAf;AACH,SAFD,MAEO;AACH,cAAI6D,GAAG,GAAG,oBAAV;AACA3E,UAAAA,KAAK,CAACyB,KAAN,CAAYkD,GAAZ,EAAiB;AACbC,YAAAA,QAAQ,EAAE,WADG;AAEbC,YAAAA,MAAM,EAAE,OAFK;AAGbC,YAAAA,OAAO,EAAE;AAHI,WAAjB;AAKH;AACJ;;AACDvE,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAAEoD,QAAAA,kBAAkB,EAAErD,KAAtB;AAA6B4C,QAAAA,SAAS,EAAC;AAAvC,OAAf;;AACAnD,MAAAA,KAAK,CAACE,KAAN,CAAYsE,gBAAZ,CAA6B;AAACC,QAAAA,IAAI,EAAClE;AAAN,OAA7B;;AACAP,MAAAA,KAAK,CAACoD,WAAN;AACH,KAhiBiB;;AAEdpD,IAAAA,KAAK,gCAAL;AACAA,IAAAA,KAAK,CAACe,KAAN,GAAc;AACVgC,MAAAA,YAAY,EAAC,IADH;AAEVC,MAAAA,gBAAgB,EAAC,IAFP;AAGV6B,MAAAA,GAAG,EAAC,EAHM;AAIVC,MAAAA,kBAAkB,EAAG,CAAC;AAAEC,QAAAA,GAAG,EAAE,IAAP;AAAaxE,QAAAA,KAAK,EAAE,SAApB;AAA+ByE,QAAAA,IAAI,EAAE;AAArC,OAAD,CAJX;AAKVC,MAAAA,iBAAiB,EAAG,CAAC;AAAEF,QAAAA,GAAG,EAAE,IAAP;AAAaxE,QAAAA,KAAK,EAAE,SAApB;AAA+ByE,QAAAA,IAAI,EAAE;AAArC,OAAD,CALV;AAMVE,MAAAA,kBAAkB,EAAG,CAAC;AAAEH,QAAAA,GAAG,EAAE,IAAP;AAAaxE,QAAAA,KAAK,EAAE,SAApB;AAA+ByE,QAAAA,IAAI,EAAE;AAArC,OAAD,CANX;AAOV9B,MAAAA,WAAW,EAAE,KAPH;AAQViC,MAAAA,QAAQ,EAAC,IARC;AASVC,MAAAA,QAAQ,EAAC,IATC;AAUVC,MAAAA,OAAO,EAAC,IAVE;AAWVC,MAAAA,SAAS,EAAC,IAXA;AAYVC,MAAAA,YAAY,EAAC,WAZH;AAaV7C,MAAAA,gBAAgB,EAAC,IAbP;AAcVgC,MAAAA,gBAAgB,EAAC,IAdP;AAeVd,MAAAA,kBAAkB,EAAC,IAfT;AAgBV4B,MAAAA,SAAS,EAAC,IAhBA;AAiBVhC,MAAAA,QAAQ,EAAC,EAjBC;AAkBViC,MAAAA,eAAe,EAAC,kBAlBN;AAmBVC,MAAAA,gBAAgB,EAAC,iBAnBP;AAoBVC,MAAAA,IAAI,EAAC,KApBK;AAqBVC,MAAAA,UAAU,EAAE,KArBF;AAsBVC,MAAAA,QAAQ,EAAE,IAtBA;AAuBVC,MAAAA,MAAM,EAAE,IAvBE;AAwBVpF,MAAAA,WAAW,EAAE,IAxBH;AAyBVH,MAAAA,KAAK,EAAE,EAzBG;AA0BV4C,MAAAA,SAAS,EAAC,IA1BA;AA2BVtB,MAAAA,OAAO,EAAC,EA3BE;AA4BVb,MAAAA,aAAa,EAAC;AA5BJ,KAAd;AA+BA,UAAKuD,OAAL,GAAe,IAAf;AACA,UAAKwB,QAAL,GAAgB,IAAhB;AACA,UAAKC,WAAL,GAAmB,IAAnB;AApCc;AAsCjB;;;;gCAGW;AAGR;AACA,WAAK9F,KAAL,CAAW+F,gBAAX,CAA4B,IAA5B;AAEH;AACD;;;;;;mCAGeC,I,EAAM;AACjB;AACA,UAAIC,KAAK,GAAG,IAAZ;AACAD,MAAAA,IAAI,CAACpE,GAAL,CAAS,UAACiD,GAAD,EAAM/C,CAAN,EAAY;AACjB,YAAG+C,GAAG,CAACqB,IAAJ,CAASC,OAAT,CAAiBrG,KAAK,CAACe,KAAN,CAAYwE,YAA7B,IAA6C,CAAC,CAAjD,EAAoDY,KAAK,GAAGD,IAAI,CAAClE,CAAD,CAAZ;AACvD,OAFD;;AAGA,UAAGmE,KAAH,EAAU;AACNnG,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC2E,UAAAA,QAAQ,EAACgB,KAAK,CAACG;AAAhB,SAAf;;AACAtG,QAAAA,KAAK,CAACE,KAAN,CAAY+F,gBAAZ,CAA6B;AAACd,UAAAA,QAAQ,EAACgB,KAAK,CAACG;AAAhB,SAA7B;AACH;AACJ;;;mCACcJ,I,EAAM;AACjB;AACA,UAAIC,KAAK,GAAG,IAAZ;AACAD,MAAAA,IAAI,CAACpE,GAAL,CAAS,UAACiD,GAAD,EAAM/C,CAAN,EAAY;AACjB,YAAG+C,GAAG,CAACqB,IAAJ,CAASC,OAAT,CAAiBrG,KAAK,CAACe,KAAN,CAAYwE,YAA7B,IAA6C,CAAC,CAAjD,EAAoDY,KAAK,GAAGD,IAAI,CAAClE,CAAD,CAAZ;AACvD,OAFD;;AAGA,UAAGmE,KAAH,EAAS;AACLnG,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC4E,UAAAA,QAAQ,EAACe,KAAK,CAACG;AAAhB,SAAf;;AACAtG,QAAAA,KAAK,CAACE,KAAN,CAAY+F,gBAAZ,CAA6B;AAACb,UAAAA,QAAQ,EAACe,KAAK,CAACG;AAAhB,SAA7B;AACH;AACJ;;;mCACcC,M,EAAQC,O,EAAS;AAC5B,UAAIC,OAAO,GAAG,IAAd;AACAF,MAAAA,MAAM,CAACzE,GAAP,CAAW,UAACiD,GAAD,EAAM/C,CAAN,EAAY;AACnB,YAAG+C,GAAG,CAACqB,IAAJ,CAASC,OAAT,CAAiBrG,KAAK,CAACe,KAAN,CAAYwE,YAA7B,IAA6C,CAAC,CAAjD,EAAoDkB,OAAO,GAAGF,MAAM,CAACvE,CAAD,CAAhB;AACvD,OAFD;AAGA,UAAI0E,QAAQ,GAAG,IAAf;AACAF,MAAAA,OAAO,CAAC1E,GAAR,CAAY,UAACiD,GAAD,EAAM/C,CAAN,EAAY;AACpB,YAAG+C,GAAG,CAACqB,IAAJ,CAASC,OAAT,CAAiBrG,KAAK,CAACe,KAAN,CAAYwE,YAA7B,IAA6C,CAAC,CAAjD,EAAoDmB,QAAQ,GAAGF,OAAO,CAACxE,CAAD,CAAlB;AACvD,OAFD;;AAIAhC,MAAAA,KAAK,CAACE,KAAN,CAAY+F,gBAAZ,CAA6B;AAACZ,QAAAA,OAAO,EAAC;AAACsB,UAAAA,IAAI,EAACF,OAAN;AAAeG,UAAAA,IAAI,EAACF;AAApB;AAAT,OAA7B;AAEH;;;oCACeR,I,EAAM;AAClB,UAAIO,OAAO,GAAG,IAAd;AACAP,MAAAA,IAAI,CAACpE,GAAL,CAAS,UAACiD,GAAD,EAAM/C,CAAN,EAAY;AACjB,YAAG+C,GAAG,CAACqB,IAAJ,CAASC,OAAT,CAAiBrG,KAAK,CAACe,KAAN,CAAYwE,YAA7B,IAA6C,CAAC,CAAjD,EAAoDkB,OAAO,GAAGP,IAAI,CAAClE,CAAD,CAAd;AACvD,OAFD;AAIA,UAAGyE,OAAH,EAAYzG,KAAK,CAACE,KAAN,CAAY+F,gBAAZ,CAA6B;AAACY,QAAAA,eAAe,EAACJ,OAAO,CAACH;AAAzB,OAA7B;AAEf;;;oCACe1F,M,EAAQ;AAEpB,UAAIkG,SAAS,GAAG9G,KAAK,CAAC4E,oBAAN,CAA2BhE,MAA3B,CAAhB;;AACAZ,MAAAA,KAAK,CAACQ,QAAN,CAAe;AACXuC,QAAAA,YAAY,EAAE+D,SADH;AACc9D,QAAAA,gBAAgB,EAAE8D,SADhC;AAC2C7C,QAAAA,aAAa,EAACrD;AADzD,OAAf,EAHoB,CAMpB;;;AACA,UAAImG,OAAO,GAAGnG,MAAM,CAACkB,GAAP,CAAW,UAACC,IAAD;AAAA,eACrB;AAACiF,UAAAA,QAAQ,EAACjF,IAAI,CAAC8B,QAAf;AAAyBK,UAAAA,QAAQ,EAACnC,IAAI,CAACkF;AAAvC,SADqB;AAAA,OAAX,CAAd;AAGAtE,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBmE,OAAxB;;AACA/G,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAACuG,QAAAA,OAAO,EAACA;AAAT,OAAf;;AACA,UAAIG,cAAc,GAAGrH,WAAW,CAAC0D,OAAZ,CAAoBwD,OAApB,EAA6B,UAA7B,CAArB;AACA,UAAII,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYH,cAAZ,CAAf;AACAvE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CuE,QAA5C;AAEA,UAAIG,UAAU,GAAG,CAAC;AAAEvC,QAAAA,GAAG,EAAE,IAAP;AAAaxE,QAAAA,KAAK,EAAE,SAApB;AAA+ByE,QAAAA,IAAI,EAAE;AAArC,OAAD,CAAjB;AACA,UAAIuC,UAAU,GAAGJ,QAAQ,CAACrF,GAAT,CAAa,UAAC0F,GAAD,EAAMxF,CAAN;AAAA,eAAa;AAAE+C,UAAAA,GAAG,EAAE/C,CAAP;AAAUzB,UAAAA,KAAK,EAAEiH,GAAjB;AAAsBxC,UAAAA,IAAI,EAAEwC;AAA5B,SAAb;AAAA,OAAb,CAAjB;;AACAxH,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAACsE,QAAAA,kBAAkB,YAAKwC,UAAL,qBAAoBC,UAApB,EAAnB;AAAoD/B,QAAAA,SAAS,EAAC0B;AAA9D,OAAf,EAlBoB,CAmBpB;;;AACAlH,MAAAA,KAAK,CAACoD,WAAN;AAEH;;;yCACoBxC,M,EAAQ;AACzB,eAAS6G,QAAT,CAAkBlH,KAAlB,EAAyB;AACrB,eAAOmH,IAAI,CAACC,KAAL,CAAWpH,KAAX,CAAP;AACH;;AACD,UAAIqH,SAAS,GAAGhH,MAAM,CAACkB,GAAP,CAAW,UAACC,IAAD;AAAA,eACvB;AAAC8F,UAAAA,GAAG,EAACJ,QAAQ,CAAC1F,IAAI,CAAC+F,gBAAL,CAAsBC,QAAvB,CAAb;AAA+CC,UAAAA,GAAG,EAACP,QAAQ,CAAC1F,IAAI,CAAC+F,gBAAL,CAAsBG,SAAvB,CAA3D;AAA8F/D,UAAAA,QAAQ,EAACnC,IAAI,CAACkF;AAA5G,SADuB;AAAA,OAAX,CAAhB;AAIA,UAAIlE,YAAY,GAAG,EAAnB;AAEA,UAAImF,WAAW,GAAGrI,WAAW,CAACsI,cAAZ,CAA2BP,SAA3B,EAAsC,CAAC,KAAD,EAAO,KAAP,CAAtC,CAAlB;AACAjF,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCsF,WAArC;AACA,UAAIE,KAAK,GAAG,EAAZ;AACAhB,MAAAA,MAAM,CAACC,IAAP,CAAYa,WAAZ,EAAyBpG,GAAzB,CAA6B,UAACiD,GAAD,EAAM/C,CAAN,EAAY;AACrCoG,QAAAA,KAAK,CAACpG,CAAD,CAAL,GAAW,EAAX;AACAkG,QAAAA,WAAW,CAACnD,GAAD,CAAX,CAAiBjD,GAAjB,CAAqB,UAACoE,IAAD,EAAOmC,CAAP,EAAa;AAC9BD,UAAAA,KAAK,CAACpG,CAAD,CAAL,CAAS+B,IAAT,CAAcmC,IAAI,CAAC,UAAD,CAAlB;AACA,cAAGmC,CAAC,KAAKH,WAAW,CAACnD,GAAD,CAAX,CAAiBlE,MAAjB,GAAyB,CAAlC,EAAqCkC,YAAY,CAACgB,IAAb,CAAkB;AAAE,oBAAQqE,KAAK,CAACpG,CAAD,CAAf;AAAuB,2BAAe,CAACkE,IAAI,CAAC,KAAD,CAAL,EAAcA,IAAI,CAAC,KAAD,CAAlB,CAAtC;AAAkE,0BAAc,QAAhF;AAA0F,oBAAOgC,WAAW,CAACnD,GAAD,CAAX,CAAiBlE;AAAlH,WAAlB;AACxC,SAHD;AAKH,OAPD;AAQA8B,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDG,YAArD;AACA,aAAOA,YAAP;AACH;;;wCAEmBnC,M,EAAQ;AACxB,eAAS6G,QAAT,CAAkBlH,KAAlB,EAAyB;AACrB,eAAOmH,IAAI,CAACC,KAAL,CAAWpH,KAAX,CAAP;AACH;;AACD,UAAIqH,SAAS,GAAG,EAAhB;AAEAhH,MAAAA,MAAM,CAACkB,GAAP,CAAW,UAACC,IAAD,EAAU;AACjB/B,QAAAA,KAAK,CAACe,KAAN,CAAYkD,aAAZ,CAA0BnC,GAA1B,CAA8B,UAACoC,QAAD,EAAc;AACxC,cAAGnC,IAAI,CAAC+B,QAAL,KAAkBI,QAAQ,CAAC+C,YAA9B,EAA4CW,SAAS,CAAC7D,IAAV,CAAe;AAAC,mBAAM0D,QAAQ,CAACvD,QAAQ,CAAC4D,gBAAT,CAA0BC,QAA3B,CAAf;AAAqD,mBAAMN,QAAQ,CAACvD,QAAQ,CAAC4D,gBAAT,CAA0BG,SAA3B,CAAnE;AAA0G,wBAAW/D,QAAQ,CAAC+C,YAA9H;AAA4I,2BAAclF,IAAI,CAACuG;AAA/J,WAAf;AAC/C,SAFD;AAGH,OAJD;AAMA,UAAIvF,YAAY,GAAG,EAAnB;AAEA,UAAImF,WAAW,GAAGrI,WAAW,CAACsI,cAAZ,CAA2BP,SAA3B,EAAsC,CAAC,KAAD,EAAO,KAAP,CAAtC,CAAlB;AACAjF,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCsF,WAArC;AACA,UAAIE,KAAK,GAAG,EAAZ;AACAhB,MAAAA,MAAM,CAACC,IAAP,CAAYa,WAAZ,EAAyBpG,GAAzB,CAA6B,UAACiD,GAAD,EAAM/C,CAAN,EAAY;AACrCoG,QAAAA,KAAK,CAACpG,CAAD,CAAL,GAAW,EAAX;AACAkG,QAAAA,WAAW,CAACnD,GAAD,CAAX,CAAiBjD,GAAjB,CAAqB,UAACoE,IAAD,EAAOmC,CAAP,EAAa;AAC9BD,UAAAA,KAAK,CAACpG,CAAD,CAAL,CAAS+B,IAAT,CAAcmC,IAAI,CAAC,aAAD,CAAlB;AACA,cAAGmC,CAAC,KAAKH,WAAW,CAACnD,GAAD,CAAX,CAAiBlE,MAAjB,GAAyB,CAAlC,EAAqCkC,YAAY,CAACgB,IAAb,CAAkB;AAAE,oBAAQqE,KAAK,CAACpG,CAAD,CAAf;AAAuB,2BAAe,CAACkE,IAAI,CAAC,KAAD,CAAL,EAAcA,IAAI,CAAC,KAAD,CAAlB,CAAtC;AAAkE,0BAAc,QAAhF;AAA0F,oBAAOgC,WAAW,CAACnD,GAAD,CAAX,CAAiBlE;AAAlH,WAAlB;AACxC,SAHD;AAKH,OAPD;AAQA,aAAOkC,YAAP;AACH;;;oCAEenC,M,EAAQ;AAEpB,UAAImC,YAAY,GAAG,EAAnB;AACAnC,MAAAA,MAAM,CAACkB,GAAP,CAAW,UAACoE,IAAD,EAAOmC,CAAP,EAAa;AACpB,YAAGnC,IAAH,EAASnD,YAAY,CAACgB,IAAb,CAAkB;AAAE,kBAAQ,CAACmC,IAAI,CAAC,CAAD,CAAJ,CAAQ,cAAR,CAAD,CAAV;AAAwC,yBAAe,CAACA,IAAI,CAAC,CAAD,CAAJ,CAAQ,kBAAR,EAA4B,WAA5B,CAAD,EAA2CA,IAAI,CAAC,CAAD,CAAJ,CAAQ,kBAAR,EAA4B,UAA5B,CAA3C,CAAvD;AAA4I,wBAAc,QAA1J;AAAoK,kBAAOA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR;AAA3K,SAAlB;AACZ,OAFD;AAIAvD,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDG,YAArD;AACA,aAAOA,YAAP;AACH;;;mCAEcnC,M,EAAQ;AAEnB,UAAGA,MAAM,CAACC,MAAV,EAAiB;AACb,YAAIC,IAAI,GAAG,IAAX;;AACA,YAAGF,MAAM,CAAC,CAAD,CAAN,CAAU,MAAV,CAAH,EAAsB;AAClBE,UAAAA,IAAI,GAAGd,KAAK,CAACe,KAAN,CAAYyC,QAAZ,CAAqBvC,MAArB,CAA4BL,MAA5B,CAAP;AACH,SAFD,MAEO;AACHE,UAAAA,IAAI,GAAGd,KAAK,CAACe,KAAN,CAAYyC,QAAnB;AACH;;AAED,YAAG5C,MAAM,CAACM,KAAV,EAAiB;AACb,eAAKhB,KAAL,CAAWiB,eAAX,CAA2B,OAA3B,EAAmCP,MAAM,CAACM,KAA1C;AACH,SAFD,MAEO;AACHlB,UAAAA,KAAK,CAACQ,QAAN,CAAe;AAACgD,YAAAA,QAAQ,EAAC1C;AAAV,WAAf;AAEH;;AACDd,QAAAA,KAAK,CAACE,KAAN,CAAYmB,oBAAZ,CAAiC,KAAjC;AACH,OAfD,MAeO,CACH;AACH;AAEJ;;;qCACgBT,M,EAAQ;AACrB;AACAZ,MAAAA,KAAK,CAACE,KAAN,CAAY+F,gBAAZ,CAA6B;AAACsC,QAAAA,UAAU,EAAC3H;AAAZ,OAA7B;AACH;;;0CA0DqB4H,S,EAAWC,S,EAAW;AACxC;AACA;AACA;AACA,aAAO,IAAP;AACH;;;wCACmB;AAAA;;AAChB,eAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7B,YAAIC,SAAS,GAAG,IAAIC,IAAJ,CAASF,IAAT,CAAhB;AACA,YAAIG,SAAS,GAAGF,SAAS,CAACG,eAAV,EAAhB;AAEA,eAAOD,SAAP;AAEH;;AACD,UAAIE,KAAK,GAAG,IAAZ;;AACA,UAAIC,QAAQ,GAAG,SAAXA,QAAW,CAASC,IAAT,EAAc;AACzB;AAGA,YAAIC,GAAG,GAAG,IAAIN,IAAJ,CAAS,qBAAT,EAAgCO,OAAhC,EAAV;AACA,YAAIC,IAAI,GAAG,IAAIR,IAAJ,GAAWO,OAAX,EAAX;AACA,YAAIE,GAAG,GAAG,CAACD,IAAI,GAAGF,GAAR,KAAc,KAAG,EAAH,GAAM,EAApB,CAAV;AAEAD,QAAAA,IAAI,CAAC3E,OAAL,GAAetC,UAAU,CAAC,YAAU;AAACgH,UAAAA,QAAQ,CAACC,IAAD,CAAR;AAAe,SAA3B,EAA8BF,KAA9B,CAAzB;AACH,OATD;;AAYA,UAAG,KAAK9I,KAAL,CAAWqJ,OAAX,KAAuB,MAA1B,EAAkC;AAC9B,aAAK/I,QAAL,CAAc;AAAC0C,UAAAA,WAAW,EAAE;AAAd,SAAd;AACH,OAFD,MAEO;AACH,aAAK1C,QAAL,CAAc;AAAC0C,UAAAA,WAAW,EAAE;AAAd,SAAd;AACH,OAzBe,CA4BhB;;AACA;;;;;;AAIA,UAAI1B,KAAK,GAAGC,YAAY,CAACC,YAAb,GAA4BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,YAAxB,CAA5B,GAAoE,IAAhF;;AACA,UAAGF,KAAK,IAAIA,KAAK,CAACY,SAAlB,EAA6B;AACzB,aAAKd,eAAL,CAAqB,KAAKpB,KAAL,CAAWsJ,YAAhC;AACA,aAAKpH,SAAL,GAAiBZ,KAAK,GAAGA,KAAK,CAACY,SAAT,GAAqB,MAA3C;AACA,aAAKC,UAAL,CAAgB,KAAhB;AACH;AAGD;;;;;;;AAMArC,MAAAA,KAAK,CAACgG,WAAN,GAAoB/D,UAAU,CAAC,YAAM;AACjC,YAAG,MAAI,CAAC/B,KAAL,CAAWqJ,OAAX,KAAuB,MAA1B,EAAkC;AAC9BvJ,UAAAA,KAAK,CAACQ,QAAN,CAAe;AAACkC,YAAAA,gBAAgB,EAAC;AAAlB,WAAf,EAD8B,CAE9B;AACA;;AACH;AAGJ,OAR6B,EAQ3B,IAR2B,CAA9B;AAUH;;;2CAEsB;AACnB+G,MAAAA,YAAY,CAAC,KAAKlF,OAAN,CAAZ;AACAkF,MAAAA,YAAY,CAAC,KAAKzD,WAAN,CAAZ;AACA0D,MAAAA,aAAa,CAAC,KAAK3D,QAAN,CAAb;AAEH;;;8CAGyByC,S,EAAW;AACjC7F,MAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ,EAAgE4F,SAAhE;;AACA,UAAGA,SAAS,CAACmB,IAAb,EAAmB;AACfhH,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC4F,SAAS,CAACmB,IAAV,CAAeC,UAAlD;;AACA,YAAGpB,SAAS,CAACmB,IAAV,CAAeC,UAAlB,EAA8B;AAC1B,eAAKpJ,QAAL,CAAc;AAAC0C,YAAAA,WAAW,EAAC;AAAb,WAAd;AACA;AACH,SAHD,MAGO;AACH,eAAK1C,QAAL,CAAc;AAAC0C,YAAAA,WAAW,EAAC;AAAb,WAAd;AACH;;AACD,YAAI2G,QAAQ,GAAGC,MAAM,CAACtB,SAAS,CAACmB,IAAV,CAAelF,IAAhB,CAArB;;AACA,YAAGoF,QAAQ,KAAK,WAAhB,EAA4B;AACxB,eAAKE,MAAL,CAAYvB,SAAS,CAACmB,IAAV,CAAeC,UAA3B,EAAuCpB,SAAS,CAACmB,IAAV,CAAelF,IAAtD;AACH,SAFD,MAEO;AACH9B,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B4F,SAAS,CAACmB,IAAV,CAAelF,IAA1C;AACH,SAbc,CAcf;;;AACA,YAAIkF,IAAI,GAAGnB,SAAS,CAACmB,IAAV,CAAelF,IAA1B,CAfe,CAgBf;AACA;AACA;;AAEA,aAAKjE,QAAL,CAAc;AAAC+E,UAAAA,YAAY,EAACoE;AAAd,SAAd;AAEH;AAEJ,K,CAED;;;;6BACSpJ,K,EAAO;AACZ;AACA,UAAIyJ,QAAQ,GAAG,QAAf;AACA,UAAIC,OAAO,GAAG,MAAd;;AACAjK,MAAAA,KAAK,CAACE,KAAN,CAAYgK,OAAZ,CAAoBnG,IAApB,CAAyB;AACrBoG,QAAAA,QAAQ,EAAEH,QADW;AAErBlE,QAAAA,MAAM,EAAEmE,OAFa;AAGrBlJ,QAAAA,KAAK,EAAE;AAAEmD,UAAAA,QAAQ,EAAElE,KAAK,CAACe,KAAN,CAAY6C;AAAxB;AAHc,OAAzB;;AAKA5D,MAAAA,KAAK,CAACE,KAAN,CAAYgK,OAAZ,CAAoBE,QAApB,CAA6BtE,MAA7B,GAAsCmE,OAAtC;;AACAjK,MAAAA,KAAK,CAACE,KAAN,CAAYmK,gBAAZ,CAA6B;AAACL,QAAAA,QAAQ,EAACA,QAAV;AAAoBC,QAAAA,OAAO,EAAEA,OAA7B;AAAsC/F,QAAAA,QAAQ,EAAClE,KAAK,CAACe,KAAN,CAAY6C;AAA3D,OAA7B;AAEH;;;2BACMgG,U,EAAYjG,G,EAAK;AACpBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCe,GAApC;;AACA3D,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC0C,QAAAA,WAAW,EAAC0G;AAAb,OAAf;;AACA5J,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAACmF,QAAAA,IAAI,EAAC;AAAN,OAAf;;AAEA,UAAI2E,MAAM,GAAG,EAAb;;AACA,UAAG3G,GAAG,KAAK,SAAR,IAAqB,OAAOA,GAAP,KAAe,QAAvC,EAAiD;AAC7CA,QAAAA,GAAG,CAAC7B,GAAJ,CAAQ,UAAC6H,IAAD,EAAU;AACdW,UAAAA,MAAM,CAACvG,IAAP,CAAY4F,IAAI,CAACY,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAZ;AACH,SAFD;AAIA5H,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB0H,MAAtB,EAA8BtK,KAAK,CAACe,KAAN,CAAYkD,aAA1C;AACH,OAND,MAMO;AACHqG,QAAAA,MAAM,CAACvG,IAAP,CAAYJ,GAAZ;AACH,OAdmB,CAiBpB;;;AACA,UAAIL,OAAO,GAAGzD,WAAW,CAAC0D,OAAZ,CAAoBvD,KAAK,CAACe,KAAN,CAAYkD,aAAhC,EAA+C,cAA/C,CAAd;AAEA,UAAIuG,aAAa,GAAG,EAApB;AAEAF,MAAAA,MAAM,CAACxI,GAAP,CAAW,UAAC6H,IAAD,EAAU;AACjBa,QAAAA,aAAa,CAACzG,IAAd,CAAmBT,OAAO,CAACqG,IAAD,CAA1B;AACH,OAFD;AAIAhH,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCU,OAAxC,EAAiDkH,aAAjD,EA1BoB,CA6BpB;;AACAxK,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAACuC,QAAAA,YAAY,EAAC/C,KAAK,CAACyK,eAAN,CAAsBD,aAAtB;AAAd,OAAf;AAGH;;;4BACOZ,U,EAAY;AAChB5J,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC0C,QAAAA,WAAW,EAAC0G,UAAb;AAAyBjE,QAAAA,IAAI,EAAC;AAA9B,OAAf;AACH;;;6BACQiE,U,EAAYc,I,EAAM;AAEvB,UAAGA,IAAI,KAAK,YAAZ,EAA0B;AACtB1K,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAACuC,UAAAA,YAAY,EAAC/C,KAAK,CAACe,KAAN,CAAYiC;AAA1B,SAAf;;AACAhD,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC0C,UAAAA,WAAW,EAAC0G;AAAb,SAAf;AACH,OAHD,MAGO;AACH5J,QAAAA,KAAK,CAAC2K,OAAN,CAAc,KAAd;AACH;;AACD3K,MAAAA,KAAK,CAACoD,WAAN;AACH,K,CACD;;;;qCAsHiB2B,G,EAAK;AAClB,UAAI6F,YAAY,GAAG/K,WAAW,CAAC0D,OAAZ,CAAoBvD,KAAK,CAACe,KAAN,CAAYyC,QAAhC,EAA0C,UAA1C,CAAnB;AACA,UAAI3B,OAAO,GAAI+I,YAAY,CAAC7F,GAAD,CAAb,GAAsBlF,WAAW,CAAC0D,OAAZ,CAAoBqH,YAAY,CAAC7F,GAAD,CAAhC,EAAuC,kBAAvC,CAAtB,GAAiF,EAA/F;AAEA,UAAI8F,OAAO,GAAGzD,MAAM,CAACC,IAAP,CAAYxF,OAAZ,CAAd;AACA,UAAIiJ,WAAW,GAAG,CAAC;AAAE/F,QAAAA,GAAG,EAAE,CAAP;AAAUxE,QAAAA,KAAK,EAAE,SAAjB;AAA4ByE,QAAAA,IAAI,EAAE;AAAlC,OAAD,CAAlB;AACA,UAAI+F,WAAW,GAAGF,OAAO,CAAC/I,GAAR,CAAY,UAAC0F,GAAD,EAAMxF,CAAN;AAAA,eAAa;AAAE+C,UAAAA,GAAG,EAAE/C,CAAC,GAAC,CAAT;AAAYzB,UAAAA,KAAK,EAAEiH,GAAnB;AAAwBxC,UAAAA,IAAI,EAAEwC;AAA9B,SAAb;AAAA,OAAZ,CAAlB;;AACAxH,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAACyE,QAAAA,iBAAiB,YAAK6F,WAAL,qBAAoBC,WAApB;AAAlB,OAAf;;AACA/K,MAAAA,KAAK,CAACoD,WAAN,GARkB,CASlB;;;AACAnB,MAAAA,UAAU,CAAC,YAAI;AACXjC,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAACkE,UAAAA,gBAAgB,EAAC;AAAlB,SAAf;;AACA1E,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAACiF,UAAAA,eAAe,EAAC;AAAjB,SAAf;AACH,OAHS,EAGP,IAHO,CAAV;AAIH;;;oCACeV,G,EAAK;AACjB,UAAImC,cAAc,GAAG,EAArB;;AACAlH,MAAAA,KAAK,CAACe,KAAN,CAAYyE,SAAZ,CAAsBT,GAAtB,EAA2BjD,GAA3B,CAA+B,UAAC2C,IAAD,EAAU;AACrCyC,QAAAA,cAAc,CAACnD,IAAf,CAAoBU,IAApB;AACH,OAFD;;AAGA,UAAImG,YAAY,GAAG/K,WAAW,CAAC0D,OAAZ,CAAoB2D,cAApB,EAAoC,UAApC,CAAnB;AACA,UAAIC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYuD,YAAZ,CAAf;AACAjI,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDuE,QAAjD;AACA,UAAI6D,UAAU,GAAG,CAAC;AAAEjG,QAAAA,GAAG,EAAE,CAAP;AAAUxE,QAAAA,KAAK,EAAE,SAAjB;AAA4ByE,QAAAA,IAAI,EAAE;AAAlC,OAAD,CAAjB;AACA,UAAIiG,UAAU,GAAG9D,QAAQ,CAACrF,GAAT,CAAa,UAAC0F,GAAD,EAAMxF,CAAN;AAAA,eAAa;AAAE+C,UAAAA,GAAG,EAAE/C,CAAC,GAAC,CAAT;AAAYzB,UAAAA,KAAK,EAAEiH,GAAnB;AAAwBxC,UAAAA,IAAI,EAAEwC;AAA9B,SAAb;AAAA,OAAb,CAAjB;;AACAxH,MAAAA,KAAK,CAACQ,QAAN,CAAe;AAAC0E,QAAAA,kBAAkB,YAAK8F,UAAL,qBAAmBC,UAAnB;AAAnB,OAAf;;AACAjL,MAAAA,KAAK,CAACoD,WAAN,GAXiB,CAYjB;;;AACAnB,MAAAA,UAAU,CAAC,YAAI;AACXjC,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAACoD,UAAAA,kBAAkB,EAAC;AAApB,SAAf;;AACA5D,QAAAA,KAAK,CAACQ,QAAN,CAAe;AAACkF,UAAAA,gBAAgB,EAAC;AAAlB,SAAf;AACH,OAHS,EAGP,IAHO,CAAV;AAKH;AACD;;;;;6BAGS;AAAA;;AACL,aACI;AAAK,QAAA,EAAE,EAAC,UAAR;AAAmB,QAAA,SAAS,EAAC,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAE,aAAAwF,KAAG;AAAA,iBAAI,MAAI,CAACC,SAAL,GAAiBD,KAArB;AAAA,SAAtB;AAAgD,QAAA,MAAM,EAAE,KAAKhL,KAAL,CAAWqJ,OAAnE;AAA4E,QAAA,IAAI,EAAE,KAAKxI,KAAL,CAAWgC,YAA7F;AACc,QAAA,QAAQ,EAAE,KAAKqI,QAD7B;AACuC,QAAA,MAAM,EAAE,KAAKrB,MADpD;AAC4D,QAAA,OAAO,EAAE,KAAKY,OAD1E;AACmF,QAAA,QAAQ,EAAE,KAAK1H,QADlG;AAEc,QAAA,IAAI,EAAE,KAAKlC,KAAL,CAAW4E,IAF/B;AAEqC,QAAA,SAAS,EAAE,KAAK5E,KAAL,CAAWoC,SAF3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAOI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAC,iBAAtB;AAAwC,QAAA,KAAK,MAA7C;AAA8C,QAAA,MAAM,MAApD;AAAqD,QAAA,SAAS,MAA9D;AAA+D,QAAA,OAAO,EAAE,KAAKpC,KAAL,CAAW+D,kBAAnF;AAAuG,QAAA,KAAK,EAAE,KAAK/D,KAAL,CAAW2B,gBAAzH;AAA2I,QAAA,QAAQ,EAAE,KAAKD,eAA1J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAII;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAE,KAAK1B,KAAL,CAAW2E,gBAAlC;AAAoD,QAAA,KAAK,MAAzD;AAA0D,QAAA,MAAM,MAAhE;AAAiE,QAAA,SAAS,MAA1E;AAA2E,QAAA,OAAO,EAAE,KAAK3E,KAAL,CAAWmE,kBAA/F;AAAmH,QAAA,KAAK,EAAE,KAAKnE,KAAL,CAAW6C,kBAArI;AAAyJ,QAAA,aAAa,EAAE,KAAK7C,KAAL,CAAW2E,gBAAnL;AAAqM,QAAA,QAAQ,EAAE,KAAKf,iBAApN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,EAOI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAE,KAAK5D,KAAL,CAAW0E,eAAlC;AAAmD,QAAA,KAAK,MAAxD;AAAyD,QAAA,MAAM,MAA/D;AAAgE,QAAA,SAAS,MAAzE;AAA0E,QAAA,OAAO,EAAE,KAAK1E,KAAL,CAAWkE,iBAA9F;AAAiH,QAAA,KAAK,EAAE,KAAKlE,KAAL,CAAW2D,gBAAnI;AAAqJ,QAAA,aAAa,EAAE,KAAK3D,KAAL,CAAW0E,eAA/K;AAAiM,QAAA,QAAQ,EAAE,KAAKpC,eAAhN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAPJ,CAPJ,EAmBI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,iBAAD;AAAmB,QAAA,WAAW,EAAE,KAAKtC,KAAL,CAAWmC,WAA3C;AAAwD,QAAA,QAAQ,EAAE,KAAKkI,QAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAnBJ,CADJ;AAyBH;;;;EAjmBwB/L,KAAK,CAACgM,S;;AAkmBlC;;AAED,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACvK,KAAD,EAAW;AAC/B4B,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsD7B,KAAtD;AACA,SAAO;AACH4I,IAAAA,IAAI,EAAEvC,MAAM,CAACmE,MAAP,CAAc,EAAd,EAAkBxK,KAAK,CAACyK,WAAN,CAAkB7B,IAApC,CADH;AAEHH,IAAAA,YAAY,EAAGzI,KAAK,CAACyI,YAAN,CAAmBjI,MAAnB,GAA0BR,KAAK,CAACyI,YAAN,CAAmBjI,MAA7C,GAAoD;AAFhE,GAAP;AAIH,CAND;;AAOA,IAAMkK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD,EAAc;AACnC,SAAO;AACHlH,IAAAA,gBAAgB,EAAE,0BAAC0B,IAAD,EAAU;AAAEwF,MAAAA,QAAQ,CAAC3L,OAAO,CAAC4L,UAAR,CAAmBzF,IAAnB,CAAD,CAAR;AAAmC,KAD9D;AAEHmE,IAAAA,gBAAgB,EAAE,0BAACnE,IAAD,EAAU;AAAEwF,MAAAA,QAAQ,CAAC3L,OAAO,CAAC6L,UAAR,CAAmB1F,IAAnB,CAAD,CAAR;AAAmC,KAF9D;AAGHD,IAAAA,gBAAgB,EAAE,0BAACC,IAAD,EAAU;AAAEwF,MAAAA,QAAQ,CAAC3L,OAAO,CAAC8L,iBAAR,CAA0B3F,IAA1B,CAAD,CAAR;AAA0C,KAHrE;AAIH/E,IAAAA,eAAe,EAAE,yBAAC2K,IAAD,EAAMC,GAAN,EAAc;AAAEL,MAAAA,QAAQ,CAAC3L,OAAO,CAACiM,SAAR,CAAkBF,IAAlB,EAAuBC,GAAvB,CAAD,CAAR;AAAsC;AAJpE,GAAP;AAMH,CAPD;;AAQA3L,cAAc,CAAC6L,YAAf,GAA8B;AAC1B1C,EAAAA,OAAO,EAAG,CADgB;AAE1B2C,EAAAA,SAAS,EAAE;AAAChG,IAAAA,IAAI,EAAC;AAAN;AAFe,CAA9B;AAIA,eAAe1G,UAAU,CAACM,OAAO,CAACwL,eAAD,EAAkBG,gBAAlB,CAAP,CAA2CrL,cAA3C,CAAD,CAAzB","sourcesContent":["\n//tab 클릭 이벤트 받기 redux 구조\n//tab 클릭 이벤트 발생하면 페이지 넘기, 페이지 넘김 애니메이션 적용\n\nimport React from 'react';\nimport { Grid,Dropdown } from 'semantic-ui-react'\nimport { withRouter } from 'react-router-dom';\nimport Alert from 'react-s-alert';\n//\nimport AnimatedMap from '../libs/simpleMaps/with-react-motion';\nimport DeveloperSideInfo from '../container/developerSideInfo'\n//service\nimport * as services from '../services/service_compute_service';\n//\nimport * as aggregation from '../utils';\n//redux\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport './siteTwo_page_one.css';\n\nlet _self = null;\nconst ContainerOne = (props) => (\n\n    <AnimatedMap parentProps={props}/>\n\n);\nlet rgn = ['US','KR','EU'];\nclass SiteTwoPageOne extends React.Component  {\n    constructor(props){\n        super(props)\n        _self = this;\n        _self.state = {\n            locationData:null,\n            savelocationData:null,\n            url:'',\n            countryOptionsOper : [{ key: 1000, value: 'default', text: 'Select Operator' }],\n            countryOptionsDev : [{ key: 1000, value: 'default', text: 'Select Developer' }],\n            countryOptionsClou : [{ key: 1000, value: 'default', text: 'Select Cloudlet' }],\n            sideVisible: false,\n            cpuUsage:null,\n            memUsage:null,\n            network:null,\n            everyCall:true,\n            selectedCity:'dashboard',\n            dropdownValueOne:null,\n            dropdownValueTwo:null,\n            dropdownValueThree:null,\n            operGroup:null,\n            devGroup:[],\n            selectedDevelop:'Select Develpoer',\n            selectedCloudlet:'Select Cloudlet',\n            zoom:'out',\n            isFetching: false,\n            multiple: true,\n            search: true,\n            searchQuery: null,\n            value: [],\n            condition:null,\n            devData:[],\n            developerData:[]\n\n        }\n        this.timeout = null;\n        this.timeout2 = null;\n        this.timeoutOnce = null;\n\n    }\n    handleChange = (e, { value }) => this.setState({ value })\n    handleSearchChange = (e, { searchQuery }) => this.setState({ searchQuery })\n    clearData() {\n\n\n        //TODO : 각 페이지에 데이터 전달하기 위해 redux 엑션 발생\n        this.props.handleInjectData(null);\n\n    }\n    /*********************\n     * Call Data from Server as REST\n     **********************/\n    receiveCPUData(data) {\n        //console.log('slected city = '+_self.state.selectedCity);\n        let _data = null\n        data.map((key, i) => {\n            if(key.inst.indexOf(_self.state.selectedCity) > -1) _data = data[i]\n        })\n        if(_data) {\n            _self.setState({cpuUsage:_data.score})\n            _self.props.handleInjectData({cpuUsage:_data.score});\n        }\n    }\n    receiveMEMData(data) {\n        //console.log('selected city = '+_self.state.selectedCity);\n        let _data = null\n        data.map((key, i) => {\n            if(key.inst.indexOf(_self.state.selectedCity) > -1) _data = data[i]\n        })\n        if(_data){\n            _self.setState({memUsage:_data.score})\n            _self.props.handleInjectData({memUsage:_data.score});\n        }\n    }\n    receiveNETData(dataIn, dataOut) {\n        let _dataIn = null;\n        dataIn.map((key, i) => {\n            if(key.inst.indexOf(_self.state.selectedCity) > -1) _dataIn = dataIn[i]\n        })\n        let _dataOut = null;\n        dataOut.map((key, i) => {\n            if(key.inst.indexOf(_self.state.selectedCity) > -1) _dataOut = dataOut[i]\n        })\n\n        _self.props.handleInjectData({network:{recv:_dataIn, send:_dataOut}});\n\n    }\n    receiveFileData(data) {\n        let _dataIn = null;\n        data.map((key, i) => {\n            if(key.inst.indexOf(_self.state.selectedCity) > -1) _dataIn = data[i]\n        })\n\n        if(_dataIn) _self.props.handleInjectData({filesystemUsage:_dataIn.score});\n\n    }\n    receiveCloudlet(result) {\n\n        let locatData = _self.setLocationGroupData(result);\n        _self.setState({\n            locationData: locatData, savelocationData: locatData, cloudletsData:result\n        })\n        ////////////\n        let nameObj = result.map((item) => (\n            {operator:item.Operator, cloudlet:item.CloudletName}\n        ))\n        console.log('nameObj ', nameObj)\n        _self.setState({nameObj:nameObj})\n        let operatorsGroup = aggregation.groupBy(nameObj, 'operator');\n        let operKeys = Object.keys(operatorsGroup)\n        console.log('groupbyData operKeys ==>==> ', operKeys)\n\n        let operators1 = [{ key: 1000, value: 'default', text: 'Select Operator' }]\n        let operators2 = operKeys.map((opr, i) => ({ key: i, value: opr, text: opr }))\n        _self.setState({countryOptionsOper:[...operators1, ...operators2], operGroup:operatorsGroup})\n        /////////////\n        _self.forceUpdate();\n\n    }\n    setLocationGroupData(result) {\n        function reduceUp(value) {\n            return Math.round(value)\n        }\n        let locations = result.map((item) => (\n            {LAT:reduceUp(item.CloudletLocation.latitude), LON:reduceUp(item.CloudletLocation.longitude), cloudlet:item.CloudletName}\n        ))\n\n        let locationData = [];\n\n        let groupbyData = aggregation.groupByCompare(locations, ['LAT','LON']);\n        console.log('grouby groupbyData = ', groupbyData)\n        let names = []\n        Object.keys(groupbyData).map((key, i) => {\n            names[i] = [];\n            groupbyData[key].map((data, j) => {\n                names[i].push(data['cloudlet']);\n                if(j === groupbyData[key].length -1) locationData.push({ \"name\": names[i],    \"coordinates\": [data['LON'], data['LAT']], \"population\": 17843000, \"cost\":groupbyData[key].length })\n            })\n\n        })\n        console.log('location data ..... data ....data....', locationData)\n        return locationData;\n    }\n\n    setAppinstGroupData(result) {\n        function reduceUp(value) {\n            return Math.round(value)\n        }\n        let locations = []\n\n        result.map((item) => {\n            _self.state.cloudletsData.map((cloudlet) => {\n                if(item.Cloudlet === cloudlet.CloudletName) locations.push({'LAT':reduceUp(cloudlet.CloudletLocation.latitude), 'LON':reduceUp(cloudlet.CloudletLocation.longitude), 'cloudlet':cloudlet.CloudletName, 'application':item.AppName})\n            })\n        })\n\n        let locationData = [];\n\n        let groupbyData = aggregation.groupByCompare(locations, ['LAT','LON']);\n        console.log('grouby groupbyData = ', groupbyData)\n        let names = []\n        Object.keys(groupbyData).map((key, i) => {\n            names[i] = [];\n            groupbyData[key].map((data, j) => {\n                names[i].push(data['application']);\n                if(j === groupbyData[key].length -1) locationData.push({ \"name\": names[i],    \"coordinates\": [data['LON'], data['LAT']], \"population\": 17843000, \"cost\":groupbyData[key].length })\n            })\n\n        })\n        return locationData;\n    }\n\n    setLocationData(result) {\n\n        let locationData = [];\n        result.map((data, j) => {\n            if(data) locationData.push({ \"name\": [data[0]['CloudletName']],    \"coordinates\": [data[0]['CloudletLocation']['longitude'], data[0]['CloudletLocation']['latitude']], \"population\": 17843000, \"cost\":data[0]['Operator'] })\n        })\n\n        console.log('location data ..... data ....data....', locationData)\n        return locationData;\n    }\n\n    receiveAppInst(result) {\n\n        if(result.length){\n            let join = null;\n            if(result[0]['Edit']) {\n                join = _self.state.devGroup.concat(result);\n            } else {\n                join = _self.state.devGroup;\n            }\n\n            if(result.error) {\n                this.props.handleAlertInfo('error',result.error)\n            } else {\n                _self.setState({devGroup:join})\n\n            }\n            _self.props.handleLoadingSpinner(false);\n        } else {\n            //alert('Loading Fail')\n        }\n\n    }\n    receiveMehodData(result) {\n        //TODO: counts call method from the developers\n        _self.props.handleInjectData({methodCall:result})\n    }\n    receiveResult = (result) => {\n        if(result.length){\n            let join = null;\n            if(result[0]['Edit']) {\n                join = _self.state.developerData.concat(result);\n            } else {\n                join = _self.state.developerData;\n            }\n\n\n            if(result.error) {\n                this.props.handleAlertInfo('error',result.error)\n            } else {\n                _self.setState({developerData:join})\n                _self.receiveCloudlet(join);\n            }\n            _self.props.handleLoadingSpinner(false);\n        } else {\n            //alert('Loading Fail')\n        }\n\n    }\n\n    getInfoCloudlet = (region) => {\n        // if(!this.state.liveComp) {\n        //     return;\n        // }\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n\n        this.setState({devData:[]})\n        if(region !== 'All'){\n            rgn = [region]\n        }\n        rgn.map((item, i) => {\n            setTimeout(() => services.getMCService('ShowCloudlet',{token:store ? store.userToken : 'null', region:item}, _self.receiveResult), 500 * i)\n        })\n\n\n    }\n    getInfoApp = (region) => {\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        let serviceBody = {}\n        _self.loadCount = 0;\n        this.setState({devData:[]})\n        if(region !== 'All'){\n            rgn = [region]\n        } else {\n            rgn = ['US','KR','EU'];\n        }\n\n            rgn.map((item) => {\n                // All show appInst\n                services.getMCService('ShowAppInst',{token:store ? store.userToken : 'null', region:item}, _self.receiveAppInst)\n            })\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // if(nextProps.tabName !== this.props.tabName){\n        //     return true;\n        // }\n        return true;\n    }\n    componentDidMount() {\n        function timeStringToFloat(time) {\n            var startTime = new Date(time);\n            var startMsec = startTime.getMilliseconds();\n\n            return startMsec;\n\n        }\n        var every = 5000;\n        var getDatas = function(self){\n            //call data from service\n\n\n            var old = new Date('2019-02-22 21:15:20').getTime();\n            var newd = new Date().getTime();\n            var sub = (newd - old)/(60*60*24);\n\n            self.timeout = setTimeout(function(){getDatas(self)} , every)\n        }\n\n\n        if(this.props.tabName === 'pg=1') {\n            this.setState({sideVisible: true})\n        } else {\n            this.setState({sideVisible: false})\n        }\n\n\n        //ComputeService.getMCService('ShowCloudlet',{token:store.userToken, region:'US'}, _self.receiveCloudlet)\n        /********************************\n         * ---- new connection MC ----\n         * 2019 07 17 start monitoring console\n         ********************************/\n        let store = localStorage.PROJECT_INIT ? JSON.parse(localStorage.PROJECT_INIT) : null\n        if(store && store.userToken) {\n            this.getInfoCloudlet(this.props.changeRegion);\n            this.userToken = store ? store.userToken : 'null';\n            this.getInfoApp('All')\n        }\n\n\n        /*\n        dropdownValueOne:'TDG',\n            dropdownValueTwo:'barcelona-mexdemo',\n            dropdownValueThree:'MobiledgeX SDK Demo',\n         */\n\n        _self.timeoutOnce = setTimeout(() => {\n            if(this.props.tabName === 'pg=1') {\n                _self.setState({dropdownValueOne:'TDG'})\n                //_self.setDeveloperList({value:'TDG'});\n                //_self.setCloudletList({value:'TDG'});\n            }\n\n\n        }, 2000)\n\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timeout)\n        clearTimeout(this.timeoutOnce)\n        clearInterval(this.timeout2)\n\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        console.log('mapStateToProps receive next props ------->>>>>>', nextProps)\n        if(nextProps.city) {\n            console.log('change city >>-->> ', nextProps.city.detailMode)\n            if(nextProps.city.detailMode) {\n                this.setState({sideVisible:true})\n                return;\n            } else {\n                this.setState({sideVisible:false})\n            }\n            let cityName = String(nextProps.city.name)\n            if(cityName !== 'dashboard'){\n                this.zoomIn(nextProps.city.detailMode, nextProps.city.name)\n            } else {\n                console.log('city name .', nextProps.city.name)\n            }\n            //현재 Barcelona == dashboard\n            let city = nextProps.city.name;\n            // if(nextProps.city.name === 'barcelona' || nextProps.city.name === 'Barcelona') {\n            //     city = 'dashboard'\n            // }\n\n            this.setState({selectedCity:city})\n\n        }\n\n    }\n\n    //go to NEXT\n    gotoNext(value) {\n        //브라우져 입력창에 주소 기록\n        let mainPath = '/site3';\n        let subPath = 'pg=0';\n        _self.props.history.push({\n            pathname: mainPath,\n            search: subPath,\n            state: { cloudlet: _self.state.dropdownValueThree }\n        });\n        _self.props.history.location.search = subPath;\n        _self.props.handleChangeSite({mainPath:mainPath, subPath: subPath, cloudlet:_self.state.dropdownValueThree})\n\n    }\n    zoomIn(detailMode, obj) {\n        console.log('zoom innnnnnnnnnnnnn', obj)\n        _self.setState({sideVisible:detailMode})\n        _self.setState({zoom:'in'})\n\n        let cities = [];\n        if(obj !== 'default' && typeof obj === 'object') {\n            obj.map((city) => {\n                cities.push(city.replace('  /  ', ''))\n            })\n\n            console.log('cities', cities, _self.state.cloudletsData)\n        } else {\n            cities.push(obj)\n        }\n\n\n        //find cloudlet in group\n        let groupby = aggregation.groupBy(_self.state.cloudletsData, 'CloudletName')\n\n        let selectedGroup = []\n\n        cities.map((city) => {\n            selectedGroup.push(groupby[city])\n        })\n\n        console.log('selected city in group..', groupby, selectedGroup);\n\n\n        //set location of cloudlets binded grouped\n        _self.setState({locationData:_self.setLocationData(selectedGroup)});\n\n\n    }\n    zoomOut(detailMode) {\n        _self.setState({sideVisible:detailMode, zoom:'out'})\n    }\n    resetMap(detailMode, from) {\n\n        if(from === 'fromDetail') {\n            _self.setState({locationData:_self.state.savelocationData});\n            _self.setState({sideVisible:detailMode})\n        } else {\n            _self.zoomOut(false)\n        }\n        _self.forceUpdate();\n    }\n    //reset list of sub dropwDown\n    handleChangeOne = (e, {value}) => {\n\n        _self.setState({ dropdownValueOne: value })\n\n        // _self.setState({dropDownValueTwo:'Select Developer', dropDownValueThree:'Select Cloudlet',\n        //     countryOptionsClou:[{ key: 1000, value: 'default', text: 'Select Cloudlet' }],\n        //     countryOptionsDev:[{ key: 1000, value: 'default', text: 'Select Developer' }], selectedDevelop:''})\n        if(value !== 'default'){\n            console.log('setDeveloperList...', value)\n            _self.setDeveloperList(value);\n            _self.setCloudletList(value);\n            //filtering by cloudlet name\n            // let groupby = aggregation.groupBy(_self.state.cloudletsData, 'Operator')\n            // console.log('groupy operator..', groupby)\n            // let groupData = _self.setLocationGroupData(groupby[value]);\n            // if(groupby[value]) _self.setState({locationData:groupData});\n        } else {\n            _self.setState({locationData:_self.state.savelocationData});\n        }\n        _self.resetMap(false)\n        _self.setState({sideVisible:false, condition:'one'})\n\n        _self.forceUpdate();\n\n\n    }\n\n    // List of Developer\n    /**********************\n     * find the cloudlets filtered by Operator & Developer\n     * @param e\n     * @param value\n     */\n    handleChangeTwo = (e, {value}) => {\n        console.log('change2.. value', value)\n\n        _self.resetMap(false)\n        _self.setState({sideVisible:false})\n\n        if(value === 'default'){\n            _self.resetMap(false)\n            _self.setState({sideVisible:false})\n        } else {\n            //filtering by cloudlet name\n            let groupby = aggregation.groupBy(_self.state.devGroup, 'OrganizationName')\n            let filtered = [];\n            let _cloudlets = [];\n\n            groupby[value].map((obj) => {\n                // condition of..\n                if(_self.state.dropdownValueOne !== 'default') {\n\n                    if(_self.state.dropdownValueThree !== 'default') {\n\n                        // operator & cloudlet\n                        if(_self.state.dropdownValueOne === obj.Operator && _self.state.dropdownValueThree === obj.Cloudlet) {\n                            //TODO: 2019-04-02 setting name of app to\n\n                            _cloudlets.push(obj);\n                        }\n\n                    } else {\n                        // operator\n                        if(_self.state.dropdownValueOne === obj.Operator) {\n                            _cloudlets.push(obj);\n                        }\n                    }\n                }\n            })\n\n            _cloudlets.map((cld) => {\n                _self.state.cloudletsData.map((cloudlet) => {\n                    if(cloudlet['CloudletName'] === cld['Cloudlet']) {\n                        filtered.push(cld)\n                    }\n                })\n            })\n\n            if(filtered.length > 0) {\n                _self.setState({locationData:_self.setAppinstGroupData(filtered)});\n            } else {\n                let err = 'There is no result'\n                Alert.error(err, {\n                    position: 'top-right',\n                    effect: 'slide',\n                    timeout: 5000\n                });\n                _self.props.handleChangeCity({name:value})\n            }\n        }\n        _self.setState({ dropdownValueTwo: value, condition:'two' })\n        _self.forceUpdate();\n    }\n    handleChangeThree = (e, {value}) => {\n        if(value === 'default'){\n            console.log('change2.. value', value)\n            _self.setState({sideVisible:false})\n        } else {\n            _self.setState({sideVisible:true})\n            //filtering by cloudlet name\n            let groupby = aggregation.groupBy(_self.state.cloudletsData, 'CloudletName')\n            console.log('groupy cloudlet..', groupby, groupby[value])\n            if(groupby[value]) {\n                _self.setState({locationData:_self.setLocationGroupData(groupby[value])});\n            } else {\n                let err = 'There is no result'\n                Alert.error(err, {\n                    position: 'top-right',\n                    effect: 'slide',\n                    timeout: 5000\n                });\n            }\n        }\n        _self.setState({ dropdownValueThree: value, condition:'three' })\n        _self.props.handleChangeCity({name:value})\n        _self.forceUpdate();\n    }\n    setDeveloperList(key) {\n        let groupbyDevel = aggregation.groupBy(_self.state.devGroup, 'Operator')\n        let devData = (groupbyDevel[key]) ? aggregation.groupBy(groupbyDevel[key], 'OrganizationName'):{};\n\n        let devKeys = Object.keys(devData)\n        let developers1 = [{ key: 0, value: 'default', text: 'Select Developer' }]\n        let developers2 = devKeys.map((opr, i) => ({ key: i+1, value: opr, text: opr }))\n        _self.setState({countryOptionsDev:[...developers1,...developers2]})\n        _self.forceUpdate();\n        //&&&&&&&&&& until set MWC &&&&&&&&&&&&&\n        setTimeout(()=>{\n            _self.setState({dropdownValueTwo:'default'})\n            _self.setState({selectedDevelop:'Select Developer'})\n        }, 4000)\n    }\n    setCloudletList(key) {\n        let operatorsGroup = [];\n        _self.state.operGroup[key].map((name) => {\n            operatorsGroup.push(name)\n        })\n        let groupbyDevel = aggregation.groupBy(operatorsGroup, 'cloudlet')\n        let operKeys = Object.keys(groupbyDevel)\n        console.log('groupbyData cloudlet Keys ==>==> ', operKeys)\n        let cloudlets1 = [{ key: 0, value: 'default', text: 'Select Cloudlet' }]\n        let cloudlets2 = operKeys.map((opr, i) => ({ key: i+1, value: opr, text: opr }))\n        _self.setState({countryOptionsClou:[...cloudlets1,...cloudlets2]})\n        _self.forceUpdate();\n        //&&&&&&&&&& until set MWC &&&&&&&&&&&&&\n        setTimeout(()=>{\n            _self.setState({dropdownValueThree:'default'})\n            _self.setState({selectedCloudlet:'Select Cloudlet'})\n        }, 3000)\n\n    }\n    /*\n\n     */\n    render() {\n        return (\n            <div id=\"bodyCont\" className='console_body'>\n                <div className='console_worldmap'>\n                    <ContainerOne ref={ref => this.container = ref} tabIdx={this.props.tabName} data={this.state.locationData}\n                                  gotoNext={this.gotoNext} zoomIn={this.zoomIn} zoomOut={this.zoomOut} resetMap={this.resetMap}\n                                  zoom={this.state.zoom} condition={this.state.condition}></ContainerOne>\n                </div>\n\n                <div className='console_nav_left'>\n                    <div className='filter'>\n                        <Dropdown placeholder='Select Operator' fluid search selection options={this.state.countryOptionsOper} value={this.state.dropdownValueOne} onChange={this.handleChangeOne}  />\n                    </div>\n                    <div className='filter'>\n                        <Dropdown placeholder={this.state.selectedCloudlet} fluid search selection options={this.state.countryOptionsClou} value={this.state.dropdownValueThree} selectedLabel={this.state.selectedCloudlet} onChange={this.handleChangeThree} />\n                    </div>\n                    <div className='filter'>\n                        <Dropdown placeholder={this.state.selectedDevelop} fluid search selection options={this.state.countryOptionsDev} value={this.state.dropdownValueTwo} selectedLabel={this.state.selectedDevelop}  onChange={this.handleChangeTwo}/>\n                    </div>\n                </div>\n\n                <div className='console_right_content'>\n                    <DeveloperSideInfo sideVisible={this.state.sideVisible} gotoNext={this.gotoNext}></DeveloperSideInfo>\n                </div>\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => {\n    console.log('mapStateToProps in siteTwo_page_one...', state)\n    return {\n        city: Object.assign({}, state.cityChanger.city),\n        changeRegion : state.changeRegion.region?state.changeRegion.region:null,\n    };\n};\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleChangeCity: (data) => { dispatch(actions.changeCity(data))},\n        handleChangeSite: (data) => { dispatch(actions.changeSite(data))},\n        handleInjectData: (data) => { dispatch(actions.injectNetworkData(data))},\n        handleAlertInfo: (mode,msg) => { dispatch(actions.alertInfo(mode,msg))}\n    };\n};\nSiteTwoPageOne.defaultProps = {\n    tabName : 0,\n    onReceive: {data:null}\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchProps)(SiteTwoPageOne));\n"]},"metadata":{},"sourceType":"module"}