{"ast":null,"code":"import _defineProperty from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/developerSideInfo.js\";\nimport React, { StyleSheet } from 'react';\nimport { Button, Checkbox, Grid, Header, Icon, Image, Menu, Segment, Sidebar, Label, Dropdown } from 'semantic-ui-react';\nimport MaterialIcon from 'material-icons-react'; //redux\n\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport CPUMEMUsage from '../container/usage/cupmemory';\nimport NetworkInOutSimple from '../components/network/networkInoutSimple';\nimport TimeSeriesFlow from '../charts/plotly/timeseriesFlow';\nimport TimeSeries from '../charts/plotly/timeseries';\nimport ScatterMethods from '../charts/plotly/scatterMethods';\nimport HistoricalColumn from '../charts/plotly/historicalColumn';\nimport * as aggregation from \"../utils\";\nimport MethodCallChart from \"../charts/plotly/methodCallChart\";\nvar customMargin = {\n  l: 0,\n  r: 0,\n  b: 0,\n  t: 0,\n  pad: 0\n};\nvar methodCounts = [{\n  mtName: '',\n  sum: 0\n}, {\n  mtName: '',\n  sum: 0\n}, {\n  mtName: '',\n  sum: 0\n}];\nvar dataOptions = [{\n  key: 'af',\n  value: 'af',\n  text: 'Disk W/R'\n}, {\n  key: 'af2',\n  value: 'af2',\n  text: 'Network I/O'\n}];\n\nvar VerticalSidebar = function VerticalSidebar(_ref) {\n  var animation = _ref.animation,\n      direction = _ref.direction,\n      visible = _ref.visible,\n      gotoNext = _ref.gotoNext,\n      cpu = _ref.cpu,\n      mem = _ref.mem,\n      file = _ref.file,\n      recv = _ref.recv,\n      send = _ref.send,\n      network = _ref.network,\n      networkSeries = _ref.networkSeries,\n      lineLimit = _ref.lineLimit,\n      redraw = _ref.redraw,\n      cloudletInfo = _ref.cloudletInfo,\n      scatterData = _ref.scatterData,\n      methodCounts = _ref.methodCounts,\n      self = _ref.self;\n  return React.createElement(Sidebar, {\n    as: Menu,\n    animation: animation,\n    direction: direction,\n    icon: \"labeled\",\n    vertical: true,\n    visible: visible,\n    className: \"console_sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Header, {\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Header.Content, {\n    className: \"next\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    onClick: gotoNext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, cloudletInfo, React.createElement(MaterialIcon, {\n    icon: 'arrow_forward',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"fold-icon\",\n    onClick: self.handleMinimize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(MaterialIcon, {\n    icon: 'arrow_right',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }))))), React.createElement(Grid.Row, {\n    columns: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"0\", React.createElement(Label.Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Event\"), React.createElement(MaterialIcon, {\n    icon: 'chevron_right',\n    size: 32,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"0\", React.createElement(Label.Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"System\"), React.createElement(MaterialIcon, {\n    icon: 'chevron_right',\n    size: 32,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"0\", React.createElement(Label.Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Alert\"), React.createElement(MaterialIcon, {\n    icon: 'chevron_right',\n    size: 32,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"0\", React.createElement(Label.Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Syslog\"), React.createElement(MaterialIcon, {\n    icon: 'chevron_right',\n    size: 32,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })))), React.createElement(Grid.Row, {\n    columns: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 5,\n    className: \"hit_count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(NetworkInOutSimple, {\n    type: \"in\",\n    cId: \"RateOfReg\",\n    colors: ['#22cccc', '#22cccc'],\n    title: \"Rate of RegisterClient\",\n    value: methodCounts[0]['sum'],\n    unit: \"per sec\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \">\")), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(NetworkInOutSimple, {\n    type: \"out\",\n    cId: \"RateOfFind\",\n    colors: ['#6699ff', '#6699ff'],\n    title: \"Rate of FindCloudlet\",\n    value: methodCounts[1]['sum'],\n    unit: \"per sec\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \">\")), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(NetworkInOutSimple, {\n    type: \"out2\",\n    cId: \"RateOfVery\",\n    colors: ['#aa77ff', '#aa77ff'],\n    title: \"Rate of VerifyLocation \",\n    value: methodCounts[2]['sum'],\n    unit: \"per sec\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \">\"))), React.createElement(Grid.Column, {\n    width: 11,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(MethodCallChart, {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    chartData: scatterData,\n    lineLimit: lineLimit,\n    redraw: redraw,\n    ratioCallForSecMethod: _self.ratioCallForSecMethod,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }))), React.createElement(Grid.Row, {\n    columns: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(CPUMEMUsage, {\n    label: \"CPU\",\n    value: cpu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(CPUMEMUsage, {\n    label: \"MEMORY\",\n    value: mem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(CPUMEMUsage, {\n    label: \"DISK\",\n    value: file,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }))), React.createElement(Grid.Row, {\n    columns: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 5,\n    className: \"network_count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    placeholder: \"Network I/O\",\n    fluid: true,\n    search: true,\n    selection: true,\n    options: dataOptions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(NetworkInOutSimple, {\n    type: \"in\",\n    cId: \"networkIn\",\n    colors: ['#22cccc', '#22cccc'],\n    title: \"Network In\",\n    value: recv,\n    unit: \"B\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \">\"), React.createElement(NetworkInOutSimple, {\n    type: \"out\",\n    cId: \"networkOut\",\n    colors: ['#6699ff', '#6699ff'],\n    title: \"Network Out\",\n    value: send,\n    unit: \"B\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \">\"))), React.createElement(Grid.Column, {\n    width: 11,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(TimeSeriesFlow, {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    chartData: network,\n    series: networkSeries,\n    lineLimit: lineLimit,\n    redraw: redraw,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })))));\n};\n\nvar _self = null;\nvar colors = ['#22cccc', '#6699ff', '#aa77ff', '#ff8e06'];\nvar fontColor = 'rgba(255,255,255,.5)';\n\nvar DeveloperSideInfo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DeveloperSideInfo, _React$Component);\n\n  function DeveloperSideInfo() {\n    var _this;\n\n    _classCallCheck(this, DeveloperSideInfo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeveloperSideInfo).call(this));\n    _self = _assertThisInitialized(_this);\n    _this.state = {\n      animation: 'overlay',\n      direction: 'right',\n      dimmed: false,\n      visible: false,\n      cpu: 0,\n      mem: 0,\n      file: 0,\n      recv: 0,\n      send: 0,\n      network: [],\n      networkSeries: [],\n      lineLimit: false,\n      redraw: false,\n      resetData: false,\n      cloudletInfo: 'Deutsche Telecom Barcelona MWC',\n      city: 'Barcelona',\n      scatterData: [],\n      methodCounts: [{\n        mtName: '',\n        sum: 0\n      }, {\n        mtName: '',\n        sum: 0\n      }, {\n        mtName: '',\n        sum: 0\n      }]\n    };\n    _this.dataArray = [];\n    _this.dataSeries = [];\n    _this.oldSeries = null;\n    _this.oldCity = ''; //x axis length to divide\n\n    _this.limitDataLength = 15;\n    return _this;\n  }\n\n  _createClass(DeveloperSideInfo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.handleChangeCity({\n        name: 'dashboard'\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      this.setState({\n        redraw: false\n      });\n      /********************\n       *  새로운 지역 선택시에 네트워크 이전데이터 초기화\n       ********************/\n\n      if (nextProps.city.name && this.state.city !== nextProps.city.name) {\n        console.log('새로운 cloudlet 선택 == ', nextProps.city);\n        this.dataArray = [];\n        this.dataSeries = [];\n        this.setState({\n          dataArray: [],\n          dataSeries: [],\n          network: [],\n          networkSeries: [],\n          city: nextProps.city.name ? nextProps.city.name : nextProps.city\n        });\n      }\n\n      this.setState({\n        visible: nextProps.sideVisible && nextProps.city.name !== 'default' ? true : false\n      });\n\n      if (nextProps.data) {\n        if (nextProps.data.cpuUsage) {\n          this.setState({\n            cpu: nextProps.data.cpuUsage\n          });\n        }\n\n        if (nextProps.data.memUsage) {\n          this.setState({\n            mem: nextProps.data.memUsage\n          });\n        }\n\n        if (nextProps.data.filesystemUsage) {\n          this.setState({\n            file: nextProps.data.filesystemUsage\n          });\n        }\n\n        if (nextProps.data.network) {\n          //TODO: 네트웍데이터 가공하기\n\n          /*\n          [\n              [\"data1\", 30, 200, 100, 400, 150, 250],\n              [\"data2\", 50, 20, 10, 40, 15, 25]\n          ]\n           */\n          var keyLength = Object.keys(nextProps.data.network).length;\n          var newData = true;\n          var sCnt = 0; //console.log('data network -- ', nextProps.data.network)\n\n          Object.keys(nextProps.data.network).map(function (key, i) {\n            if (_this2.dataArray.length < Object.keys(nextProps.data.network).length) {\n              _this2.dataArray.push([]);\n\n              _this2.dataSeries[0] = [];\n            } else {\n              if (nextProps.data.network[key] && _this2.oldSeries === nextProps.data.network[key].time) {\n                newData = false;\n              } else {\n                newData = true;\n              } //should limit display data in chart\n\n              /****************\n               * 차트에 표현할 데이터의 개수 정의\n               ****************/\n\n\n              if (_this2.dataArray[i] && _this2.dataArray[i].length > _this2.limitDataLength) {\n                //pop first data\n                _this2.dataArray[i].splice(0, 1);\n\n                if (sCnt === keyLength - 1) _this2.dataSeries[0].splice(0, 1);\n              }\n\n              if (newData && nextProps.data.network[key]) {\n                _this2.dataArray[i].push(Number(nextProps.data.network[key].score));\n\n                if (sCnt === keyLength - 1) {\n                  _this2.dataSeries[0].push(nextProps.data.network[key].time);\n\n                  _this2.oldSeries = nextProps.data.network[key].time; //console.log('time series == ', this.dataSeries[0] , 'data length='+this.dataArray[i].length, 'limitDataLength='+this.limitDataLength)\n\n                  if (_this2.dataSeries[0].length === _this2.limitDataLength + 1) {\n                    _this2.setState({\n                      lineLimit: true\n                    });\n                  }\n\n                  _this2.setState({\n                    redraw: true\n                  });\n                } else {}\n\n                _this2.setState(_defineProperty({}, key, nextProps.data.network[key].score));\n              }\n            }\n\n            sCnt++;\n          });\n\n          if (newData) {\n            this.setState({\n              network: this.dataArray,\n              networkSeries: this.dataSeries\n            });\n          }\n        }\n\n        if (nextProps.data && nextProps.data.methodCall) {\n          var methodName = ['FindCloudlet', 'RegisterClient', 'GetFqdnList'];\n          var mthData = nextProps.data.methodCall;\n          var groupDev = aggregation.groupBy(mthData, 'dev');\n          var groupTime = aggregation.groupBy(mthData, 'time');\n          var timeKeys = Object.keys(groupTime);\n          var dataComp = [];\n          var summaryMth = [{\n            mtName: '',\n            sum: 0\n          }, {\n            mtName: '',\n            sum: 0\n          }, {\n            mtName: '',\n            sum: 0\n          }];\n          var devKeys = Object.keys(groupDev); // samsung, neon2...\n\n          methodName.map(function (name, i) {\n            // y array : method 당 호출 카운드\n            var mthCount = 0;\n            var mthTotalCount = 0;\n            devKeys.map(function (dName) {\n              groupDev[dName].map(function (obj) {\n                if (obj.method === name) mthCount++;\n              });\n              mthTotalCount += mthCount;\n            });\n            summaryMth[i]['mtName'] = name;\n            summaryMth[i]['sum'] = mthTotalCount / 3600; //call every 60 secons\n          });\n\n          _self.setState({\n            scatterData: nextProps.data,\n            methodCounts: summaryMth\n          });\n        }\n      }\n\n      if (nextProps.city) {\n        var cdName = 'No Name of Cloudlet';\n        cdName = nextProps.city.name;\n        this.setState({\n          cloudletInfo: cdName,\n          city: nextProps.city.name ? nextProps.city.name : this.state.city\n        });\n      }\n    }\n  }, {\n    key: \"handleClickBtn\",\n    value: function handleClickBtn() {\n      _self.props.gotoNext();\n    }\n  }, {\n    key: \"handleMinimize\",\n    value: function handleMinimize() {\n      _self.setState({\n        visible: !_self.state.visible\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          animation = _this$state.animation,\n          dimmed = _this$state.dimmed,\n          direction = _this$state.direction,\n          visible = _this$state.visible;\n      var vertical = direction === 'bottom' || direction === 'top';\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(VerticalSidebar, {\n        animation: animation,\n        direction: direction,\n        visible: visible,\n        gotoNext: this.handleClickBtn,\n        cpu: this.state.cpu,\n        mem: this.state.mem,\n        file: this.state.file,\n        recv: this.state.recv,\n        send: this.state.send,\n        network: this.state.network,\n        networkSeries: this.state.networkSeries,\n        lineLimit: this.state.lineLimit,\n        redraw: this.state.redraw,\n        cloudletInfo: this.state.cloudletInfo,\n        scatterData: this.state.scatterData,\n        methodCounts: this.state.methodCounts,\n        methodCall: this.state.methodCall,\n        self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DeveloperSideInfo;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  //console.log('dev side info -- ', state.cityChanger.city)\n  return {\n    data: state.receiveDataReduce.data,\n    city: state.cityChanger.city\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    handleChangeCity: function handleChangeCity(data) {\n      dispatch(actions.changeCity(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(DeveloperSideInfo);","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/container/developerSideInfo.js"],"names":["React","StyleSheet","Button","Checkbox","Grid","Header","Icon","Image","Menu","Segment","Sidebar","Label","Dropdown","MaterialIcon","connect","actions","CPUMEMUsage","NetworkInOutSimple","TimeSeriesFlow","TimeSeries","ScatterMethods","HistoricalColumn","aggregation","MethodCallChart","customMargin","l","r","b","t","pad","methodCounts","mtName","sum","dataOptions","key","value","text","VerticalSidebar","animation","direction","visible","gotoNext","cpu","mem","file","recv","send","network","networkSeries","lineLimit","redraw","cloudletInfo","scatterData","self","width","position","handleMinimize","height","_self","ratioCallForSecMethod","colors","fontColor","DeveloperSideInfo","state","dimmed","resetData","city","dataArray","dataSeries","oldSeries","oldCity","limitDataLength","props","handleChangeCity","name","nextProps","setState","console","log","sideVisible","data","cpuUsage","memUsage","filesystemUsage","keyLength","Object","keys","length","newData","sCnt","map","i","push","time","splice","Number","score","methodCall","methodName","mthData","groupDev","groupBy","groupTime","timeKeys","dataComp","summaryMth","devKeys","mthCount","mthTotalCount","dName","obj","method","cdName","vertical","handleClickBtn","Component","mapStateToProps","ownProps","receiveDataReduce","cityChanger","mapDispatchProps","dispatch","changeCity"],"mappings":"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","sourcesContent":["import React, { StyleSheet } from 'react';\nimport {\n    Button,\n    Checkbox,\n    Grid,\n    Header,\n    Icon,\n    Image,\n    Menu,\n    Segment,\n    Sidebar, Label, Dropdown\n} from 'semantic-ui-react';\nimport MaterialIcon from 'material-icons-react';\n\n//redux\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n\nimport CPUMEMUsage from '../container/usage/cupmemory';\nimport NetworkInOutSimple from '../components/network/networkInoutSimple';\nimport TimeSeriesFlow from '../charts/plotly/timeseriesFlow';\nimport TimeSeries from '../charts/plotly/timeseries';\nimport ScatterMethods from '../charts/plotly/scatterMethods';\nimport HistoricalColumn from '../charts/plotly/historicalColumn';\nimport * as aggregation from \"../utils\";\nimport MethodCallChart from \"../charts/plotly/methodCallChart\";\n\n\nlet customMargin = {\n    l: 0,\n    r: 0,\n    b: 0,\n    t: 0,\n    pad: 0\n}\nlet methodCounts = [{mtName:'',sum:0},{mtName:'',sum:0},{mtName:'',sum:0}]\nlet dataOptions = [ { key: 'af', value: 'af', text: 'Disk W/R' },{ key: 'af2', value: 'af2', text: 'Network I/O' } ]\nconst VerticalSidebar = ({ animation, direction, visible, gotoNext, cpu, mem, file, recv, send, network, networkSeries, lineLimit, redraw, cloudletInfo, scatterData, methodCounts, self }) => (\n    <Sidebar\n        as={Menu}\n        animation={animation}\n        direction={direction}\n        icon='labeled'\n        vertical\n        visible={visible}\n        className='console_sidebar'\n    >\n        <Grid>\n            <Grid.Row>\n                <Header style={{width:'100%'}}>\n                    <Header.Content className=\"next\">\n                        <div style={{position:'relative'}} onClick={gotoNext}>\n                            {cloudletInfo}\n                            <MaterialIcon icon={'arrow_forward'} />\n                        </div>\n                        <div className=\"fold-icon\" onClick={self.handleMinimize}><MaterialIcon icon={'arrow_right'} /></div>\n                    </Header.Content>\n                </Header>\n            </Grid.Row>\n            {/* 이벤트 시스템 알럿 시스로그*/}\n            <Grid.Row columns={4}>\n                <Grid.Column>\n                    <Label>\n                        0\n                        <Label.Detail>Event</Label.Detail>\n                        <MaterialIcon icon={'chevron_right'} size={32} />\n                    </Label>\n                </Grid.Column>\n                <Grid.Column>\n                    <Label>\n                        0\n                        <Label.Detail>System</Label.Detail>\n                        <MaterialIcon icon={'chevron_right'} size={32} />\n                    </Label>\n                </Grid.Column>\n                <Grid.Column>\n                    <Label>\n                        0\n                        <Label.Detail>Alert</Label.Detail>\n                        <MaterialIcon icon={'chevron_right'} size={32} />\n                    </Label>\n                </Grid.Column>\n                <Grid.Column>\n                    <Label>\n                        0\n                        <Label.Detail>Syslog</Label.Detail>\n                        <MaterialIcon icon={'chevron_right'} size={32} />\n                    </Label>\n                </Grid.Column>\n            </Grid.Row>\n\n            {/* hit count for second */}\n            <Grid.Row columns={2}>\n                <Grid.Column width={5} className='hit_count'>\n                    <Grid.Column>\n                        <NetworkInOutSimple type=\"in\" cId=\"RateOfReg\" colors={['#22cccc','#22cccc']} title=\"Rate of RegisterClient\" value={methodCounts[0]['sum']} unit=\"per sec\">></NetworkInOutSimple>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <NetworkInOutSimple type=\"out\" cId=\"RateOfFind\" colors={['#6699ff','#6699ff']} title=\"Rate of FindCloudlet\" value={methodCounts[1]['sum']} unit=\"per sec\">></NetworkInOutSimple>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <NetworkInOutSimple type=\"out2\" cId=\"RateOfVery\" colors={['#aa77ff','#aa77ff']} title=\"Rate of VerifyLocation \" value={methodCounts[2]['sum']} unit=\"per sec\">></NetworkInOutSimple>\n                    </Grid.Column>\n                </Grid.Column>\n                <Grid.Column width={11}>\n                        {/*<ScatterMethods style={{width:'100%', height:'100%'}} data={scatterData} methodCounts={methodCounts}/>*/}\n                        {/*<HistoricalColumn style={{width:'100%', height:'100%'}} data={scatterData} methodCounts={methodCounts}/>*/}\n                        <MethodCallChart style={{width:'100%', height:'100%'}} chartData={scatterData} lineLimit={lineLimit} redraw={redraw} ratioCallForSecMethod={_self.ratioCallForSecMethod}></MethodCallChart>\n                </Grid.Column>\n            </Grid.Row>\n\n            {/* cpu memory usage */}\n            <Grid.Row columns={3}>\n                <Grid.Column>\n                    <CPUMEMUsage label=\"CPU\" value={cpu}></CPUMEMUsage>\n                </Grid.Column>\n                <Grid.Column>\n                    <CPUMEMUsage label=\"MEMORY\" value={mem}></CPUMEMUsage>\n                </Grid.Column>\n                <Grid.Column>\n                    <CPUMEMUsage label=\"DISK\" value={file}></CPUMEMUsage>\n                </Grid.Column>\n            </Grid.Row>\n\n            {/*Network I/O*/}\n            <Grid.Row columns={2}>\n                <Grid.Column width={5} className='network_count'>\n                    <Grid.Row>\n                        <Dropdown placeholder='Network I/O' fluid search selection options={dataOptions} />\n                        <NetworkInOutSimple type=\"in\" cId=\"networkIn\" colors={['#22cccc','#22cccc']} title=\"Network In\" value={recv} unit=\"B\">></NetworkInOutSimple>\n                        <NetworkInOutSimple type=\"out\" cId=\"networkOut\" colors={['#6699ff','#6699ff']} title=\"Network Out\" value={send} unit=\"B\">></NetworkInOutSimple>\n                    </Grid.Row>\n                </Grid.Column>\n                <Grid.Column width={11}>\n                    {/*<HighCharts chart=\"line\" style={{height:'100%'}}/>*/}\n                    {/*<BBLineChart chartData={network} series={networkSeries} lineLimit={lineLimit}/>*/}\n                    <TimeSeriesFlow style={{width:'100%', height:'100%'}} chartData={network} series={networkSeries} lineLimit={lineLimit} redraw={redraw}></TimeSeriesFlow>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    </Sidebar>\n)\n\nlet _self = null;\nvar colors = ['#22cccc', '#6699ff','#aa77ff', '#ff8e06' ];\nvar fontColor = 'rgba(255,255,255,.5)' ;\nclass DeveloperSideInfo extends React.Component {\n\n\n    constructor() {\n        super();\n        _self = this;\n        this.state = {\n            animation: 'overlay',\n            direction: 'right',\n            dimmed: false,\n            visible: false,\n            cpu:0, mem:0, file:0, recv:0, send:0, network:[], networkSeries:[],\n            lineLimit:false,\n            redraw:false, resetData:false,\n            cloudletInfo:'Deutsche Telecom Barcelona MWC',\n            city:'Barcelona',\n            scatterData:[],\n            methodCounts: [{mtName:'',sum:0},{mtName:'',sum:0},{mtName:'',sum:0}]\n        }\n        this.dataArray = [];\n        this.dataSeries = [];\n        this.oldSeries = null;\n        this.oldCity = '';\n        //x axis length to divide\n        this.limitDataLength = 15;\n    }\n    componentDidMount() {\n        this.props.handleChangeCity({name:'dashboard'})\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        this.setState({redraw:false})\n\n        /********************\n         *  새로운 지역 선택시에 네트워크 이전데이터 초기화\n         ********************/\n\n        if(nextProps.city.name && this.state.city !== nextProps.city.name) {\n            console.log('새로운 cloudlet 선택 == ', nextProps.city)\n            this.dataArray = [];\n            this.dataSeries = [];\n            this.setState({dataArray:[], dataSeries:[], network:[], networkSeries:[], city:(nextProps.city.name)?nextProps.city.name:nextProps.city})\n        }\n\n        this.setState({visible:(nextProps.sideVisible && nextProps.city.name !== 'default') ? true : false});\n\n        if(nextProps.data) {\n            if(nextProps.data.cpuUsage) {\n                this.setState({cpu:nextProps.data.cpuUsage})\n            }\n            if(nextProps.data.memUsage) {\n                this.setState({mem:nextProps.data.memUsage})\n            }\n            if(nextProps.data.filesystemUsage) {\n                this.setState({file:nextProps.data.filesystemUsage})\n            }\n\n            if(nextProps.data.network) {\n                //TODO: 네트웍데이터 가공하기\n                /*\n                [\n                    [\"data1\", 30, 200, 100, 400, 150, 250],\n                    [\"data2\", 50, 20, 10, 40, 15, 25]\n                ]\n                 */\n                let keyLength = Object.keys(nextProps.data.network).length;\n                let newData = true;\n                let sCnt = 0;\n                //console.log('data network -- ', nextProps.data.network)\n                Object.keys(nextProps.data.network).map((key, i) => {\n                    if(this.dataArray.length < Object.keys(nextProps.data.network).length) {\n                        this.dataArray.push([])\n                        this.dataSeries[0]=[]\n                    } else {\n\n                        if(nextProps.data.network[key] && this.oldSeries === nextProps.data.network[key].time){\n                            newData = false;\n                        } else {\n                            newData = true;\n                        }\n\n                        //should limit display data in chart\n                        /****************\n                         * 차트에 표현할 데이터의 개수 정의\n                         ****************/\n                        if(this.dataArray[i] && this.dataArray[i].length > this.limitDataLength) {\n                            //pop first data\n                            this.dataArray[i].splice(0,1)\n                            if(sCnt === (keyLength - 1)) this.dataSeries[0].splice(0,1)\n                        }\n\n                        if(newData && nextProps.data.network[key]) {\n                            this.dataArray[i].push(Number(nextProps.data.network[key].score))\n                            if(sCnt === (keyLength - 1)) {\n                                this.dataSeries[0].push(nextProps.data.network[key].time)\n                                this.oldSeries = nextProps.data.network[key].time;\n                                //console.log('time series == ', this.dataSeries[0] , 'data length='+this.dataArray[i].length, 'limitDataLength='+this.limitDataLength)\n                                if(this.dataSeries[0].length === (this.limitDataLength+1)){\n                                    this.setState({lineLimit: true})\n                                }\n                                this.setState({redraw:true})\n                            } else {\n\n                            }\n                            this.setState({[key]:nextProps.data.network[key].score})\n                        }\n\n                    }\n                    sCnt ++;\n                })\n\n                if(newData){\n                    this.setState({network:this.dataArray, networkSeries:this.dataSeries})\n                }\n\n            }\n\n\n            if(nextProps.data && nextProps.data.methodCall) {\n                let methodName = ['FindCloudlet', 'RegisterClient', 'GetFqdnList']\n                let mthData = nextProps.data.methodCall;\n                let groupDev = aggregation.groupBy(mthData, 'dev')\n                let groupTime = aggregation.groupBy(mthData, 'time')\n                let timeKeys = Object.keys(groupTime);\n                let dataComp = [];\n                let summaryMth = [{mtName:'', sum:0},{mtName:'', sum:0},{mtName:'', sum:0}];\n                let devKeys = Object.keys(groupDev); // samsung, neon2...\n\n                methodName.map((name, i) => {\n                    // y array : method 당 호출 카운드\n                    let mthCount = 0;\n                    let mthTotalCount = 0;\n                    devKeys.map(dName => {\n                        groupDev[dName].map(obj => {\n                            if(obj.method === name) mthCount ++;\n                        })\n                        mthTotalCount += mthCount;\n                    })\n\n                    summaryMth[i]['mtName'] = name;\n                    summaryMth[i]['sum'] = mthTotalCount / 3600; //call every 60 secons\n\n                })\n\n                _self.setState({scatterData:nextProps.data, methodCounts:summaryMth})\n\n            }\n\n        }\n        if(nextProps.city) {\n            let cdName = 'No Name of Cloudlet';\n\n            cdName = nextProps.city.name;\n\n            this.setState({cloudletInfo:cdName, city:(nextProps.city.name)?nextProps.city.name : this.state.city})\n        }\n\n\n\n\n\n    }\n    handleClickBtn() {\n        _self.props.gotoNext();\n    }\n    handleMinimize() {\n        _self.setState({visible: !_self.state.visible})\n    }\n\n\n    render() {\n        const { animation, dimmed, direction, visible } = this.state\n        const vertical = direction === 'bottom' || direction === 'top'\n\n        return (\n            <div>\n                <VerticalSidebar animation={animation} direction={direction} visible={visible} gotoNext={this.handleClickBtn}\n                                 cpu={this.state.cpu} mem={this.state.mem} file={this.state.file} recv={this.state.recv}\n                                 send={this.state.send} network={this.state.network} networkSeries={this.state.networkSeries}\n                                 lineLimit={this.state.lineLimit} redraw={this.state.redraw}\n                                 cloudletInfo={this.state.cloudletInfo} scatterData={this.state.scatterData} methodCounts={this.state.methodCounts}\n                                 methodCall={this.state.methodCall} self={this}\n                />\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n        //console.log('dev side info -- ', state.cityChanger.city)\n    return {\n        data: state.receiveDataReduce.data,\n        city: state.cityChanger.city\n    };\n};\nconst mapDispatchProps = (dispatch) => {\n    return {\n        handleChangeCity: (data) => { dispatch(actions.changeCity(data)) }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(DeveloperSideInfo);\n"]},"metadata":{},"sourceType":"module"}