{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/components/applicationView.js\";\nimport React from 'react';\nimport { Grid, Dropdown } from 'semantic-ui-react';\nimport sizeMe from 'react-sizeme';\nimport NetworkInoutLegend from './network/networkInoutLegend';\nimport TimeSeries from '../charts/plotly/timeseries';\nimport * as serviceCluster from '../services/service_instance_service';\nimport { connect } from \"react-redux\";\nimport * as utils from '../utils';\nimport SelectRange from '../components/selectRange';\nimport * as d3 from 'd3';\nvar customMargin = {\n  l: 50,\n  r: 15,\n  b: 35,\n  t: 5,\n  pad: 0\n};\nvar data = [{\n  x: ['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'],\n  y: [1, 3, 6],\n  type: 'scatter'\n}];\nvar _self = null;\n\nvar ApplicationView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ApplicationView, _React$Component);\n\n  function ApplicationView() {\n    var _this;\n\n    _classCallCheck(this, ApplicationView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ApplicationView).call(this));\n    _self = _assertThisInitialized(_this);\n    _this.state = {\n      optionOne: [{\n        key: 'ca',\n        value: 'ca',\n        text: 'Select Cluster'\n      }, {\n        key: 'cb',\n        value: 'cb',\n        text: 'Cluster-B'\n      }, {\n        key: 'cc',\n        value: 'cc',\n        text: 'Cluster-C'\n      }],\n      optionTwo: [{\n        key: 'g1',\n        value: 'g1',\n        text: 'PokemonGo'\n      }, {\n        key: 'g2',\n        value: 'g2',\n        text: 'Game2'\n      }, {\n        key: 'g3',\n        value: 'g3',\n        text: 'Game3'\n      }],\n      optionThree: [{\n        key: 'd1',\n        value: 'd1',\n        text: 'CPU/MEM'\n      }, {\n        key: 'd2',\n        value: 'd2',\n        text: 'Network I/O'\n      }],\n      optionFour: [{\n        key: 't1',\n        value: 't1',\n        text: 'Last Hour'\n      }, {\n        key: 't2',\n        value: 't2',\n        text: 'Last 3 Hours'\n      }, {\n        key: 't3',\n        value: 't3',\n        text: 'Last 6 Hours'\n      }, {\n        key: 't4',\n        value: 't4',\n        text: 'Last 12 Hours'\n      }, {\n        key: 't5',\n        value: 't5',\n        text: 'Last 24 Hours'\n      }],\n      timeseriesDataCPUMEM: [[0, 1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]],\n      timeseriesCPUMEM: [[\"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]],\n      dataLabel: ['CPU', 'MEM'],\n      timeseriesDataNET: [[0, 1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]],\n      timeseriesNET: [[\"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]],\n      dataLabelNet: ['RCV', 'SND'],\n      avgCpu: 0.00,\n      avgMem: 0.00,\n      avgNetIn: 0.00,\n      avgNetOut: 0.00,\n      applications: [],\n      dropdownValueOne: 'tdg-barcelona-niantic',\n      dropdownValueTwo: '',\n      dropdownValueCluster: '',\n      dropdownValueApp: ''\n    };\n    _this.selectedCloudlet = 'barcelona-mexdemo';\n    _this.selectedCluster = 'tdg-barcelona-niantic';\n    _this.selectedApp = '';\n    _this.selectedStatic = '';\n    _this.selectedPeriod = '';\n    _this.interval = null;\n    return _this;\n  }\n\n  _createClass(ApplicationView, [{\n    key: \"handleChange\",\n    value: function handleChange(obj) {\n      console.log('**************************');\n      console.log('obj. ', obj.id, obj.key, obj.value, obj.key.indexOf('0'));\n      console.log('**************************');\n\n      if (obj.key.indexOf('0') > -1) {\n        _self.selectedCluster = obj.value;\n\n        _self.setState({\n          dropdownValueOne: obj.value\n        });\n      }\n    }\n    /*\n    Starting number: 1500\n    d3.format(\",\") : 1,500\n    d3.format(\".1f\") : 1500.0\n    d3.format(\",.2f\") : 1,500.00\n    d3.format(\"s\") : 1.5k\n    d3.format(\".1s\") : 2k\n    d3.format(\".2s\") : 1.5k\n    function(d) { return \"$\" + d3.format(\",.2f\")(d); } : $1,500.00\n    d3.format(\",.2%\") : 150,000.00%\n    */\n\n  }, {\n    key: \"receiveAppCluster\",\n    value: function receiveAppCluster(result, self) {\n      var resultArray = result; //_self.props.handleInjectData({appClusterData:resultArray})\n\n      var newData = [[2, 3, 4, 2, 3, 4], [6, 5, 6, 5, 6, 7]];\n      var newData2 = [[2, 3, 4, 2, 3, 4], [6, 5, 6, 5, 6, 7]];\n      var newseries = [[0, 1, 2, 3, 4, 5]];\n      var newseries2 = [[0, 1, 2, 3, 4, 5]];\n      var avgCpu = 0.00;\n      var avgMem = 0.00;\n      var avgNetIn = 0.00;\n      var avgNetOut = 0.00;\n      var kbFormat = d3.format('.2s');\n      console.log('result app cluster.........>>', result);\n\n      if (result) {\n        try {\n          result.map(function (data) {\n            data.series.map(function (item, i) {\n              newData[0] = item.values.map(function (value) {\n                return Number(value[3]) * 5;\n              });\n              newData[1] = item.values.map(function (value) {\n                return Number(value[5]);\n              });\n              newseries[0] = item.values.map(function (value) {\n                return value[0];\n              });\n              newData2[0] = item.values.map(function (value) {\n                return Number(value[6]);\n              });\n              newData2[1] = item.values.map(function (value) {\n                return Number(value[7]);\n              });\n            });\n          });\n          avgCpu = newData[0][newData[0].length - 1];\n          avgMem = newData[1][newData[1].length - 1];\n          avgNetIn = newData2[0][newData2[0].length - 1];\n          avgNetOut = newData2[1][newData2[0].length - 1]; // avgCpu = (newData[0].length > 4)?newData[0][newData[0].length-1].toFixed(4):newData[0][newData[0].length-1];\n          // avgMem = (newData[1].length > 4)?newData[1][newData[0].length-1].toFixed(4):newData[1][newData[1].length-1];\n          // avgNetIn = (newData2[0].length > 4)?newData2[0][newData2[0].length-1].toFixed(4):newData2[0][newData2[0].length-1];\n          // avgNetOut = (newData2[1].length > 4)?newData2[1][newData2[1].length-1].toFixed(4):newData2[1][newData2[1].length-1];1\n          //console.log('avgs ==> ==> ', avgCpu, d3.format(\"s\")(avgMem))\n\n          self.setState({\n            timeseriesDataCPUMEM: newData,\n            timeseriesCPUMEM: newseries,\n            timeseriesDataNET: newData2,\n            timeseriesNET: newseries,\n            avgCpu: (avgCpu * 5).toFixed(4),\n            avgMem: d3.format(\".2s\")(avgMem),\n            avgNetIn: d3.format(\".2s\")(avgNetIn),\n            avgNetOut: d3.format(\".2s\")(avgNetOut)\n          });\n        } catch (e) {\n          console.log('error', e);\n        } // if(nextProps.listCluster) {\n        //     let item = {};\n        //     let clusters = [];\n        //     nextProps.listCluster.map((clst) => {\n        //\n        //     })\n        // }\n\n      }\n    }\n  }, {\n    key: \"getStatisticsData\",\n    value: function getStatisticsData(self) {\n      // 클러스터 이름으로 해당 앱의 리소스 정보 - 3Pg 우측상단 Application Statistics\n      //console.log('request data params =-=-=', this.selectedCluster, this.selectedApp)\n      if (self.state.dropdownValueTwo !== '') serviceCluster.getAppClusterInfo(self.selectedCluster, self.state.dropdownValueTwo, self.receiveAppCluster, self);\n    }\n  }, {\n    key: \"setDropdownApp\",\n    value: function setDropdownApp(_applications) {\n      // 클러스터 / 어플리케이션\n      var _optionTwo = [];\n\n      if (_applications) {\n        _applications.map(function (cld, i) {\n          if (cld.cloudlet === _self.selectedCloudlet) {\n            cld.clusters.map(function (clst, j) {\n              if (clst.cluster === _self.selectedCluster) {\n                clst.shortApps.map(function (app, i) {\n                  var itemOne = {\n                    key: '',\n                    value: '',\n                    text: ''\n                  };\n                  itemOne.key = app;\n                  itemOne.value = clst.apps[i];\n                  itemOne.text = app;\n\n                  _optionTwo.push(itemOne);\n                });\n              }\n            });\n          }\n        });\n\n        _self.setState({\n          optionTwo: _optionTwo\n        });\n\n        this.selectedApp = _optionTwo[0].value;\n        setTimeout(function () {\n          return _self.setState({\n            dropdownValueTwo: _optionTwo[0].value\n          });\n        }, 3000);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      this.neterval = setInterval(function () {\n        //console.log('re start ==>==>==>', _self.selectedCluster)\n        self.getStatisticsData(self);\n      }, 3000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n      clearInterval(this.neterval);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this2 = this;\n\n      if (nextProps.selectedCluster) {\n        this.setState({\n          selectedCluster: nextProps.selectedCluster\n        });\n      } //\n\n\n      var _optionOne = []; // 클러스터 리스트\n\n      if (nextProps.applications) {\n        nextProps.applications.map(function (cld, i) {\n          if (cld.cloudlet === _this2.selectedCloudlet) {\n            cld.clusters.map(function (clst, j) {\n              var itemOne = {\n                key: '',\n                value: '',\n                text: ''\n              };\n              itemOne.key = clst.cluster;\n              itemOne.value = clst.cluster;\n              itemOne.text = clst.cluster;\n\n              _optionOne.push(itemOne); //this.selectedApp = clst.apps[0];\n\n            }); //this.selectedCluster = cld.clusters[0].cluster; // default cluster\n            //this.setState({dropdownValueOne:cld.clusters[0].cluster})\n          }\n        });\n        this.setState({\n          optionOne: _optionOne\n        });\n        this.setState({\n          applications: nextProps.applications\n        });\n      }\n\n      this.setDropdownApp(nextProps.applications);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$size = this.props.size,\n          width = _this$props$size.width,\n          height = _this$props$size.height;\n      return React.createElement(Grid, {\n        divided: \"vertically\",\n        className: \"panel_contents\",\n        style: {\n          height: '97%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(SelectRange, {\n        sid: \"rangeOne\",\n        optionOne: this.state.optionOne,\n        optionTwo: this.state.optionTwo,\n        optionThree: this.state.optionThree,\n        optionFour: this.state.optionFour,\n        handleChange: this.handleChange,\n        dropdownValueOne: this.state.dropdownValueOne,\n        dropdownValueTwo: this.state.dropdownValueTwo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }), React.createElement(Grid.Row, {\n        columns: 2,\n        className: \"panel_charts\",\n        style: {\n          height: '40%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(TimeSeries, {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        chartData: this.state.timeseriesDataCPUMEM,\n        series: this.state.timeseriesCPUMEM,\n        margin: customMargin,\n        label: this.state.dataLabel,\n        yRange: [0.001, 0.009],\n        y2Position: 0.94,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(NetworkInoutLegend, {\n        type: \"in\",\n        colors: ['#22cccc', '#22cccc'],\n        title: \"CPU\",\n        unit: \"%\",\n        chartId: \"cpuAvg\",\n        value: this.state.avgCpu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }), React.createElement(NetworkInoutLegend, {\n        type: \"out\",\n        colors: ['#6699ff', '#6699ff'],\n        title: \"MEMORY\",\n        unit: \"B\",\n        chartId: \"memAvg\",\n        value: this.state.avgMem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"panel_line_h\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }), React.createElement(SelectRange, {\n        sid: \"rangeTwo\",\n        optionOne: this.state.optionOne,\n        optionTwo: this.state.optionTwo,\n        optionThree: this.state.optionThree,\n        optionFour: this.state.optionFour,\n        handleChange: this.handleChange,\n        dropdownValueOne: this.state.dropdownValueOne,\n        dropdownValueTwo: this.state.dropdownValueTwo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }), React.createElement(Grid.Row, {\n        columns: 2,\n        className: \"panel_charts\",\n        style: {\n          height: '40%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(TimeSeries, {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        chartData: this.state.timeseriesDataNET,\n        series: this.state.timeseriesNET,\n        margin: customMargin,\n        label: this.state.dataLabelNet,\n        yRange: [0.001, 0.009],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(NetworkInoutLegend, {\n        type: \"in\",\n        colors: ['#22cccc', '#22cccc'],\n        title: \"Network RCV\",\n        value: this.state.avgNetIn,\n        unit: \"B\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }), React.createElement(NetworkInoutLegend, {\n        type: \"out\",\n        colors: ['#6699ff', '#6699ff'],\n        title: \"Network SND\",\n        value: this.state.avgNetOut,\n        unit: \"B\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return ApplicationView;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state.receiveDataReduce && state.receiveDataReduce.data ? {\n    appClusterData: state.receiveDataReduce.data.appClusterData\n  } : null;\n};\n\nexport default connect(mapStateToProps, null)(sizeMe({\n  monitorHeight: true\n})(ApplicationView));","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui_current-working/src/components/applicationView.js"],"names":["React","Grid","Dropdown","sizeMe","NetworkInoutLegend","TimeSeries","serviceCluster","connect","utils","SelectRange","d3","customMargin","l","r","b","t","pad","data","x","y","type","_self","ApplicationView","state","optionOne","key","value","text","optionTwo","optionThree","optionFour","timeseriesDataCPUMEM","timeseriesCPUMEM","dataLabel","timeseriesDataNET","timeseriesNET","dataLabelNet","avgCpu","avgMem","avgNetIn","avgNetOut","applications","dropdownValueOne","dropdownValueTwo","dropdownValueCluster","dropdownValueApp","selectedCloudlet","selectedCluster","selectedApp","selectedStatic","selectedPeriod","interval","obj","console","log","id","indexOf","setState","result","self","resultArray","newData","newData2","newseries","newseries2","kbFormat","format","map","series","item","i","values","Number","length","toFixed","e","getAppClusterInfo","receiveAppCluster","_applications","_optionTwo","cld","cloudlet","clusters","clst","j","cluster","shortApps","app","itemOne","apps","push","setTimeout","neterval","setInterval","getStatisticsData","clearInterval","nextProps","nextContext","_optionOne","setDropdownApp","props","size","width","height","handleChange","Component","mapStateToProps","receiveDataReduce","appClusterData","monitorHeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Grid, Dropdown } from 'semantic-ui-react'\nimport sizeMe from 'react-sizeme'\nimport NetworkInoutLegend from './network/networkInoutLegend';\nimport TimeSeries from '../charts/plotly/timeseries';\nimport * as serviceCluster from '../services/service_instance_service';\nimport {connect} from \"react-redux\";\nimport * as utils from '../utils';\nimport SelectRange from '../components/selectRange';\nimport * as d3 from 'd3';\n\nlet customMargin = {\n    l: 50,\n    r: 15,\n    b: 35,\n    t: 5,\n    pad: 0\n}\nvar data = [\n    {\n        x: ['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'],\n        y: [1, 3, 6],\n        type: 'scatter'\n    }\n];\nlet _self = null;\nclass ApplicationView extends React.Component {\n    constructor() {\n        super();\n        _self = this;\n        this.state = {\n            optionOne : [\n                { key: 'ca', value: 'ca', text: 'Select Cluster' },\n                { key: 'cb', value: 'cb', text: 'Cluster-B' },\n                { key: 'cc', value: 'cc', text: 'Cluster-C' },\n                ],\n            optionTwo : [\n                { key: 'g1', value: 'g1', text: 'PokemonGo' },\n                { key: 'g2', value: 'g2', text: 'Game2' },\n                { key: 'g3', value: 'g3', text: 'Game3' }\n                ],\n            optionThree : [\n                { key: 'd1', value: 'd1', text: 'CPU/MEM' },\n                { key: 'd2', value: 'd2', text: 'Network I/O' }\n                ],\n            optionFour : [\n                { key: 't1', value: 't1', text: 'Last Hour' },\n                { key: 't2', value: 't2', text: 'Last 3 Hours' },\n                { key: 't3', value: 't3', text: 'Last 6 Hours' },\n                { key: 't4', value: 't4', text: 'Last 12 Hours' },\n                { key: 't5', value: 't5', text: 'Last 24 Hours' }\n            ],\n            timeseriesDataCPUMEM:[\n                [0,1,2,3,4,5],[2,3,4,5,6,7]\n            ],\n            timeseriesCPUMEM:[\n                [\"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]\n            ],\n            dataLabel:['CPU', 'MEM'],\n            timeseriesDataNET:[\n                [0,1,2,3,4,5],[2,3,4,5,6,7]\n            ],\n            timeseriesNET:[\n                [\"2010-01-01 12:38:22\", \"2011-01-01 05:22:48\", \"2012-01-01 12:00:01\", \"2013-01-01 23:22:00\", \"2014-01-01 24:00:00\", \"2015-01-01 23:59:59\"]\n            ],\n            dataLabelNet:['RCV', 'SND'],\n            avgCpu:0.00,\n            avgMem:0.00,\n            avgNetIn:0.00,\n            avgNetOut:0.00,\n            applications:[],\n            dropdownValueOne:'tdg-barcelona-niantic',\n            dropdownValueTwo:'',\n            dropdownValueCluster:'',\n            dropdownValueApp:''\n\n        }\n        this.selectedCloudlet = 'barcelona-mexdemo';\n        this.selectedCluster = 'tdg-barcelona-niantic';\n        this.selectedApp = '';\n        this.selectedStatic = '';\n        this.selectedPeriod = '';\n        this.interval = null;\n\n    }\n\n    handleChange(obj) {\n        console.log('**************************')\n        console.log('obj. ', obj.id, obj.key, obj.value, obj.key.indexOf('0'))\n        console.log('**************************')\n        if(obj.key.indexOf('0')>-1){\n            _self.selectedCluster = obj.value;\n            _self.setState({dropdownValueOne:obj.value})\n\n        }\n    }\n\n\n    /*\n    Starting number: 1500\n\nd3.format(\",\") : 1,500\n\nd3.format(\".1f\") : 1500.0\n\nd3.format(\",.2f\") : 1,500.00\n\nd3.format(\"s\") : 1.5k\n\nd3.format(\".1s\") : 2k\n\nd3.format(\".2s\") : 1.5k\n\nfunction(d) { return \"$\" + d3.format(\",.2f\")(d); } : $1,500.00\n\nd3.format(\",.2%\") : 150,000.00%\n    */\n    receiveAppCluster(result, self) {\n\n        let resultArray = result;\n        //_self.props.handleInjectData({appClusterData:resultArray})\n        let newData = [[2,3,4,2,3,4],[6,5,6,5,6,7]];\n        let newData2 = [[2,3,4,2,3,4],[6,5,6,5,6,7]];\n        let newseries = [[0,1,2,3,4,5]];\n        let newseries2 = [[0,1,2,3,4,5]];\n        let avgCpu = 0.00;\n        let avgMem = 0.00;\n        let avgNetIn = 0.00;\n        let avgNetOut = 0.00;\n\n        let kbFormat = d3.format('.2s')\n        console.log('result app cluster.........>>', result)\n        if(result){\n            try {\n                result.map((data) => {\n                    data.series.map((item, i) => {\n                        newData[0] = item.values.map((value) => (\n                            Number(value[3])*5\n                        ))\n                        newData[1] = item.values.map((value) => (\n                            Number(value[5])\n                        ))\n                        newseries[0] = item.values.map((value) => (\n                            value[0]\n                        ))\n\n                        newData2[0] = item.values.map((value) => (\n                            Number(value[6])\n                        ))\n                        newData2[1] = item.values.map((value) => (\n                            Number(value[7])\n                        ))\n\n\n\n                    })\n                })\n\n                avgCpu = newData[0][newData[0].length-1];\n                avgMem = newData[1][newData[1].length-1];\n                avgNetIn = newData2[0][newData2[0].length-1];\n                avgNetOut = newData2[1][newData2[0].length-1];\n\n                // avgCpu = (newData[0].length > 4)?newData[0][newData[0].length-1].toFixed(4):newData[0][newData[0].length-1];\n                // avgMem = (newData[1].length > 4)?newData[1][newData[0].length-1].toFixed(4):newData[1][newData[1].length-1];\n                // avgNetIn = (newData2[0].length > 4)?newData2[0][newData2[0].length-1].toFixed(4):newData2[0][newData2[0].length-1];\n                // avgNetOut = (newData2[1].length > 4)?newData2[1][newData2[1].length-1].toFixed(4):newData2[1][newData2[1].length-1];1\n\n                //console.log('avgs ==> ==> ', avgCpu, d3.format(\"s\")(avgMem))\n                self.setState({timeseriesDataCPUMEM:newData, timeseriesCPUMEM:newseries,timeseriesDataNET:newData2, timeseriesNET:newseries,\n                    avgCpu:(avgCpu*5).toFixed(4), avgMem:d3.format(\".2s\")(avgMem), avgNetIn:d3.format(\".2s\")(avgNetIn), avgNetOut:d3.format(\".2s\")(avgNetOut)\n                })\n            }catch(e){\n                console.log('error',e)\n            }\n\n            // if(nextProps.listCluster) {\n            //     let item = {};\n            //     let clusters = [];\n            //     nextProps.listCluster.map((clst) => {\n            //\n            //     })\n            // }\n\n        }\n    }\n\n    getStatisticsData(self) {\n        // 클러스터 이름으로 해당 앱의 리소스 정보 - 3Pg 우측상단 Application Statistics\n        //console.log('request data params =-=-=', this.selectedCluster, this.selectedApp)\n        if(self.state.dropdownValueTwo !== '') serviceCluster.getAppClusterInfo(self.selectedCluster,self.state.dropdownValueTwo, self.receiveAppCluster, self);\n    }\n    setDropdownApp(_applications) {\n        // 클러스터 / 어플리케이션\n        let _optionTwo = [];\n        if(_applications) {\n            _applications.map((cld, i) => {\n                if(cld.cloudlet === _self.selectedCloudlet) {\n                    cld.clusters.map((clst, j) => {\n                        if(clst.cluster === _self.selectedCluster) {\n                            clst.shortApps.map((app, i) => {\n                                let itemOne = { key: '', value: '', text: '' };\n                                itemOne.key = app;\n                                itemOne.value = clst.apps[i];\n                                itemOne.text = app;\n                                _optionTwo.push(itemOne);\n                            })\n                        }\n                    })\n                }\n            })\n\n            _self.setState({optionTwo:_optionTwo})\n            this.selectedApp = _optionTwo[0].value\n            setTimeout(()=>_self.setState({dropdownValueTwo:_optionTwo[0].value}), 3000)\n        }\n    }\n    componentDidMount() {\n        let self = this;\n        this.neterval = setInterval(()=> {\n            //console.log('re start ==>==>==>', _self.selectedCluster)\n            self.getStatisticsData(self);\n        }, 3000)\n    }\n    componentWillUnmount() {\n        clearInterval(this.interval)\n        clearInterval(this.neterval)\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.selectedCluster) {\n            this.setState({selectedCluster:nextProps.selectedCluster})\n        }\n        //\n        let _optionOne = [];\n        // 클러스터 리스트\n        if(nextProps.applications) {\n            nextProps.applications.map((cld, i) => {\n                if(cld.cloudlet === this.selectedCloudlet) {\n                    cld.clusters.map((clst, j) => {\n                        let itemOne = { key: '', value: '', text: '' };\n                        itemOne.key = clst.cluster;\n                        itemOne.value = clst.cluster;\n                        itemOne.text = clst.cluster;\n                        _optionOne.push(itemOne);\n                        //this.selectedApp = clst.apps[0];\n                    })\n                    //this.selectedCluster = cld.clusters[0].cluster; // default cluster\n                    //this.setState({dropdownValueOne:cld.clusters[0].cluster})\n                }\n            })\n            this.setState({optionOne:_optionOne})\n\n            this.setState({applications:nextProps.applications})\n        }\n        this.setDropdownApp(nextProps.applications)\n\n    }\n\n\n    render() {\n        const { width, height } = this.props.size\n        return (\n            <Grid divided='vertically' className='panel_contents' style={{height:'97%'}}>\n\n                <SelectRange sid='rangeOne' optionOne={this.state.optionOne} optionTwo={this.state.optionTwo} optionThree={this.state.optionThree} optionFour={this.state.optionFour}\n                             handleChange={this.handleChange} dropdownValueOne={this.state.dropdownValueOne} dropdownValueTwo={this.state.dropdownValueTwo}/>\n                <Grid.Row columns={2} className='panel_charts' style={{height:'40%'}}>\n                    <Grid.Column width={12}>\n                        {/*<BBLineChart chartId='cpumem' w={width*(12/16)} h={height*0.35} chartData={this.state.timeseriesDataCPUMEM} series={[]}/>*/}\n                        <TimeSeries style={{width:'100%', height:'100%'}} chartData={this.state.timeseriesDataCPUMEM} series={this.state.timeseriesCPUMEM} margin={customMargin} label={this.state.dataLabel} yRange={[0.001, 0.009]} y2Position={0.94}></TimeSeries>\n                    </Grid.Column>\n                    <Grid.Column width={4}>\n                        <Grid.Row>\n                            <NetworkInoutLegend type=\"in\" colors={['#22cccc','#22cccc']} title=\"CPU\"  unit=\"%\" chartId='cpuAvg' value={this.state.avgCpu}></NetworkInoutLegend>\n                            <NetworkInoutLegend type=\"out\" colors={['#6699ff','#6699ff']} title=\"MEMORY\" unit=\"B\" chartId='memAvg' value={this.state.avgMem}></NetworkInoutLegend>\n                        </Grid.Row>\n                    </Grid.Column>\n                </Grid.Row>\n                <div className='panel_line_h'/>\n                <SelectRange sid='rangeTwo' optionOne={this.state.optionOne} optionTwo={this.state.optionTwo} optionThree={this.state.optionThree} optionFour={this.state.optionFour}\n                             handleChange={this.handleChange} dropdownValueOne={this.state.dropdownValueOne}  dropdownValueTwo={this.state.dropdownValueTwo}/>\n                <Grid.Row columns={2} className='panel_charts' style={{height:'40%'}}>\n\n                    <Grid.Column width={12}>\n                        <TimeSeries style={{width:'100%', height:'100%'}} chartData={this.state.timeseriesDataNET} series={this.state.timeseriesNET} margin={customMargin} label={this.state.dataLabelNet} yRange={[0.001, 0.009]}></TimeSeries>\n                    </Grid.Column>\n                    <Grid.Column width={4}>\n                        <Grid.Row>\n                            <NetworkInoutLegend type=\"in\" colors={['#22cccc','#22cccc']} title=\"Network RCV\" value={this.state.avgNetIn} unit=\"B\"></NetworkInoutLegend>\n                            <NetworkInoutLegend type=\"out\" colors={['#6699ff','#6699ff']} title=\"Network SND\" value={this.state.avgNetOut} unit=\"B\"></NetworkInoutLegend>\n                        </Grid.Row>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return (state.receiveDataReduce && state.receiveDataReduce.data)?{\n        appClusterData:state.receiveDataReduce.data.appClusterData,\n\n    }:null;\n};\n\n\nexport default connect(mapStateToProps, null)(sizeMe({ monitorHeight: true })(ApplicationView));\n"]},"metadata":{},"sourceType":"module"}