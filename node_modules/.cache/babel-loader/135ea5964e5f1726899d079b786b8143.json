{"ast":null,"code":"import axios from 'axios-jsonp-pro';\nimport qs from 'qs';\nimport request from 'request';\nimport dotenv from 'dotenv';\nimport FormatComputeDev from './formatter/formatComputeDeveloper';\nimport FormatComputeCloudlet from './formatter/formatComputeCloudlet';\nimport FormatComputeApp from './formatter/formatComputeApp';\nimport FormatComputeOper from './formatter/formatComputeOperator';\nimport FormatComputeInst from './formatter/formatComputeInstance';\nimport FormatMonitorCloudlet from \"./formatter/formatMonitorCloudlet\";\nimport FormatMonitorCluster from \"./formatter/formatMonitorCluster\";\nimport FormatMonitorApp from \"./formatter/formatMonitorApp\";\nimport FormatApplicationInfo from \"./formatter/formatApplicationInfo\";\nvar hostname = window.location.hostname;\n/*\nif environment variable USE_SERVER_SUFFIX\nthen\n   set variable ServerUrl to \"https://<hostname>/server\"\nelse\n    set variable ServerUrl to \"https://<hostname>:3030\"\n    ---> axios.post(ServerUrl + '/CreateFlavor')\n */\n\nvar ServerUrl = 'https://' + hostname + ':3030';\n\nif (process.env.REACT_APP_API_USE_SERVER_SUFFIX === 'true') {\n  ServerUrl = 'https://' + hostname + '/server';\n}\n\nexport function getOperator(resource, callback) {\n  fetch(ServerUrl).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log('infux data == ', data);\n  });\n} //curl -X POST \"https://mexdemo.ctrl.mobiledgex.net:36001/show/cloudlet\" -H \"accept: application/json\" -H \"Content-Type: application/json\" --cacert mex-ca.crt --key mex-client.key --cert mex-client.crt\n\nexport function getClusterService(resource, callback) {\n  axios.get(ServerUrl + '/compute?service=' + resource).then(function (response) {\n    var paseData = JSON.parse(JSON.stringify(response.data));\n    var splitData = JSON.parse(\"[\" + paseData.split('}\\n{').join('},\\n{') + \"]\");\n    console.log('response paseData  -', splitData);\n\n    switch (resource) {\n      case 'flavors':\n        callback(FormatComputeInst(splitData));\n        break;\n\n      case 'cluster':\n        callback(FormatComputeInst(splitData));\n        break;\n\n      case 'operator':\n        callback(FormatComputeOper(splitData));\n        break;\n\n      case 'developer':\n        callback(FormatComputeDev(splitData));\n        break;\n\n      case 'cloudlet':\n        callback(FormatComputeCloudlet(splitData));\n        break;\n\n      case 'app':\n        callback(FormatComputeApp(splitData));\n        break;\n\n      case 'appinst':\n        callback(FormatComputeInst(splitData));\n        break;\n    }\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\nexport function getAppinstHealth(resource, callback) {\n  var resResults = []; //\n\n  axios.all(resource.map(function (reso) {\n    return axios.post(ServerUrl + '/timeAppinst', {\n      service: 'timeAppinst',\n      serviceBody: reso,\n      serviceId: Math.round(Math.random() * 10000)\n    }).then(function (response) {\n      resResults = resResults.concat(FormatMonitorApp(response));\n    }).catch(function (error) {\n      try {\n        if (String(error).indexOf('Network Error') > -1) {\n          console.log(\"NETWORK ERROR@@@@@\");\n        } else {\n          callback({\n            error: error\n          }, resource);\n        }\n      } catch (e) {\n        console.log('any error ??? ');\n      }\n    });\n  })).then(axios.spread(function (resOne, resTwo, resThree) {\n    callback(resResults);\n  }));\n}\n/*\n$ http --verify=false --auth-type=jwt --auth=$SUPERPASS POST https://mc-stage.mobiledgex.net:9900/api/v1/auth/metrics/cluster <<< '{\"region\":\"EU\",\"clusterinst\":{\"cluster_key\":{\"name\":\"asdfqqq\"},\"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"frankfurt-eu\"},\"developer\":\"MobiledgeX\"},\"selector\":\"cpu\",\"last\":2}'\n */\n\nexport function getClusterHealth(resource, callback) {\n  var resResults = []; //\n\n  axios.all(resource.map(function (reso) {\n    return axios.post(ServerUrl + '/timeClusterinst', {\n      service: 'timeClusterinst',\n      serviceBody: reso,\n      serviceId: Math.round(Math.random() * 10000)\n    }).then(function (response) {\n      resResults = resResults.concat(FormatMonitorCluster(response));\n    }).catch(function (error) {\n      try {\n        if (String(error).indexOf('Network Error') > -1) {\n          console.log(\"NETWORK ERROR@@@@@\");\n        } else {//callback({error:error}, resource);\n        }\n      } catch (e) {\n        console.log('any error ??? ');\n      }\n    });\n  })).then(axios.spread(function (resOne, resTwo, resThree, resFour, resFive) {\n    callback(resResults);\n  }));\n}\nexport function getCloudletHealth(resource, callback) {\n  var resResults = []; //\n\n  axios.all(resource.map(function (reso) {\n    return axios.post(ServerUrl + '/timeCloudlet', {\n      service: 'timeCloudlet',\n      serviceBody: reso,\n      serviceId: Math.round(Math.random() * 10000)\n    }).then(function (response) {\n      resResults = resResults.concat(FormatMonitorCloudlet(response));\n      console.log('20190930 formated cloudlet result === ', resResults);\n    }).catch(function (error) {\n      try {\n        if (String(error).indexOf('Network Error') > -1) {\n          console.log(\"NETWORK ERROR@@@@@\");\n        } else {//callback({error:error}, resource);\n        }\n      } catch (e) {\n        console.log('any error ??? ');\n      }\n    });\n  })).then(axios.spread(function (resOne, resTwo, resThree, resFour, resFive) {\n    callback(resResults);\n  }));\n}\nexport function getAppClusterInfo(cluster, app, callback, self) {\n  axios.get(ServerUrl + '/appInstanceList?cluster=' + cluster + '&app=' + app).then(function (response) {\n    var parseData = JSON.parse(JSON.stringify(response.data)); //callback(FormatApplicationInfo(parseData.results), self);\n\n    callback(parseData.results, self);\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\nexport function getAppClusterApp(clusters, callback) {\n  var getCount = 0;\n  var results = [];\n\n  if (clusters.length) {\n    clusters.map(function (cluster) {\n      axios.get(ServerUrl + '/appInstance?cluster=' + cluster).then(function (response) {\n        var parseData = JSON.parse(JSON.stringify(response.data));\n        results.push(parseData.results);\n\n        if (getCount === clusters.length - 1) {\n          getCount = 0;\n          callback(results);\n        } else {\n          getCount++;\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    });\n  }\n}\nexport function getTcpUdpClusterInfo(cluster, app, callback, self) {\n  var getCount = 0;\n  axios.get(ServerUrl + '/tcpudpCluster?cluster=' + cluster + '&app=' + app).then(function (response) {\n    var parseData = JSON.parse(JSON.stringify(response.data));\n    callback(parseData, self);\n  }).catch(function (error) {\n    console.log(error);\n  });\n}","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/services/service_instance_service.js"],"names":["axios","qs","request","dotenv","FormatComputeDev","FormatComputeCloudlet","FormatComputeApp","FormatComputeOper","FormatComputeInst","FormatMonitorCloudlet","FormatMonitorCluster","FormatMonitorApp","FormatApplicationInfo","hostname","window","location","ServerUrl","process","env","REACT_APP_API_USE_SERVER_SUFFIX","getOperator","resource","callback","fetch","then","response","json","data","console","log","getClusterService","get","paseData","JSON","parse","stringify","splitData","split","join","catch","error","getAppinstHealth","resResults","all","map","reso","post","service","serviceBody","serviceId","Math","round","random","concat","String","indexOf","e","spread","resOne","resTwo","resThree","getClusterHealth","resFour","resFive","getCloudletHealth","getAppClusterInfo","cluster","app","self","parseData","results","getAppClusterApp","clusters","getCount","length","push","getTcpUdpClusterInfo"],"mappings":"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","sourcesContent":["\nimport axios from 'axios-jsonp-pro';\nimport qs from 'qs';\nimport request from 'request';\nimport dotenv from 'dotenv';\n\nimport FormatComputeDev from './formatter/formatComputeDeveloper';\nimport FormatComputeCloudlet from './formatter/formatComputeCloudlet';\nimport FormatComputeApp from './formatter/formatComputeApp';\nimport FormatComputeOper from './formatter/formatComputeOperator';\nimport FormatComputeInst from './formatter/formatComputeInstance';\nimport FormatMonitorCloudlet from \"./formatter/formatMonitorCloudlet\";\nimport FormatMonitorCluster from \"./formatter/formatMonitorCluster\";\nimport FormatMonitorApp from \"./formatter/formatMonitorApp\";\nimport FormatApplicationInfo from \"./formatter/formatApplicationInfo\";\n\n\nlet hostname = window.location.hostname;\n/*\nif environment variable USE_SERVER_SUFFIX\nthen\n   set variable ServerUrl to \"https://<hostname>/server\"\nelse\n    set variable ServerUrl to \"https://<hostname>:3030\"\n    ---> axios.post(ServerUrl + '/CreateFlavor')\n */\nlet ServerUrl = 'https://'+hostname+':3030';\n\nif(process.env.REACT_APP_API_USE_SERVER_SUFFIX === 'true') {\n    ServerUrl = 'https://'+hostname+'/server';\n}\nexport function getOperator(resource, callback) {\n\n    fetch(ServerUrl)\n        .then(response => response.json())\n        .then(data => {\n            console.log('infux data == ', data)\n\n        });\n\n}\n\n//curl -X POST \"https://mexdemo.ctrl.mobiledgex.net:36001/show/cloudlet\" -H \"accept: application/json\" -H \"Content-Type: application/json\" --cacert mex-ca.crt --key mex-client.key --cert mex-client.crt\n\nexport function getClusterService(resource, callback) {\n    axios.get(ServerUrl+'/compute?service='+resource)\n        .then(function (response) {\n            let paseData = JSON.parse(JSON.stringify(response.data));\n            let splitData = JSON.parse( \"[\"+paseData.split('}\\n{').join('},\\n{')+\"]\" );\n            console.log('response paseData  -',splitData );\n            switch(resource){\n                case 'flavors': callback(FormatComputeInst(splitData)); break;\n                case 'cluster': callback(FormatComputeInst(splitData)); break;\n                case 'operator': callback(FormatComputeOper(splitData)); break;\n                case 'developer': callback(FormatComputeDev(splitData)); break;\n                case 'cloudlet': callback(FormatComputeCloudlet(splitData)); break;\n                case 'app': callback(FormatComputeApp(splitData)); break;\n                case 'appinst': callback(FormatComputeInst(splitData)); break;\n            }\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n\n}\n\nexport function getAppinstHealth(resource, callback) {\n\n    let resResults = [];\n    //\n    axios.all(\n        resource.map((reso) => {\n            return axios.post(ServerUrl+'/timeAppinst', {\n                service: 'timeAppinst',\n                serviceBody:reso,\n                serviceId: Math.round(Math.random()*10000)\n            })\n                .then(function (response) {\n                    resResults = resResults.concat(FormatMonitorApp(response))\n\n                })\n                .catch(function (error) {\n                    try {\n                        if(String(error).indexOf('Network Error') > -1){\n                            console.log(\"NETWORK ERROR@@@@@\");\n                        } else {\n                            callback({error:error}, resource);\n                        }\n                    } catch(e) {\n                        console.log('any error ??? ')\n                    }\n                });\n        })\n    )\n        .then(axios.spread((resOne, resTwo, resThree) => {\n            callback(resResults)\n        }))\n\n\n}\n\n/*\n$ http --verify=false --auth-type=jwt --auth=$SUPERPASS POST https://mc-stage.mobiledgex.net:9900/api/v1/auth/metrics/cluster <<< '{\"region\":\"EU\",\"clusterinst\":{\"cluster_key\":{\"name\":\"asdfqqq\"},\"cloudlet_key\":{\"operator_key\":{\"name\":\"TDG\"},\"name\":\"frankfurt-eu\"},\"developer\":\"MobiledgeX\"},\"selector\":\"cpu\",\"last\":2}'\n */\nexport function getClusterHealth(resource, callback) {\n    let resResults = [];\n        //\n    axios.all(\n        resource.map((reso) => {\n            return axios.post(ServerUrl+'/timeClusterinst', {\n                service: 'timeClusterinst',\n                serviceBody:reso,\n                serviceId: Math.round(Math.random()*10000)\n            })\n                .then(function (response) {\n                    resResults = resResults.concat(FormatMonitorCluster(response))\n\n                })\n                .catch(function (error) {\n                    try {\n                        if(String(error).indexOf('Network Error') > -1){\n                            console.log(\"NETWORK ERROR@@@@@\");\n                        } else {\n                            //callback({error:error}, resource);\n                        }\n                    } catch(e) {\n                        console.log('any error ??? ')\n                    }\n                });\n        })\n    )\n        .then(axios.spread((resOne, resTwo, resThree, resFour, resFive) => {\n            callback(resResults)\n        }))\n\n\n}\nexport function getCloudletHealth(resource, callback) {\n    let resResults = [];\n        //\n    axios.all(\n        resource.map((reso) => {\n            return axios.post(ServerUrl+'/timeCloudlet', {\n                service: 'timeCloudlet',\n                serviceBody:reso,\n                serviceId: Math.round(Math.random()*10000)\n            })\n                .then(function (response) {\n                    resResults = resResults.concat(FormatMonitorCloudlet(response))\n                    console.log('20190930 formated cloudlet result === ', resResults)\n                })\n                .catch(function (error) {\n                    try {\n                        if(String(error).indexOf('Network Error') > -1){\n                            console.log(\"NETWORK ERROR@@@@@\");\n                        } else {\n                            //callback({error:error}, resource);\n                        }\n                    } catch(e) {\n                        console.log('any error ??? ')\n                    }\n                });\n        })\n    )\n        .then(axios.spread((resOne, resTwo, resThree, resFour, resFive) => {\n            callback(resResults)\n        }))\n\n\n}\n\nexport function getAppClusterInfo(cluster, app, callback, self) {\n    axios.get(ServerUrl+'/appInstanceList?cluster='+cluster+'&app='+app)\n        .then(function (response) {\n            let parseData = JSON.parse(JSON.stringify(response.data));\n            //callback(FormatApplicationInfo(parseData.results), self);\n            callback(parseData.results, self);\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n}\nexport function getAppClusterApp(clusters, callback) {\n    let getCount = 0;\n    let results = [];\n    if(clusters.length) {\n        clusters.map((cluster) => {\n            axios.get(ServerUrl+'/appInstance?cluster='+cluster)\n                .then(function (response) {\n                    let parseData = JSON.parse(JSON.stringify(response.data));\n                    results.push(parseData.results);\n                    if(getCount === clusters.length-1) {\n                        getCount = 0;\n                        callback(results);\n                    } else {\n                        getCount ++;\n                    }\n\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n        })\n    }\n}\n\n\n\nexport function getTcpUdpClusterInfo(cluster, app, callback, self) {\n    let getCount = 0;\n\n    axios.get(ServerUrl+'/tcpudpCluster?cluster='+cluster+'&app='+app)\n        .then(function (response) {\n            let parseData = JSON.parse(JSON.stringify(response.data));\n\n            callback(parseData, self);\n\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}