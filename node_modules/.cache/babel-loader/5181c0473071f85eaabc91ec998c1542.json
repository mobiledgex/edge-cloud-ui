{"ast":null,"code":"import _classCallCheck from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kyungjoon/react_pjt/edge-cloud-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kyungjoon/react_pjt/edge-cloud-ui/src/components/horizontal_timeline_kj/Components/TimelineDot.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Radium from 'radium';\n/**\n * The static/non-static styles Information for a single event dot on the timeline\n */\n\nvar dots = {\n  /**\n   * The style information for the clickable dates that apper floating over the timeline\n   */\n  links: {\n    position: 'absolute',\n    bottom: 0,\n    textAlign: 'center',\n    paddingBottom: 15\n  },\n\n  /**\n   * The base style information for the event dot that appers exactly on the timeline\n   */\n  base: {\n    position: 'absolute',\n    bottom: -5,\n    height: 12,\n    width: 12,\n    borderRadius: '50%',\n    transition: 'background-color 0.3s, border-color 0.3s',\n    ':hover': {} // We need this to track the hover state of this element\n\n  },\n\n  /**\n   * future: The style information for the future dot (wrt selected).\n   * @param {object} styles User passed styles ( foreground, background etc info\n   */\n  future: function future(styles) {\n    return {\n      backgroundColor: styles.background,\n      // border: `2px solid ${styles.background}`,\n      border: \"2px solid \".concat(styles.outline)\n    };\n  },\n\n  /**\n   * past: The styles information for the past dot (wrt selected)\n   * @param {object} styles User passed styles ( foreground, background etc info\n   */\n  past: function past(styles) {\n    return {\n      backgroundColor: styles.background,\n      border: \"2px solid \".concat(styles.foreground)\n    };\n  },\n\n  /**\n   * present: The styles information for the preset dot\n   * @param {object} styles User passed styles ( foreground, background etc info\n   */\n  present: function present(styles) {\n    return {\n      backgroundColor: styles.foreground,\n      border: \"2px solid \".concat(styles.foreground)\n    };\n  }\n};\n/**\n * The markup for one single dot on the timeline\n *\n * @param {object} props The props passed down\n * @return {StatelessFunctionalReactComponent} The markup for a dot\n */\n\nvar TimelineDot =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TimelineDot, _React$Component);\n\n  function TimelineDot() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TimelineDot);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TimelineDot)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.__getDotStyles__ = function (dotType, key) {\n      var hoverStyle = {\n        backgroundColor: _this.props.styles.foreground,\n        border: \"2px solid \".concat(_this.props.styles.foreground)\n      };\n      return [dots.base, {\n        left: _this.props.labelWidth / 2 - dots.base.width / 2\n      }, dots[dotType](_this.props.styles), Radium.getState(_this.state, key, ':hover') || Radium.getState(_this.state, 'dot-dot', 'dot-dot') ? hoverStyle : undefined];\n    };\n\n    return _this;\n  }\n\n  _createClass(TimelineDot, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var dotType = 'future';\n\n      if (this.props.index < this.props.selected) {\n        dotType = 'past';\n      } else if (this.props.index === this.props.selected) {\n        dotType = 'present';\n      }\n\n      return React.createElement(\"li\", {\n        key: this.props.date,\n        id: \"timeline-dot-\".concat(this.props.date),\n        className: \"\".concat(dotType, \" dot-label\"),\n        onClick: function onClick() {\n          return _this2.props.onClick(_this2.props.index);\n        },\n        style: [dots.links, {\n          left: this.props.distanceFromOrigin - this.props.labelWidth / 2,\n          cursor: 'pointer',\n          width: this.props.labelWidth,\n          ':hover': {} // We need this to track the hover state of this element\n\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.props.label, React.createElement(\"span\", {\n        key: \"dot-dot\",\n        style: this.__getDotStyles__(dotType, this.props.date),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TimelineDot;\n}(React.Component);\n/**\n * propTypes\n * @type {Object}\n */\n\n\nTimelineDot.propTypes = {\n  // The index of the currently selected dot (required to style as old, present, or future event)\n  selected: PropTypes.number.isRequired,\n  // The index of the present event (used for deciding the styles alongside selected)\n  index: PropTypes.number.isRequired,\n  // The actual date of the event (used as key and id)\n  date: PropTypes.string.isRequired,\n  // The onClick handler ( in this case to trigger the fillingMotion of the timeline )\n  onClick: PropTypes.func.isRequired,\n  // The date of the event (required to display it)\n  label: PropTypes.string.isRequired,\n  // The width you want the labels to be\n  labelWidth: PropTypes.number.isRequired,\n  // The numerical value in pixels of the distance from the origin\n  distanceFromOrigin: PropTypes.number.isRequired,\n  // The styles prefrences of the user\n  styles: PropTypes.object.isRequired\n};\nexport default Radium(TimelineDot);","map":{"version":3,"sources":["/Users/kyungjoon/react_pjt/edge-cloud-ui/src/components/horizontal_timeline_kj/Components/TimelineDot.jsx"],"names":["React","PropTypes","Radium","dots","links","position","bottom","textAlign","paddingBottom","base","height","width","borderRadius","transition","future","styles","backgroundColor","background","border","outline","past","foreground","present","TimelineDot","__getDotStyles__","dotType","key","hoverStyle","props","left","labelWidth","getState","state","undefined","index","selected","date","onClick","distanceFromOrigin","cursor","label","Component","propTypes","number","isRequired","string","func","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Radium from 'radium';\n\n/**\n * The static/non-static styles Information for a single event dot on the timeline\n */\nconst dots = {\n    /**\n     * The style information for the clickable dates that apper floating over the timeline\n     */\n    links: {\n        position: 'absolute',\n        bottom: 0,\n        textAlign: 'center',\n        paddingBottom: 15,\n    },\n    /**\n     * The base style information for the event dot that appers exactly on the timeline\n     */\n    base: {\n        position: 'absolute',\n        bottom: -5,\n        height: 12,\n        width: 12,\n        borderRadius: '50%',\n        transition: 'background-color 0.3s, border-color 0.3s',\n        ':hover': {}, // We need this to track the hover state of this element\n    },\n    /**\n     * future: The style information for the future dot (wrt selected).\n     * @param {object} styles User passed styles ( foreground, background etc info\n     */\n    future: (styles) => ({\n        backgroundColor: styles.background,\n        // border: `2px solid ${styles.background}`,\n        border: `2px solid ${styles.outline}`,\n    }),\n    /**\n     * past: The styles information for the past dot (wrt selected)\n     * @param {object} styles User passed styles ( foreground, background etc info\n     */\n    past: (styles) => ({\n        backgroundColor: styles.background,\n        border: `2px solid ${styles.foreground}`,\n    }),\n    /**\n     * present: The styles information for the preset dot\n     * @param {object} styles User passed styles ( foreground, background etc info\n     */\n    present: (styles) => ({\n        backgroundColor: styles.foreground,\n        border: `2px solid ${styles.foreground}`,\n    }),\n};\n\n\n/**\n * The markup for one single dot on the timeline\n *\n * @param {object} props The props passed down\n * @return {StatelessFunctionalReactComponent} The markup for a dot\n */\nclass TimelineDot extends React.Component {\n\n    __getDotStyles__ = (dotType, key) => {\n        const hoverStyle = {\n            backgroundColor: this.props.styles.foreground,\n            border: `2px solid ${this.props.styles.foreground}`,\n        };\n\n        return [\n            dots.base,\n            {left: this.props.labelWidth / 2 - dots.base.width / 2},\n            dots[dotType](this.props.styles),\n            Radium.getState(this.state, key, ':hover') || Radium.getState(this.state, 'dot-dot', 'dot-dot')\n                ? hoverStyle\n                : undefined,\n        ]\n    }\n\n    render() {\n        let dotType = 'future';\n        if (this.props.index < this.props.selected) {\n            dotType = 'past';\n        } else if (this.props.index === this.props.selected) {\n            dotType = 'present';\n        }\n\n        return (\n            <li\n                key={this.props.date}\n                id={`timeline-dot-${this.props.date}`}\n                className={`${dotType} dot-label`}\n                onClick={() => this.props.onClick(this.props.index)}\n                style={[\n                    dots.links,\n                    {\n                        left: this.props.distanceFromOrigin - this.props.labelWidth / 2,\n                        cursor: 'pointer',\n                        width: this.props.labelWidth,\n                        ':hover': {}, // We need this to track the hover state of this element\n                    }\n                ]}\n            >\n                {this.props.label}\n                <span\n                    key='dot-dot'\n                    style={this.__getDotStyles__(dotType, this.props.date)}\n                />\n            </li>\n        );\n    }\n}\n\n/**\n * propTypes\n * @type {Object}\n */\nTimelineDot.propTypes = {\n    // The index of the currently selected dot (required to style as old, present, or future event)\n    selected: PropTypes.number.isRequired,\n    // The index of the present event (used for deciding the styles alongside selected)\n    index: PropTypes.number.isRequired,\n    // The actual date of the event (used as key and id)\n    date: PropTypes.string.isRequired,\n    // The onClick handler ( in this case to trigger the fillingMotion of the timeline )\n    onClick: PropTypes.func.isRequired,\n    // The date of the event (required to display it)\n    label: PropTypes.string.isRequired,\n    // The width you want the labels to be\n    labelWidth: PropTypes.number.isRequired,\n    // The numerical value in pixels of the distance from the origin\n    distanceFromOrigin: PropTypes.number.isRequired,\n    // The styles prefrences of the user\n    styles: PropTypes.object.isRequired\n};\n\nexport default Radium(TimelineDot);\n"]},"metadata":{},"sourceType":"module"}